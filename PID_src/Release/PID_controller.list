
PID_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a074  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800a218  0800a218  0001a218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a694  0800a694  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a69c  0800a69c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800a6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000224  0800a8c8  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  0800a8c8  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001790e  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339d  00000000  00000000  00037b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010e8b  00000000  00000000  0003d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006914  00000000  00000000  0004e2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00054c0f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006228  00000000  00000000  00054c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1fc 	.word	0x0800a1fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	0800a1fc 	.word	0x0800a1fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <lcd_set_pin>:
	volatile uint32_t AFRH;
}PORTx_TypeDef;


// functions
static inline void lcd_set_pin(PORTx_TypeDef *port, uint8_t pin){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1<<pin);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	78fa      	ldrb	r2, [r7, #3]
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <lcd_reset_pin>:
static inline void lcd_reset_pin(PORTx_TypeDef *port, uint8_t pin){
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1<<(pin+16));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	3210      	adds	r2, #16
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	619a      	str	r2, [r3, #24]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <lcd_set_to_output>:
	// push down
	SET_BIT(port->PUPDR, (2<<(pin*2U)));

}
// set as output
static inline void lcd_set_to_output(PORTx_TypeDef *port, uint8_t pin){
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
	//--------- port mode ----------------------------//
	// reset configure bits
	RESET_BIT(port->MODER, (3<<(pin*2U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	0052      	lsls	r2, r2, #1
 8000fba:	2103      	movs	r1, #3
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	43d2      	mvns	r2, r2
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
	//set as output
	SET_BIT(port->MODER, (1<<(pin*2)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	0052      	lsls	r2, r2, #1
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]

	RESET_BIT(port->PUPDR, (3<<(pin*2U)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	0052      	lsls	r2, r2, #1
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	43d2      	mvns	r2, r2
 8000fec:	401a      	ands	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60da      	str	r2, [r3, #12]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <lcd_send_half>:

static inline void lcd_send_half(uint8_t data){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	if(data & (1<<0))
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <lcd_send_half+0x1e>
		lcd_set_pin(PORT(LCD_D4_PORT), LCD_D4);
 8001014:	210c      	movs	r1, #12
 8001016:	481b      	ldr	r0, [pc, #108]	; (8001084 <lcd_send_half+0x84>)
 8001018:	f7ff ff9a 	bl	8000f50 <lcd_set_pin>
 800101c:	e003      	b.n	8001026 <lcd_send_half+0x26>
	else
		lcd_reset_pin(PORT(LCD_D4_PORT), LCD_D4);
 800101e:	210c      	movs	r1, #12
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <lcd_send_half+0x84>)
 8001022:	f7ff ffaa 	bl	8000f7a <lcd_reset_pin>

	if(data & (1<<1))
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <lcd_send_half+0x3a>
		lcd_set_pin(PORT(LCD_D5_PORT), LCD_D5);
 8001030:	210f      	movs	r1, #15
 8001032:	4814      	ldr	r0, [pc, #80]	; (8001084 <lcd_send_half+0x84>)
 8001034:	f7ff ff8c 	bl	8000f50 <lcd_set_pin>
 8001038:	e003      	b.n	8001042 <lcd_send_half+0x42>
	else
		lcd_reset_pin(PORT(LCD_D5_PORT), LCD_D5);
 800103a:	210f      	movs	r1, #15
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <lcd_send_half+0x84>)
 800103e:	f7ff ff9c 	bl	8000f7a <lcd_reset_pin>

	if(data & (1<<2))
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <lcd_send_half+0x56>
		lcd_set_pin(PORT(LCD_D6_PORT), LCD_D6);
 800104c:	2103      	movs	r1, #3
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <lcd_send_half+0x88>)
 8001050:	f7ff ff7e 	bl	8000f50 <lcd_set_pin>
 8001054:	e003      	b.n	800105e <lcd_send_half+0x5e>
	else
		lcd_reset_pin(PORT(LCD_D6_PORT), LCD_D6);
 8001056:	2103      	movs	r1, #3
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <lcd_send_half+0x88>)
 800105a:	f7ff ff8e 	bl	8000f7a <lcd_reset_pin>

	if(data & (1<<3))
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <lcd_send_half+0x72>
		lcd_set_pin(PORT(LCD_D7_PORT), LCD_D7);
 8001068:	2104      	movs	r1, #4
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <lcd_send_half+0x88>)
 800106c:	f7ff ff70 	bl	8000f50 <lcd_set_pin>
	else
		lcd_reset_pin(PORT(LCD_D7_PORT), LCD_D7);
}
 8001070:	e003      	b.n	800107a <lcd_send_half+0x7a>
		lcd_reset_pin(PORT(LCD_D7_PORT), LCD_D7);
 8001072:	2104      	movs	r1, #4
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <lcd_send_half+0x88>)
 8001076:	f7ff ff80 	bl	8000f7a <lcd_reset_pin>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400

0800108c <lcd_init_pin>:
 */
#include "hd44780.h"

// init pin as out PP ,medium speed ,  no Pu/Pd
// port -
void lcd_init_pin(PORTx_TypeDef *port, uint8_t pin){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]

	//--------- port mode ----------------------------//
	// reset configure bits
	RESET_BIT(port->MODER, (3<<(pin*2U)));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	0052      	lsls	r2, r2, #1
 80010a0:	2103      	movs	r1, #3
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	43d2      	mvns	r2, r2
 80010a8:	401a      	ands	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
	//set as output
	SET_BIT(port->MODER, (1<<(pin*2)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	0052      	lsls	r2, r2, #1
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
	//------------------------------------------------//

	//--------- configure output mode ----------------//
	// reset configure bit (0 - set as output push-pull
	RESET_BIT(port->OTYPER, (1<<(pin)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	43d2      	mvns	r2, r2
 80010d0:	401a      	ands	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
	//------------------------------------------------//

	//--------- configure seed -----------------------//
	// reset configure bits
	RESET_BIT(port->OSPEDDR, (3<<(pin*2U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	0052      	lsls	r2, r2, #1
 80010de:	2103      	movs	r1, #3
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
	// set medium speed
	SET_BIT(port->OSPEDDR, (1<<(pin*2)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
	//------------------------------------------------//

	//--------- pull-up/ pull-down -------------------//
	// reset configure bits (00 - no pull-up/down ----//
	RESET_BIT(port->PUPDR, (3<<(pin*2U)));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	2103      	movs	r1, #3
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	43d2      	mvns	r2, r2
 8001110:	401a      	ands	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60da      	str	r2, [r3, #12]
	//------------------------------------------------//

}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <init_lcd>:

void init_lcd(void(*delay_us)(uint32_t us)){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	//regist delay funcition
	_delay_us = delay_us;
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <init_lcd+0x13c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
	// config pins as output pp , low
	lcd_init_pin(PORT(LCD_D7_PORT), LCD_D7);
 8001132:	2104      	movs	r1, #4
 8001134:	484b      	ldr	r0, [pc, #300]	; (8001264 <init_lcd+0x140>)
 8001136:	f7ff ffa9 	bl	800108c <lcd_init_pin>
	lcd_init_pin(PORT(LCD_D6_PORT), LCD_D6);
 800113a:	2103      	movs	r1, #3
 800113c:	4849      	ldr	r0, [pc, #292]	; (8001264 <init_lcd+0x140>)
 800113e:	f7ff ffa5 	bl	800108c <lcd_init_pin>
	lcd_init_pin(PORT(LCD_D5_PORT), LCD_D5);
 8001142:	210f      	movs	r1, #15
 8001144:	4848      	ldr	r0, [pc, #288]	; (8001268 <init_lcd+0x144>)
 8001146:	f7ff ffa1 	bl	800108c <lcd_init_pin>
	lcd_init_pin(PORT(LCD_D4_PORT), LCD_D4);
 800114a:	210c      	movs	r1, #12
 800114c:	4846      	ldr	r0, [pc, #280]	; (8001268 <init_lcd+0x144>)
 800114e:	f7ff ff9d 	bl	800108c <lcd_init_pin>
	lcd_init_pin(PORT(LCD_RS_PORT), LCD_RS);
 8001152:	2101      	movs	r1, #1
 8001154:	4844      	ldr	r0, [pc, #272]	; (8001268 <init_lcd+0x144>)
 8001156:	f7ff ff99 	bl	800108c <lcd_init_pin>
	lcd_init_pin(PORT(LCD_E_PORT), LCD_E);
 800115a:	2100      	movs	r1, #0
 800115c:	4842      	ldr	r0, [pc, #264]	; (8001268 <init_lcd+0x144>)
 800115e:	f7ff ff95 	bl	800108c <lcd_init_pin>
#if USE_RW == 1
	lcd_init_pin(PORT(LCD_RW_PORT), LCD_RW);
#endif
	// set high on control lines
	SET_RS;
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <init_lcd+0x144>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a40      	ldr	r2, [pc, #256]	; (8001268 <init_lcd+0x144>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6193      	str	r3, [r2, #24]
	SET_E;
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <init_lcd+0x144>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <init_lcd+0x144>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6193      	str	r3, [r2, #24]
#if USE_RW == 1
	SET_RW;
#endif
	// delay 15 ms

	_delay_us(15000);
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <init_lcd+0x13c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001182:	4798      	blx	r3

	// set low on control linese
	CLR_E;
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <init_lcd+0x144>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a37      	ldr	r2, [pc, #220]	; (8001268 <init_lcd+0x144>)
 800118a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118e:	6193      	str	r3, [r2, #24]
	CLR_RS;
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <init_lcd+0x144>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a34      	ldr	r2, [pc, #208]	; (8001268 <init_lcd+0x144>)
 8001196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119a:	6193      	str	r3, [r2, #24]
#if USE_RW == 1
	CLR_RW;
#endif
	// DL = 1 , 8 bit mode
	SET_E;
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <init_lcd+0x144>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a31      	ldr	r2, [pc, #196]	; (8001268 <init_lcd+0x144>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6193      	str	r3, [r2, #24]
	lcd_send_half(0x03);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f7ff ff29 	bl	8001000 <lcd_send_half>
	CLR_E;
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <init_lcd+0x144>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <init_lcd+0x144>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6193      	str	r3, [r2, #24]
	_delay_us(4100);
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <init_lcd+0x13c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f241 0004 	movw	r0, #4100	; 0x1004
 80011c2:	4798      	blx	r3

	// DL = 1
	SET_E;
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <init_lcd+0x144>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <init_lcd+0x144>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6193      	str	r3, [r2, #24]
	lcd_send_half(0x03);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff ff15 	bl	8001000 <lcd_send_half>
	CLR_E;
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <init_lcd+0x144>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a23      	ldr	r2, [pc, #140]	; (8001268 <init_lcd+0x144>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6193      	str	r3, [r2, #24]
	_delay_us(100);
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <init_lcd+0x13c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	4798      	blx	r3

	//DL = 1
	SET_E;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <init_lcd+0x144>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <init_lcd+0x144>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6193      	str	r3, [r2, #24]
	lcd_send_half(0x03);
 80011f6:	2003      	movs	r0, #3
 80011f8:	f7ff ff02 	bl	8001000 <lcd_send_half>
	CLR_E;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <init_lcd+0x144>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <init_lcd+0x144>)
 8001202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001206:	6193      	str	r3, [r2, #24]
	_delay_us(100);
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <init_lcd+0x13c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2064      	movs	r0, #100	; 0x64
 800120e:	4798      	blx	r3

	// DL = 0 4bit mode
	SET_E;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <init_lcd+0x144>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <init_lcd+0x144>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6193      	str	r3, [r2, #24]
	lcd_send_half(0x02);
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff feef 	bl	8001000 <lcd_send_half>
	CLR_E;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <init_lcd+0x144>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <init_lcd+0x144>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6193      	str	r3, [r2, #24]
	_delay_us(100);
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <init_lcd+0x13c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	4798      	blx	r3

	// settings
	lcd_write_cmd(0b00101000);
 8001236:	2028      	movs	r0, #40	; 0x28
 8001238:	f000 f8a2 	bl	8001380 <lcd_write_cmd>
	lcd_write_cmd(0b00001000);
 800123c:	2008      	movs	r0, #8
 800123e:	f000 f89f 	bl	8001380 <lcd_write_cmd>
	lcd_write_cmd(0b00001111);
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f89c 	bl	8001380 <lcd_write_cmd>
	lcd_write_cmd(0b00010100);
 8001248:	2014      	movs	r0, #20
 800124a:	f000 f899 	bl	8001380 <lcd_write_cmd>
	lcd_cls();
 800124e:	f000 f80d 	bl	800126c <lcd_cls>
	// set cursor on start position
	lcd_write_cmd(0x02);
 8001252:	2002      	movs	r0, #2
 8001254:	f000 f894 	bl	8001380 <lcd_write_cmd>


}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000270 	.word	0x20000270
 8001264:	40020400 	.word	0x40020400
 8001268:	40020000 	.word	0x40020000

0800126c <lcd_cls>:
void lcd_cls(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	lcd_write_cmd(0x01);
 8001270:	2001      	movs	r0, #1
 8001272:	f000 f885 	bl	8001380 <lcd_write_cmd>
#if USE_RW == 0
	_delay_us(4900);
 8001276:	4b03      	ldr	r3, [pc, #12]	; (8001284 <lcd_cls+0x18>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f241 3024 	movw	r0, #4900	; 0x1324
 800127e:	4798      	blx	r3
#endif
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000270 	.word	0x20000270

08001288 <lcd_locate>:
void lcd_locate(uint8_t y, uint8_t x){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	switch(y){
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <lcd_locate+0x1c>
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d003      	beq.n	80012aa <lcd_locate+0x22>
 80012a2:	e005      	b.n	80012b0 <lcd_locate+0x28>

	case 0: y = LCD_LINE1; break;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	e002      	b.n	80012b0 <lcd_locate+0x28>
#if (LCD_Y>1)
	case 1: y = LCD_LINE2; break;
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	bf00      	nop
#endif
#if (LCD_Y>3)
	case 3: y = LCD_LINE4; break;
#endif
	}
	lcd_write_cmd((0x80+y+x));
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3b80      	subs	r3, #128	; 0x80
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f85f 	bl	8001380 <lcd_write_cmd>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <lcd_str>:
void lcd_str(char *str){
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	while(*str)
 80012d2:	e006      	b.n	80012e2 <lcd_str+0x18>
		lcd_write_data(*str++);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f865 	bl	80013ac <lcd_write_data>
	while(*str)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f4      	bne.n	80012d4 <lcd_str+0xa>
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <lcd_write_byte>:

// sedn byte to lcd
void lcd_write_byte(unsigned char data){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	// set D4-D7 pins as outputs
	lcd_set_to_output(PORT(LCD_D4_PORT), LCD_D4);
 80012fe:	210c      	movs	r1, #12
 8001300:	481c      	ldr	r0, [pc, #112]	; (8001374 <lcd_write_byte+0x80>)
 8001302:	f7ff fe50 	bl	8000fa6 <lcd_set_to_output>
	lcd_set_to_output(PORT(LCD_D5_PORT), LCD_D5);
 8001306:	210f      	movs	r1, #15
 8001308:	481a      	ldr	r0, [pc, #104]	; (8001374 <lcd_write_byte+0x80>)
 800130a:	f7ff fe4c 	bl	8000fa6 <lcd_set_to_output>
	lcd_set_to_output(PORT(LCD_D6_PORT), LCD_D6);
 800130e:	2103      	movs	r1, #3
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <lcd_write_byte+0x84>)
 8001312:	f7ff fe48 	bl	8000fa6 <lcd_set_to_output>
	lcd_set_to_output(PORT(LCD_D7_PORT), LCD_D7);
 8001316:	2104      	movs	r1, #4
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <lcd_write_byte+0x84>)
 800131a:	f7ff fe44 	bl	8000fa6 <lcd_set_to_output>

#if USE_RW == 1
	CLR_RW;
#endif

	SET_E;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <lcd_write_byte+0x80>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <lcd_write_byte+0x80>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
	//sending 4 old bits
	lcd_send_half(data>>4);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe65 	bl	8001000 <lcd_send_half>
	CLR_E;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <lcd_write_byte+0x80>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <lcd_write_byte+0x80>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6193      	str	r3, [r2, #24]

	SET_E;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <lcd_write_byte+0x80>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <lcd_write_byte+0x80>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
	// sending 4 young bits
	lcd_send_half(data);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe55 	bl	8001000 <lcd_send_half>
	CLR_E;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <lcd_write_byte+0x80>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <lcd_write_byte+0x80>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6193      	str	r3, [r2, #24]

#if USE_RW == 1
	while(check_BF() & (1<<7));
#else
	_delay_us(120);
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <lcd_write_byte+0x88>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2078      	movs	r0, #120	; 0x78
 8001368:	4798      	blx	r3
#endif

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	20000270 	.word	0x20000270

08001380 <lcd_write_cmd>:

void lcd_write_cmd(uint8_t cmd){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	CLR_RS;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <lcd_write_cmd+0x28>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <lcd_write_cmd+0x28>)
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	6193      	str	r3, [r2, #24]
	lcd_write_byte(cmd);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffab 	bl	80012f4 <lcd_write_byte>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40020000 	.word	0x40020000

080013ac <lcd_write_data>:
void lcd_write_data(uint8_t data){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	SET_RS;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <lcd_write_data+0x28>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <lcd_write_data+0x28>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6193      	str	r3, [r2, #24]
	lcd_write_byte(data);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff95 	bl	80012f4 <lcd_write_byte>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020000 	.word	0x40020000

080013d8 <DWT_Delay_Init>:
 *  Created on: 6 cze 2021
 *      Author: fet
 */
#include "dwt_Delay.h"

uint32_t DWT_Delay_Init(void){
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	// disable TRC
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <DWT_Delay_Init+0x58>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a13      	ldr	r2, [pc, #76]	; (8001430 <DWT_Delay_Init+0x58>)
 80013e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e6:	60d3      	str	r3, [r2, #12]
	//enable TRC
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <DWT_Delay_Init+0x58>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <DWT_Delay_Init+0x58>)
 80013ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f2:	60d3      	str	r3, [r2, #12]

	//Disable clock cycle counter
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <DWT_Delay_Init+0x5c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <DWT_Delay_Init+0x5c>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6013      	str	r3, [r2, #0]
	// Enable clock cycle counter
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <DWT_Delay_Init+0x5c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <DWT_Delay_Init+0x5c>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

	// reset the clock cycle counter val
	DWT->CYCCNT = 0;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <DWT_Delay_Init+0x5c>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]

	// wait 3 cycles
	__ASM volatile ("NOP");
 8001412:	bf00      	nop
	__ASM volatile ("NOP");
 8001414:	bf00      	nop
	__ASM volatile ("NOP");
 8001416:	bf00      	nop

	// check if clock cycle counter has started
	if(DWT->CYCCNT){
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <DWT_Delay_Init+0x5c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <DWT_Delay_Init+0x4c>
		return 0; // clock started
 8001420:	2300      	movs	r3, #0
 8001422:	e000      	b.n	8001426 <DWT_Delay_Init+0x4e>
	}
	else
	{
		return 1; // clock not started
 8001424:	2301      	movs	r3, #1
	}
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000edf0 	.word	0xe000edf0
 8001434:	e0001000 	.word	0xe0001000

08001438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <MX_GPIO_Init+0xec>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a33      	ldr	r2, [pc, #204]	; (8001524 <MX_GPIO_Init+0xec>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <MX_GPIO_Init+0xec>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_GPIO_Init+0xec>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a2c      	ldr	r2, [pc, #176]	; (8001524 <MX_GPIO_Init+0xec>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_GPIO_Init+0xec>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_GPIO_Init+0xec>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a25      	ldr	r2, [pc, #148]	; (8001524 <MX_GPIO_Init+0xec>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <MX_GPIO_Init+0xec>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_GPIO_Init+0xec>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <MX_GPIO_Init+0xec>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_GPIO_Init+0xec>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|SERVO_POWER_Pin|vl53l0x_POWER_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f240 6101 	movw	r1, #1537	; 0x601
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_GPIO_Init+0xf0>)
 80014c6:	f002 fc25 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_GPIO_Init+0xf0>)
 80014e2:	f002 fa7b 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SERVO_POWER_Pin|vl53l0x_POWER_Pin;
 80014e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001500:	f002 fa6c 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001504:	2320      	movs	r3, #32
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001518:	f002 fa60 	bl	80039dc <HAL_GPIO_Init>

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40020400 	.word	0x40020400

0800152c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2C1_Init+0x50>)
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <MX_I2C1_Init+0x54>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_I2C1_Init+0x50>)
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_I2C1_Init+0x58>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_I2C1_Init+0x50>)
 800154a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_I2C1_Init+0x50>)
 800156a:	f002 fbed 	bl	8003d48 <HAL_I2C_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001574:	f000 fc24 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000274 	.word	0x20000274
 8001580:	40005400 	.word	0x40005400
 8001584:	000186a0 	.word	0x000186a0

08001588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_I2C_MspInit+0x84>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12c      	bne.n	8001604 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_I2C_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_I2C_MspInit+0x88>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_I2C_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015cc:	2312      	movs	r3, #18
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d8:	2304      	movs	r3, #4
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <HAL_I2C_MspInit+0x8c>)
 80015e4:	f002 f9fa 	bl	80039dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_I2C_MspInit+0x88>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_I2C_MspInit+0x88>)
 80015f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_I2C_MspInit+0x88>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40005400 	.word	0x40005400
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400

08001618 <DWT_Delay_us_>:

#include "stm32f4xx_hal.h"

uint32_t DWT_Delay_Init(void);

__STATIC_INLINE void DWT_Delay_us_(volatile uint32_t u32_microseconds){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	uint32_t initial_ticks = DWT->CYCCNT;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <DWT_Delay_us_+0x44>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (HAL_RCC_GetHCLKFreq()/ 1000000);
 8001626:	f004 f807 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 800162a:	4603      	mov	r3, r0
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <DWT_Delay_us_+0x48>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0c9b      	lsrs	r3, r3, #18
 8001634:	60bb      	str	r3, [r7, #8]
	u32_microseconds *= ticks;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	607b      	str	r3, [r7, #4]
	while((DWT->CYCCNT - initial_ticks) < u32_microseconds);
 8001640:	bf00      	nop
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <DWT_Delay_us_+0x44>)
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad2      	subs	r2, r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3f8      	bcc.n	8001642 <DWT_Delay_us_+0x2a>

}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e0001000 	.word	0xe0001000
 8001660:	431bde83 	.word	0x431bde83
 8001664:	00000000 	.word	0x00000000

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166e:	f002 f831 	bl	80036d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001672:	f000 fb0d 	bl	8001c90 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  DWT_Delay_Init();
 8001676:	f7ff feaf 	bl	80013d8 <DWT_Delay_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167a:	f7ff fedd 	bl	8001438 <MX_GPIO_Init>
  MX_RTC_Init();
 800167e:	f000 fcef 	bl	8002060 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001682:	f001 f895 	bl	80027b0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001686:	f7ff ff51 	bl	800152c <MX_I2C1_Init>
  MX_TIM1_Init();
 800168a:	f000 fe5d 	bl	8002348 <MX_TIM1_Init>
  MX_TIM2_Init();
 800168e:	f000 fefd 	bl	800248c <MX_TIM2_Init>
  MX_TIM10_Init();
 8001692:	f000 ff9b 	bl	80025cc <MX_TIM10_Init>
  MX_TIM3_Init();
 8001696:	f000 ff45 	bl	8002524 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800169a:	f000 fb7b 	bl	8001d94 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  init_lcd(DWT_Delay_us_);
 800169e:	48b6      	ldr	r0, [pc, #728]	; (8001978 <main+0x310>)
 80016a0:	f7ff fd40 	bl	8001124 <init_lcd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //deviceList_sendToTerminal();

  // servo initial value for leveling
  htim1.Instance->CCR1 = 150;
 80016a4:	4bb5      	ldr	r3, [pc, #724]	; (800197c <main+0x314>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2296      	movs	r2, #150	; 0x96
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
  // start PWM to control servo
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	48b3      	ldr	r0, [pc, #716]	; (800197c <main+0x314>)
 80016b0:	f004 faf0 	bl	8005c94 <HAL_TIM_PWM_Start>

  __HAL_TIM_CLEAR_FLAG(&htim10, TIM_FLAG_UPDATE);
 80016b4:	4bb2      	ldr	r3, [pc, #712]	; (8001980 <main+0x318>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0201 	mvn.w	r2, #1
 80016bc:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim10);
 80016be:	48b0      	ldr	r0, [pc, #704]	; (8001980 <main+0x318>)
 80016c0:	f004 fa20 	bl	8005b04 <HAL_TIM_Base_Start_IT>
  //start channels 1 and 2 in timer3 to work with encoder
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 80016c4:	2100      	movs	r1, #0
 80016c6:	48af      	ldr	r0, [pc, #700]	; (8001984 <main+0x31c>)
 80016c8:	f004 fb94 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80016cc:	2104      	movs	r1, #4
 80016ce:	48ad      	ldr	r0, [pc, #692]	; (8001984 <main+0x31c>)
 80016d0:	f004 fb90 	bl	8005df4 <HAL_TIM_IC_Start>

  //HAL_TIM_Base_Start(&htim2);

  //uint8_t div_tab[100] = {0};
 // HAL_UART_Transmit(&huart1, (uint8_t *)"startuje init\n\r", 15, 50);
  lcd_str("start vl53l0x");
 80016d4:	48ac      	ldr	r0, [pc, #688]	; (8001988 <main+0x320>)
 80016d6:	f7ff fdf8 	bl	80012ca <lcd_str>
  // power on
  HAL_GPIO_WritePin(vl53l0x_POWER_GPIO_Port, vl53l0x_POWER_Pin, RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e0:	48aa      	ldr	r0, [pc, #680]	; (800198c <main+0x324>)
 80016e2:	f002 fb17 	bl	8003d14 <HAL_GPIO_WritePin>
  // wait 35 ms
  DWT_Delay_us_(35000);
 80016e6:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80016ea:	f7ff ff95 	bl	8001618 <DWT_Delay_us_>
  // init vl53l0x
  uint8_t init = vl53l0x_Init(0);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f001 f99e 	bl	8002a30 <vl53l0x_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  //sprintf((char *)div_tab, "init: %d\n\r", init);
  //HAL_UART_Transmit(&huart1, div_tab, 10, 50);
  sprintf((char*)lcd_text, "wynik init: %d", init);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	461a      	mov	r2, r3
 80016fc:	49a4      	ldr	r1, [pc, #656]	; (8001990 <main+0x328>)
 80016fe:	48a5      	ldr	r0, [pc, #660]	; (8001994 <main+0x32c>)
 8001700:	f006 fb52 	bl	8007da8 <siprintf>
  lcd_cls();
 8001704:	f7ff fdb2 	bl	800126c <lcd_cls>
  lcd_str(lcd_text);
 8001708:	48a2      	ldr	r0, [pc, #648]	; (8001994 <main+0x32c>)
 800170a:	f7ff fdde 	bl	80012ca <lcd_str>
  DWT_Delay_us_(1000000);
 800170e:	48a2      	ldr	r0, [pc, #648]	; (8001998 <main+0x330>)
 8001710:	f7ff ff82 	bl	8001618 <DWT_Delay_us_>
  // servo power on
  HAL_GPIO_WritePin(SERVO_POWER_GPIO_Port, SERVO_POWER_Pin, RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171a:	489c      	ldr	r0, [pc, #624]	; (800198c <main+0x324>)
 800171c:	f002 fafa 	bl	8003d14 <HAL_GPIO_WritePin>

  sprintf((char*)lcd_text, menu_text[START]);
 8001720:	4b9e      	ldr	r3, [pc, #632]	; (800199c <main+0x334>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	489b      	ldr	r0, [pc, #620]	; (8001994 <main+0x32c>)
 8001728:	f006 fb3e 	bl	8007da8 <siprintf>
  lcd_cls();
 800172c:	f7ff fd9e 	bl	800126c <lcd_cls>
  lcd_str(lcd_text);
 8001730:	4898      	ldr	r0, [pc, #608]	; (8001994 <main+0x32c>)
 8001732:	f7ff fdca 	bl	80012ca <lcd_str>

  // start first measure time
  timeIt_Start_us();
 8001736:	f000 fbb5 	bl	8001ea4 <timeIt_Start_us>

  while (1)
  {
	  measure_score = 0;
 800173a:	4b99      	ldr	r3, [pc, #612]	; (80019a0 <main+0x338>)
 800173c:	2200      	movs	r2, #0
 800173e:	801a      	strh	r2, [r3, #0]
	 for(uint8_t i = 0; i < REPEAT_MEASURE; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e00e      	b.n	8001764 <main+0xfc>
	  {
		 measure_score += vl53l0x_ReadRangeSingleMillimeters(0);
 8001746:	2000      	movs	r0, #0
 8001748:	f001 ff4c 	bl	80035e4 <vl53l0x_ReadRangeSingleMillimeters>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b93      	ldr	r3, [pc, #588]	; (80019a0 <main+0x338>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b91      	ldr	r3, [pc, #580]	; (80019a0 <main+0x338>)
 800175c:	801a      	strh	r2, [r3, #0]
	 for(uint8_t i = 0; i < REPEAT_MEASURE; i++)
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	3301      	adds	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d9ed      	bls.n	8001746 <main+0xde>
	  }

	  // mean
	  measure_score /= REPEAT_MEASURE;
 800176a:	4b8d      	ldr	r3, [pc, #564]	; (80019a0 <main+0x338>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b8a      	ldr	r3, [pc, #552]	; (80019a0 <main+0x338>)
 8001776:	801a      	strh	r2, [r3, #0]

	  err = target - measure_score;
 8001778:	4b8a      	ldr	r3, [pc, #552]	; (80019a4 <main+0x33c>)
 800177a:	ed93 7a00 	vldr	s14, [r3]
 800177e:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <main+0x338>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001790:	4b85      	ldr	r3, [pc, #532]	; (80019a8 <main+0x340>)
 8001792:	edc3 7a00 	vstr	s15, [r3]

	  // get time in second
	  measured_time_s = (timeIt_GetCounter_us()/1000000.0);
 8001796:	f000 fb9f 	bl	8001ed8 <timeIt_GetCounter_us>
 800179a:	4603      	mov	r3, r0
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe feb9 	bl	8000514 <__aeabi_ui2d>
 80017a2:	a373      	add	r3, pc, #460	; (adr r3, 8001970 <main+0x308>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f858 	bl	800085c <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fa00 	bl	8000bb8 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a7c      	ldr	r2, [pc, #496]	; (80019ac <main+0x344>)
 80017bc:	6013      	str	r3, [r2, #0]

	  // get pid value
	  PID = get_PID(err, measured_time_s, Kp, Ki, Kd);
 80017be:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <main+0x340>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	4b79      	ldr	r3, [pc, #484]	; (80019ac <main+0x344>)
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	4b79      	ldr	r3, [pc, #484]	; (80019b0 <main+0x348>)
 80017cc:	edd3 6a00 	vldr	s13, [r3]
 80017d0:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <main+0x34c>)
 80017d2:	ed93 6a00 	vldr	s12, [r3]
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <main+0x350>)
 80017d8:	edd3 5a00 	vldr	s11, [r3]
 80017dc:	eeb0 2a65 	vmov.f32	s4, s11
 80017e0:	eef0 1a46 	vmov.f32	s3, s12
 80017e4:	eeb0 1a66 	vmov.f32	s2, s13
 80017e8:	eef0 0a47 	vmov.f32	s1, s14
 80017ec:	eeb0 0a67 	vmov.f32	s0, s15
 80017f0:	f000 fc00 	bl	8001ff4 <get_PID>
 80017f4:	eef0 7a40 	vmov.f32	s15, s0
 80017f8:	4b70      	ldr	r3, [pc, #448]	; (80019bc <main+0x354>)
 80017fa:	edc3 7a00 	vstr	s15, [r3]
	  htim1.Instance->CCR1 = 140 + (PID/10);
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <main+0x354>)
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80019c0 <main+0x358>
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <main+0x314>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181c:	ee17 2a90 	vmov	r2, s15
 8001820:	635a      	str	r2, [r3, #52]	; 0x34
	  //DWT_Delay_us_(1000000);

	  timeIt_Start_us();
 8001822:	f000 fb3f 	bl	8001ea4 <timeIt_Start_us>
	  if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)){
 8001826:	2120      	movs	r1, #32
 8001828:	4858      	ldr	r0, [pc, #352]	; (800198c <main+0x324>)
 800182a:	f002 fa5b 	bl	8003ce4 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d11e      	bne.n	8001872 <main+0x20a>
		  static uint8_t button;
		  if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) && button){
 8001834:	2120      	movs	r1, #32
 8001836:	4855      	ldr	r0, [pc, #340]	; (800198c <main+0x324>)
 8001838:	f002 fa54 	bl	8003ce4 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d114      	bne.n	800186c <main+0x204>
 8001842:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <main+0x35c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d010      	beq.n	800186c <main+0x204>
			  encoder.button ^= 1;
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <main+0x360>)
 800184c:	799b      	ldrb	r3, [r3, #6]
 800184e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2d9      	uxtb	r1, r3
 800185a:	4a5b      	ldr	r2, [pc, #364]	; (80019c8 <main+0x360>)
 800185c:	7993      	ldrb	r3, [r2, #6]
 800185e:	f361 0300 	bfi	r3, r1, #0, #1
 8001862:	7193      	strb	r3, [r2, #6]
		  	  button = 0;
 8001864:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <main+0x35c>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e002      	b.n	8001872 <main+0x20a>
		  }else{
		  button = 1;
 800186c:	4b55      	ldr	r3, [pc, #340]	; (80019c4 <main+0x35c>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  encoder.score = htim3.Instance->CNT;
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <main+0x31c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <main+0x360>)
 800187c:	801a      	strh	r2, [r3, #0]

	  //simple menu
	  // if encoder has shifted
	  if(encoder.score != encoder.score_old){
 800187e:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <main+0x360>)
 8001880:	881a      	ldrh	r2, [r3, #0]
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <main+0x360>)
 8001884:	885b      	ldrh	r3, [r3, #2]
 8001886:	429a      	cmp	r2, r3
 8001888:	f000 81e2 	beq.w	8001c50 <main+0x5e8>
		  int32_t temp;
		  // if button is 1 then change positon of menu, else change value of selected positon
		  if(!encoder.button){
 800188c:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <main+0x360>)
 800188e:	799b      	ldrb	r3, [r3, #6]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <main+0x25e>
			  // if encoder was used to change valuse of selected positon, reset it to positon value
			  if(abs(encoder.score_stored - encoder.score) > 4)
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <main+0x360>)
 800189c:	889b      	ldrh	r3, [r3, #4]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <main+0x360>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bfb8      	it	lt
 80018aa:	425b      	neglt	r3, r3
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	dd05      	ble.n	80018bc <main+0x254>
				  htim3.Instance->CNT = encoder.score_stored;
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <main+0x360>)
 80018b2:	889a      	ldrh	r2, [r3, #4]
 80018b4:	4b33      	ldr	r3, [pc, #204]	; (8001984 <main+0x31c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
 80018ba:	e00b      	b.n	80018d4 <main+0x26c>
			  else
				  encoder.score_stored = encoder.score;
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <main+0x360>)
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <main+0x360>)
 80018c2:	809a      	strh	r2, [r3, #4]
 80018c4:	e006      	b.n	80018d4 <main+0x26c>
		  }
		  else{
			  temp =  encoder.score - encoder.score_old;
 80018c6:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <main+0x360>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <main+0x360>)
 80018ce:	885b      	ldrh	r3, [r3, #2]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	60bb      	str	r3, [r7, #8]
		  }

		  lcd_locate(0, 0);
 80018d4:	2100      	movs	r1, #0
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fcd6 	bl	8001288 <lcd_locate>
		  lcd_cls();
 80018dc:	f7ff fcc6 	bl	800126c <lcd_cls>
		  switch((encoder.score_stored/4)%MENU_SIZE){
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <main+0x360>)
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <main+0x364>)
 80018ea:	fba3 1302 	umull	r1, r3, r3, r2
 80018ee:	0899      	lsrs	r1, r3, #2
 80018f0:	460b      	mov	r3, r1
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	f200 81ab 	bhi.w	8001c56 <main+0x5ee>
 8001900:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <main+0x2a0>)
 8001902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001906:	bf00      	nop
 8001908:	0800191d 	.word	0x0800191d
 800190c:	080019e9 	.word	0x080019e9
 8001910:	08001a6b 	.word	0x08001a6b
 8001914:	08001b0d 	.word	0x08001b0d
 8001918:	08001baf 	.word	0x08001baf
		  case START:
			  sprintf((char*)lcd_text, menu_text[START]);
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <main+0x334>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	481c      	ldr	r0, [pc, #112]	; (8001994 <main+0x32c>)
 8001924:	f006 fa40 	bl	8007da8 <siprintf>
			  lcd_str(lcd_text);
 8001928:	481a      	ldr	r0, [pc, #104]	; (8001994 <main+0x32c>)
 800192a:	f7ff fcce 	bl	80012ca <lcd_str>
			  lcd_locate(1, 0);
 800192e:	2100      	movs	r1, #0
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fca9 	bl	8001288 <lcd_locate>
			  if(encoder.button){
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <main+0x360>)
 8001938:	799b      	ldrb	r3, [r3, #6]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00c      	beq.n	800195e <main+0x2f6>
				  if(abs(temp) >= 4)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	bfb8      	it	lt
 800194a:	425b      	neglt	r3, r3
 800194c:	2b03      	cmp	r3, #3
 800194e:	dd06      	ble.n	800195e <main+0x2f6>
					  pid_status ^= 1;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <main+0x368>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f083 0301 	eor.w	r3, r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <main+0x368>)
 800195c:	701a      	strb	r2, [r3, #0]
			  }
			  if(pid_status == 0)
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <main+0x368>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d138      	bne.n	80019d8 <main+0x370>
				  sprintf((char*)lcd_text, "OFF");
 8001966:	491b      	ldr	r1, [pc, #108]	; (80019d4 <main+0x36c>)
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <main+0x32c>)
 800196a:	f006 fa1d 	bl	8007da8 <siprintf>
 800196e:	e037      	b.n	80019e0 <main+0x378>
 8001970:	00000000 	.word	0x00000000
 8001974:	412e8480 	.word	0x412e8480
 8001978:	08001619 	.word	0x08001619
 800197c:	2000048c 	.word	0x2000048c
 8001980:	20000324 	.word	0x20000324
 8001984:	200003d8 	.word	0x200003d8
 8001988:	0800a234 	.word	0x0800a234
 800198c:	40020400 	.word	0x40020400
 8001990:	0800a244 	.word	0x0800a244
 8001994:	20000014 	.word	0x20000014
 8001998:	000f4240 	.word	0x000f4240
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000240 	.word	0x20000240
 80019a4:	20000034 	.word	0x20000034
 80019a8:	20000300 	.word	0x20000300
 80019ac:	2000024c 	.word	0x2000024c
 80019b0:	20000028 	.word	0x20000028
 80019b4:	2000002c 	.word	0x2000002c
 80019b8:	20000030 	.word	0x20000030
 80019bc:	20000244 	.word	0x20000244
 80019c0:	430c0000 	.word	0x430c0000
 80019c4:	20000250 	.word	0x20000250
 80019c8:	200002f8 	.word	0x200002f8
 80019cc:	cccccccd 	.word	0xcccccccd
 80019d0:	20000248 	.word	0x20000248
 80019d4:	0800a254 	.word	0x0800a254
			  else
				  sprintf((char*)lcd_text, "ON");
 80019d8:	49a3      	ldr	r1, [pc, #652]	; (8001c68 <main+0x600>)
 80019da:	48a4      	ldr	r0, [pc, #656]	; (8001c6c <main+0x604>)
 80019dc:	f006 f9e4 	bl	8007da8 <siprintf>
			  lcd_str(lcd_text);
 80019e0:	48a2      	ldr	r0, [pc, #648]	; (8001c6c <main+0x604>)
 80019e2:	f7ff fc72 	bl	80012ca <lcd_str>
			  break;
 80019e6:	e136      	b.n	8001c56 <main+0x5ee>
		  case TARGET:
			  sprintf((char*)lcd_text, menu_text[TARGET]);
 80019e8:	4ba1      	ldr	r3, [pc, #644]	; (8001c70 <main+0x608>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4619      	mov	r1, r3
 80019ee:	489f      	ldr	r0, [pc, #636]	; (8001c6c <main+0x604>)
 80019f0:	f006 f9da 	bl	8007da8 <siprintf>
			  lcd_str(lcd_text);
 80019f4:	489d      	ldr	r0, [pc, #628]	; (8001c6c <main+0x604>)
 80019f6:	f7ff fc68 	bl	80012ca <lcd_str>
			  lcd_locate(1, 0);
 80019fa:	2100      	movs	r1, #0
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fc43 	bl	8001288 <lcd_locate>
			  sprintf((char*)lcd_text, "%.0f", target);
 8001a02:	4b9c      	ldr	r3, [pc, #624]	; (8001c74 <main+0x60c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fda6 	bl	8000558 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4999      	ldr	r1, [pc, #612]	; (8001c78 <main+0x610>)
 8001a12:	4896      	ldr	r0, [pc, #600]	; (8001c6c <main+0x604>)
 8001a14:	f006 f9c8 	bl	8007da8 <siprintf>
			  lcd_str(lcd_text);
 8001a18:	4894      	ldr	r0, [pc, #592]	; (8001c6c <main+0x604>)
 8001a1a:	f7ff fc56 	bl	80012ca <lcd_str>
			  if(encoder.button){
 8001a1e:	4b97      	ldr	r3, [pc, #604]	; (8001c7c <main+0x614>)
 8001a20:	799b      	ldrb	r3, [r3, #6]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8113 	beq.w	8001c54 <main+0x5ec>
				  if(temp >= 4)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	dd0a      	ble.n	8001a4a <main+0x3e2>
					  target += 1.0;
 8001a34:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <main+0x60c>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a42:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <main+0x60c>)
 8001a44:	edc3 7a00 	vstr	s15, [r3]
				  else if(temp <= -4)
					  target -= 1.0;
			  }
			  break;
 8001a48:	e104      	b.n	8001c54 <main+0x5ec>
				  else if(temp <= -4)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f113 0f03 	cmn.w	r3, #3
 8001a50:	f280 8100 	bge.w	8001c54 <main+0x5ec>
					  target -= 1.0;
 8001a54:	4b87      	ldr	r3, [pc, #540]	; (8001c74 <main+0x60c>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a62:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <main+0x60c>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8001a68:	e0f4      	b.n	8001c54 <main+0x5ec>
		  case KP:
			  sprintf((char*)lcd_text, menu_text[KP]);
 8001a6a:	4b81      	ldr	r3, [pc, #516]	; (8001c70 <main+0x608>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	487e      	ldr	r0, [pc, #504]	; (8001c6c <main+0x604>)
 8001a72:	f006 f999 	bl	8007da8 <siprintf>
			  lcd_str(lcd_text);
 8001a76:	487d      	ldr	r0, [pc, #500]	; (8001c6c <main+0x604>)
 8001a78:	f7ff fc27 	bl	80012ca <lcd_str>
			  lcd_locate(1, 0);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff fc02 	bl	8001288 <lcd_locate>
			  sprintf((char*)lcd_text, "%.1f", Kp);
 8001a84:	4b7e      	ldr	r3, [pc, #504]	; (8001c80 <main+0x618>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd65 	bl	8000558 <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	497c      	ldr	r1, [pc, #496]	; (8001c84 <main+0x61c>)
 8001a94:	4875      	ldr	r0, [pc, #468]	; (8001c6c <main+0x604>)
 8001a96:	f006 f987 	bl	8007da8 <siprintf>
			  if(encoder.button){
 8001a9a:	4b78      	ldr	r3, [pc, #480]	; (8001c7c <main+0x614>)
 8001a9c:	799b      	ldrb	r3, [r3, #6]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02d      	beq.n	8001b04 <main+0x49c>
				  if(temp >= 4)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	dd13      	ble.n	8001ad6 <main+0x46e>
					  Kp += 0.1;
 8001aae:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <main+0x618>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd50 	bl	8000558 <__aeabi_f2d>
 8001ab8:	a369      	add	r3, pc, #420	; (adr r3, 8001c60 <main+0x5f8>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fbed 	bl	800029c <__adddf3>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f875 	bl	8000bb8 <__aeabi_d2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a6b      	ldr	r2, [pc, #428]	; (8001c80 <main+0x618>)
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e016      	b.n	8001b04 <main+0x49c>
				  else if(temp <= -4)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f113 0f03 	cmn.w	r3, #3
 8001adc:	da12      	bge.n	8001b04 <main+0x49c>
					  Kp -= 0.1;
 8001ade:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <main+0x618>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_f2d>
 8001ae8:	a35d      	add	r3, pc, #372	; (adr r3, 8001c60 <main+0x5f8>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fbd3 	bl	8000298 <__aeabi_dsub>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff f85d 	bl	8000bb8 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a5f      	ldr	r2, [pc, #380]	; (8001c80 <main+0x618>)
 8001b02:	6013      	str	r3, [r2, #0]
			  }
			  lcd_str(lcd_text);
 8001b04:	4859      	ldr	r0, [pc, #356]	; (8001c6c <main+0x604>)
 8001b06:	f7ff fbe0 	bl	80012ca <lcd_str>
			  break;
 8001b0a:	e0a4      	b.n	8001c56 <main+0x5ee>
		  case KI:
			  sprintf((char*)lcd_text, menu_text[KI]);
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <main+0x608>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4856      	ldr	r0, [pc, #344]	; (8001c6c <main+0x604>)
 8001b14:	f006 f948 	bl	8007da8 <siprintf>
			  lcd_str(lcd_text);
 8001b18:	4854      	ldr	r0, [pc, #336]	; (8001c6c <main+0x604>)
 8001b1a:	f7ff fbd6 	bl	80012ca <lcd_str>
			  lcd_locate(1, 0);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff fbb1 	bl	8001288 <lcd_locate>
			  sprintf((char*)lcd_text, "%.1f", Ki);
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <main+0x620>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4953      	ldr	r1, [pc, #332]	; (8001c84 <main+0x61c>)
 8001b36:	484d      	ldr	r0, [pc, #308]	; (8001c6c <main+0x604>)
 8001b38:	f006 f936 	bl	8007da8 <siprintf>
			  if(encoder.button){
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <main+0x614>)
 8001b3e:	799b      	ldrb	r3, [r3, #6]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d02d      	beq.n	8001ba6 <main+0x53e>
				  if(temp >= 4)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	dd13      	ble.n	8001b78 <main+0x510>
					  Ki += 0.1;
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <main+0x620>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fcff 	bl	8000558 <__aeabi_f2d>
 8001b5a:	a341      	add	r3, pc, #260	; (adr r3, 8001c60 <main+0x5f8>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb9c 	bl	800029c <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f824 	bl	8000bb8 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <main+0x620>)
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e016      	b.n	8001ba6 <main+0x53e>
				  else if(temp <= -4)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f113 0f03 	cmn.w	r3, #3
 8001b7e:	da12      	bge.n	8001ba6 <main+0x53e>
					  Ki -= 0.1;
 8001b80:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <main+0x620>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fce7 	bl	8000558 <__aeabi_f2d>
 8001b8a:	a335      	add	r3, pc, #212	; (adr r3, 8001c60 <main+0x5f8>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fb82 	bl	8000298 <__aeabi_dsub>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7ff f80c 	bl	8000bb8 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a39      	ldr	r2, [pc, #228]	; (8001c88 <main+0x620>)
 8001ba4:	6013      	str	r3, [r2, #0]
			  }
			  lcd_str(lcd_text);
 8001ba6:	4831      	ldr	r0, [pc, #196]	; (8001c6c <main+0x604>)
 8001ba8:	f7ff fb8f 	bl	80012ca <lcd_str>
			  break;
 8001bac:	e053      	b.n	8001c56 <main+0x5ee>
		  case KD:
			  sprintf((char*)lcd_text, menu_text[KD]);
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <main+0x608>)
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	482d      	ldr	r0, [pc, #180]	; (8001c6c <main+0x604>)
 8001bb6:	f006 f8f7 	bl	8007da8 <siprintf>
			  lcd_str(lcd_text);
 8001bba:	482c      	ldr	r0, [pc, #176]	; (8001c6c <main+0x604>)
 8001bbc:	f7ff fb85 	bl	80012ca <lcd_str>
			  lcd_locate(1, 0);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7ff fb60 	bl	8001288 <lcd_locate>
			  sprintf((char*)lcd_text, "%.1f", Kd);
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <main+0x624>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fcc3 	bl	8000558 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	492b      	ldr	r1, [pc, #172]	; (8001c84 <main+0x61c>)
 8001bd8:	4824      	ldr	r0, [pc, #144]	; (8001c6c <main+0x604>)
 8001bda:	f006 f8e5 	bl	8007da8 <siprintf>
			  if(encoder.button){
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <main+0x614>)
 8001be0:	799b      	ldrb	r3, [r3, #6]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d02d      	beq.n	8001c48 <main+0x5e0>
				  if(temp >= 4)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	dd13      	ble.n	8001c1a <main+0x5b2>
					  Kd += 0.1;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <main+0x624>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fcae 	bl	8000558 <__aeabi_f2d>
 8001bfc:	a318      	add	r3, pc, #96	; (adr r3, 8001c60 <main+0x5f8>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fb4b 	bl	800029c <__adddf3>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffd3 	bl	8000bb8 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <main+0x624>)
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e016      	b.n	8001c48 <main+0x5e0>
				  else if(temp <= -4)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f113 0f03 	cmn.w	r3, #3
 8001c20:	da12      	bge.n	8001c48 <main+0x5e0>
					  Kd -= 0.1;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <main+0x624>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc96 	bl	8000558 <__aeabi_f2d>
 8001c2c:	a30c      	add	r3, pc, #48	; (adr r3, 8001c60 <main+0x5f8>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fb31 	bl	8000298 <__aeabi_dsub>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe ffbb 	bl	8000bb8 <__aeabi_d2f>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <main+0x624>)
 8001c46:	6013      	str	r3, [r2, #0]
			  }
			  lcd_str(lcd_text);
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <main+0x604>)
 8001c4a:	f7ff fb3e 	bl	80012ca <lcd_str>
			  break;
 8001c4e:	e002      	b.n	8001c56 <main+0x5ee>
		  }

	  }
 8001c50:	bf00      	nop
 8001c52:	e000      	b.n	8001c56 <main+0x5ee>
			  break;
 8001c54:	bf00      	nop
	  encoder.score_old = encoder.score;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <main+0x614>)
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <main+0x614>)
 8001c5c:	805a      	strh	r2, [r3, #2]
	  measure_score = 0;
 8001c5e:	e56c      	b.n	800173a <main+0xd2>
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fb99999 	.word	0x3fb99999
 8001c68:	0800a258 	.word	0x0800a258
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000034 	.word	0x20000034
 8001c78:	0800a25c 	.word	0x0800a25c
 8001c7c:	200002f8 	.word	0x200002f8
 8001c80:	20000028 	.word	0x20000028
 8001c84:	0800a264 	.word	0x0800a264
 8001c88:	2000002c 	.word	0x2000002c
 8001c8c:	20000030 	.word	0x20000030

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09a      	sub	sp, #104	; 0x68
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c9a:	2230      	movs	r2, #48	; 0x30
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f005 fc10 	bl	80074c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
 8001cc4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <SystemClock_Config+0xfc>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <SystemClock_Config+0xfc>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <SystemClock_Config+0xfc>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <SystemClock_Config+0x100>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <SystemClock_Config+0x100>)
 8001cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <SystemClock_Config+0x100>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001d16:	230c      	movs	r3, #12
 8001d18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d1a:	2360      	movs	r3, #96	; 0x60
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d22:	2304      	movs	r3, #4
 8001d24:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 f870 	bl	8004e10 <HAL_RCC_OscConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001d36:	f000 f843 	bl	8001dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2103      	movs	r1, #3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fad2 	bl	8005300 <HAL_RCC_ClockConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001d62:	f000 f82d 	bl	8001dc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d66:	2302      	movs	r3, #2
 8001d68:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fc93 	bl	80056a0 <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001d80:	f000 f81e 	bl	8001dc0 <Error_Handler>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3768      	adds	r7, #104	; 0x68
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2019      	movs	r0, #25
 8001d9e:	f001 fde6 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001da2:	2019      	movs	r0, #25
 8001da4:	f001 fdff 	bl	80039a6 <HAL_NVIC_EnableIRQ>
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	appendTimeCounter();
 8001db4:	f000 f80a 	bl	8001dcc <appendTimeCounter>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
}
 8001dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <Error_Handler+0x8>
	...

08001dcc <appendTimeCounter>:
static volatile uint32_t tim1;
static volatile TimeMesureStatus Status;



void appendTimeCounter(void){
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

	if(Status.t1) tim1++;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <appendTimeCounter+0x28>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <appendTimeCounter+0x1c>
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <appendTimeCounter+0x2c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <appendTimeCounter+0x2c>)
 8001de6:	6013      	str	r3, [r2, #0]

		//HAL_GPIO_TogglePin(vl53l0x_POWER_GPIO_Port, vl53l0x_POWER_Pin);
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000258 	.word	0x20000258
 8001df8:	20000254 	.word	0x20000254

08001dfc <startMesure_ms>:
void startMesure_ms(uint8_t nr_tim){
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	switch(nr_tim){
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <startMesure_ms+0x16>
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d009      	beq.n	8001e24 <startMesure_ms+0x28>
		break;
	case 2:
		Status.t2 = 1;
		break;
	}
}
 8001e10:	e00e      	b.n	8001e30 <startMesure_ms+0x34>
		tim1 = 0;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <startMesure_ms+0x40>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
		Status.t1 = 1;
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <startMesure_ms+0x44>)
 8001e1a:	7813      	ldrb	r3, [r2, #0]
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	7013      	strb	r3, [r2, #0]
		break;
 8001e22:	e005      	b.n	8001e30 <startMesure_ms+0x34>
		Status.t2 = 1;
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <startMesure_ms+0x44>)
 8001e26:	7813      	ldrb	r3, [r2, #0]
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	7013      	strb	r3, [r2, #0]
		break;
 8001e2e:	bf00      	nop
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20000254 	.word	0x20000254
 8001e40:	20000258 	.word	0x20000258

08001e44 <getMesure_ms>:
uint32_t getMesure_ms(uint8_t nr_tim){
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	switch(nr_tim){
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <getMesure_ms+0x16>
	case vl53l0x_tim:
		return tim1;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <getMesure_ms+0x24>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e000      	b.n	8001e5c <getMesure_ms+0x18>
	}
	return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	20000254 	.word	0x20000254

08001e6c <stopMesure_ms>:
uint32_t stopMesure_ms(uint8_t nr_tim){
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	switch(nr_tim){
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <stopMesure_ms+0x20>
	case vl53l0x_tim:
		{
		Status.t1 = 0;
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <stopMesure_ms+0x30>)
 8001e7e:	7813      	ldrb	r3, [r2, #0]
 8001e80:	f36f 0300 	bfc	r3, #0, #1
 8001e84:	7013      	strb	r3, [r2, #0]
		return tim1;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <stopMesure_ms+0x34>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e000      	b.n	8001e8e <stopMesure_ms+0x22>
		}
	}
	return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000258 	.word	0x20000258
 8001ea0:	20000254 	.word	0x20000254

08001ea4 <timeIt_Start_us>:

void timeIt_Start_us(void){
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
	// reset counter value
	htim2.Instance->CNT = 0;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <timeIt_Start_us+0x30>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
	//set state
	htim2.State = HAL_TIM_STATE_BUSY;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <timeIt_Start_us+0x30>)
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	//start count
	__HAL_TIM_ENABLE(&htim2);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <timeIt_Start_us+0x30>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <timeIt_Start_us+0x30>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000540 	.word	0x20000540

08001ed8 <timeIt_GetCounter_us>:

uint32_t timeIt_GetCounter_us(void){
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	// stop count
	__HAL_TIM_DISABLE(&htim2);
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <timeIt_GetCounter_us+0x4c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <timeIt_GetCounter_us+0x34>
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <timeIt_GetCounter_us+0x4c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	f240 4344 	movw	r3, #1092	; 0x444
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <timeIt_GetCounter_us+0x34>
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <timeIt_GetCounter_us+0x4c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <timeIt_GetCounter_us+0x4c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
	// set status
	htim2.State = HAL_TIM_STATE_READY;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <timeIt_GetCounter_us+0x4c>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	//return counter value
	return htim2.Instance->CNT;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <timeIt_GetCounter_us+0x4c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	20000540 	.word	0x20000540

08001f28 <proportional>:
 *      Author: fet
 */

#include "my_PID.h"

float proportional(float err, float K){
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f32:	edc7 0a00 	vstr	s1, [r7]
	return (K*err);
 8001f36:	ed97 7a00 	vldr	s14, [r7]
 8001f3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001f42:	eeb0 0a67 	vmov.f32	s0, s15
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <integral>:

float integral(float err, float time_s, float K){
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f5a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f5e:	ed87 1a01 	vstr	s2, [r7, #4]
	static float sum;
	sum += (err * time_s);
 8001f62:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <integral+0x4c>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <integral+0x4c>)
 8001f7a:	edc3 7a00 	vstr	s15, [r3]
	return K*sum;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <integral+0x4c>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15

}
 8001f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	2000025c 	.word	0x2000025c

08001fa0 <derivative>:
float derivative(float err, float time_s, float K){
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001faa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fae:	ed87 1a01 	vstr	s2, [r7, #4]
	static float prev_err;
	float temp = K*((err - prev_err)/time_s);
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <derivative+0x50>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fbc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd0:	edc7 7a05 	vstr	s15, [r7, #20]
	prev_err = err;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <derivative+0x50>)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6013      	str	r3, [r2, #0]
	return temp;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	ee07 3a90 	vmov	s15, r3
}
 8001fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000260 	.word	0x20000260

08001ff4 <get_PID>:

float get_PID(float err, float time_s, float Kp , float Ki, float Kd){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	ed2d 8b02 	vpush	{d8}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	ed87 0a05 	vstr	s0, [r7, #20]
 8002002:	edc7 0a04 	vstr	s1, [r7, #16]
 8002006:	ed87 1a03 	vstr	s2, [r7, #12]
 800200a:	edc7 1a02 	vstr	s3, [r7, #8]
 800200e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (proportional(err, Kp) + integral(err, time_s, Ki) + derivative(err, time_s, Kd));
 8002012:	edd7 0a03 	vldr	s1, [r7, #12]
 8002016:	ed97 0a05 	vldr	s0, [r7, #20]
 800201a:	f7ff ff85 	bl	8001f28 <proportional>
 800201e:	eeb0 8a40 	vmov.f32	s16, s0
 8002022:	ed97 1a02 	vldr	s2, [r7, #8]
 8002026:	edd7 0a04 	vldr	s1, [r7, #16]
 800202a:	ed97 0a05 	vldr	s0, [r7, #20]
 800202e:	f7ff ff8f 	bl	8001f50 <integral>
 8002032:	eef0 7a40 	vmov.f32	s15, s0
 8002036:	ee38 8a27 	vadd.f32	s16, s16, s15
 800203a:	ed97 1a01 	vldr	s2, [r7, #4]
 800203e:	edd7 0a04 	vldr	s1, [r7, #16]
 8002042:	ed97 0a05 	vldr	s0, [r7, #20]
 8002046:	f7ff ffab 	bl	8001fa0 <derivative>
 800204a:	eef0 7a40 	vmov.f32	s15, s0
 800204e:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 8002052:	eeb0 0a67 	vmov.f32	s0, s15
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	ecbd 8b02 	vpop	{d8}
 800205e:	bd80      	pop	{r7, pc}

08002060 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_RTC_Init+0x44>)
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <MX_RTC_Init+0x48>)
 8002068:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_RTC_Init+0x44>)
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_RTC_Init+0x44>)
 8002072:	227f      	movs	r2, #127	; 0x7f
 8002074:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_RTC_Init+0x44>)
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_RTC_Init+0x44>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_RTC_Init+0x44>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_RTC_Init+0x44>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_RTC_Init+0x44>)
 8002090:	f003 fbf6 	bl	8005880 <HAL_RTC_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800209a:	f7ff fe91 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000304 	.word	0x20000304
 80020a8:	40002800 	.word	0x40002800

080020ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_RTC_MspInit+0x24>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d102      	bne.n	80020c4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RTC_MspInit+0x28>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40002800 	.word	0x40002800
 80020d4:	42470e3c 	.word	0x42470e3c

080020d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_MspInit+0x4c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_MspInit+0x4c>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002116:	2006      	movs	r0, #6
 8002118:	f001 fc1e 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800212c:	e7fe      	b.n	800212c <NMI_Handler+0x4>

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler+0x4>

0800213a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler+0x4>

08002146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f001 fb00 	bl	8003778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002182:	f003 ffb9 	bl	80060f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002186:	4803      	ldr	r0, [pc, #12]	; (8002194 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002188:	f003 ffb6 	bl	80060f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000048c 	.word	0x2000048c
 8002194:	20000324 	.word	0x20000324

08002198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021b2:	f005 f95d 	bl	8007470 <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
	return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021da:	e7fe      	b.n	80021da <_exit+0x12>

080021dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00a      	b.n	8002204 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ee:	f3af 8000 	nop.w
 80021f2:	4601      	mov	r1, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60ba      	str	r2, [r7, #8]
 80021fa:	b2ca      	uxtb	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf0      	blt.n	80021ee <_read+0x12>
	}

return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e009      	b.n	800223c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf1      	blt.n	8002228 <_write+0x12>
	}
	return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_close>:

int _close(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002276:	605a      	str	r2, [r3, #4]
	return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_isatty>:

int _isatty(int file)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
	return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f005 f8c2 	bl	8007470 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20020000 	.word	0x20020000
 8002318:	00000400 	.word	0x00000400
 800231c:	20000264 	.word	0x20000264
 8002320:	20000688 	.word	0x20000688

08002324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <SystemInit+0x20>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <SystemInit+0x20>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b096      	sub	sp, #88	; 0x58
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2220      	movs	r2, #32
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f005 f89f 	bl	80074c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <MX_TIM1_Init+0x13c>)
 8002388:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <MX_TIM1_Init+0x140>)
 800238a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800238c:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <MX_TIM1_Init+0x13c>)
 800238e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <MX_TIM1_Init+0x13c>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <MX_TIM1_Init+0x13c>)
 800239c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80023a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <MX_TIM1_Init+0x13c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <MX_TIM1_Init+0x13c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <MX_TIM1_Init+0x13c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b4:	4833      	ldr	r0, [pc, #204]	; (8002484 <MX_TIM1_Init+0x13c>)
 80023b6:	f003 fb49 	bl	8005a4c <HAL_TIM_Base_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80023c0:	f7ff fcfe 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ce:	4619      	mov	r1, r3
 80023d0:	482c      	ldr	r0, [pc, #176]	; (8002484 <MX_TIM1_Init+0x13c>)
 80023d2:	f004 f877 	bl	80064c4 <HAL_TIM_ConfigClockSource>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80023dc:	f7ff fcf0 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023e0:	4828      	ldr	r0, [pc, #160]	; (8002484 <MX_TIM1_Init+0x13c>)
 80023e2:	f003 fbf1 	bl	8005bc8 <HAL_TIM_PWM_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80023ec:	f7ff fce8 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023fc:	4619      	mov	r1, r3
 80023fe:	4821      	ldr	r0, [pc, #132]	; (8002484 <MX_TIM1_Init+0x13c>)
 8002400:	f004 fca2 	bl	8006d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800240a:	f7ff fcd9 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240e:	2360      	movs	r3, #96	; 0x60
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 99;
 8002412:	2363      	movs	r3, #99	; 0x63
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800241a:	2300      	movs	r3, #0
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800242a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242e:	2200      	movs	r2, #0
 8002430:	4619      	mov	r1, r3
 8002432:	4814      	ldr	r0, [pc, #80]	; (8002484 <MX_TIM1_Init+0x13c>)
 8002434:	f003 ff88 	bl	8006348 <HAL_TIM_PWM_ConfigChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800243e:	f7ff fcbf 	bl	8001dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	4619      	mov	r1, r3
 8002464:	4807      	ldr	r0, [pc, #28]	; (8002484 <MX_TIM1_Init+0x13c>)
 8002466:	f004 fcdd 	bl	8006e24 <HAL_TIMEx_ConfigBreakDeadTime>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002470:	f7ff fca6 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <MX_TIM1_Init+0x13c>)
 8002476:	f000 f961 	bl	800273c <HAL_TIM_MspPostInit>

}
 800247a:	bf00      	nop
 800247c:	3758      	adds	r7, #88	; 0x58
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000048c 	.word	0x2000048c
 8002488:	40010000 	.word	0x40010000

0800248c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <MX_TIM2_Init+0x94>)
 80024aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <MX_TIM2_Init+0x94>)
 80024b2:	2263      	movs	r2, #99	; 0x63
 80024b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_TIM2_Init+0x94>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <MX_TIM2_Init+0x94>)
 80024be:	f04f 32ff 	mov.w	r2, #4294967295
 80024c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_TIM2_Init+0x94>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <MX_TIM2_Init+0x94>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024d0:	4813      	ldr	r0, [pc, #76]	; (8002520 <MX_TIM2_Init+0x94>)
 80024d2:	f003 fabb 	bl	8005a4c <HAL_TIM_Base_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024dc:	f7ff fc70 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <MX_TIM2_Init+0x94>)
 80024ee:	f003 ffe9 	bl	80064c4 <HAL_TIM_ConfigClockSource>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024f8:	f7ff fc62 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_TIM2_Init+0x94>)
 800250a:	f004 fc1d 	bl	8006d48 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002514:	f7ff fc54 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000540 	.word	0x20000540

08002524 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f004 ffc6 	bl	80074c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <MX_TIM3_Init+0xa0>)
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <MX_TIM3_Init+0xa4>)
 8002544:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002546:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <MX_TIM3_Init+0xa0>)
 8002548:	2200      	movs	r2, #0
 800254a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <MX_TIM3_Init+0xa0>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <MX_TIM3_Init+0xa0>)
 8002554:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002558:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_TIM3_Init+0xa0>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_TIM3_Init+0xa0>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002566:	2303      	movs	r3, #3
 8002568:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002576:	230f      	movs	r3, #15
 8002578:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800257e:	2301      	movs	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002582:	2300      	movs	r3, #0
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002586:	230f      	movs	r3, #15
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	4619      	mov	r1, r3
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <MX_TIM3_Init+0xa0>)
 8002592:	f003 fcfd 	bl	8005f90 <HAL_TIM_Encoder_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800259c:	f7ff fc10 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_TIM3_Init+0xa0>)
 80025ae:	f004 fbcb 	bl	8006d48 <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80025b8:	f7ff fc02 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	3730      	adds	r7, #48	; 0x30
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200003d8 	.word	0x200003d8
 80025c8:	40000400 	.word	0x40000400

080025cc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_TIM10_Init+0x40>)
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <MX_TIM10_Init+0x44>)
 80025d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <MX_TIM10_Init+0x40>)
 80025d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025dc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <MX_TIM10_Init+0x40>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_TIM10_Init+0x40>)
 80025e6:	2263      	movs	r2, #99	; 0x63
 80025e8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_TIM10_Init+0x40>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_TIM10_Init+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <MX_TIM10_Init+0x40>)
 80025f8:	f003 fa28 	bl	8005a4c <HAL_TIM_Base_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002602:	f7ff fbdd 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000324 	.word	0x20000324
 8002610:	40014400 	.word	0x40014400

08002614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <HAL_TIM_Base_MspInit+0x8c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10e      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002642:	e026      	b.n	8002692 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264c:	d10e      	bne.n	800266c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
}
 800266a:	e012      	b.n	8002692 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM10)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <HAL_TIM_Base_MspInit+0x94>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10d      	bne.n	8002692 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_TIM_Base_MspInit+0x90>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40010000 	.word	0x40010000
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40014400 	.word	0x40014400

080026ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d12b      	bne.n	8002726 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002706:	23c0      	movs	r3, #192	; 0xc0
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002716:	2302      	movs	r3, #2
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	; (8002738 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002722:	f001 f95b 	bl	80039dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40000400 	.word	0x40000400
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_TIM_MspPostInit+0x68>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d11e      	bne.n	800279c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_TIM_MspPostInit+0x6c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <HAL_TIM_MspPostInit+0x6c>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_TIM_MspPostInit+0x6c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800277a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800278c:	2301      	movs	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	4619      	mov	r1, r3
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_TIM_MspPostInit+0x70>)
 8002798:	f001 f920 	bl	80039dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000

080027b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_USART1_UART_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e8:	f004 fb8c 	bl	8006f04 <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027f2:	f7ff fae5 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200005f4 	.word	0x200005f4
 8002800:	40011000 	.word	0x40011000

08002804 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_UART_MspInit+0x84>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12c      	bne.n	8002880 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_UART_MspInit+0x88>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_UART_MspInit+0x88>)
 8002830:	f043 0310 	orr.w	r3, r3, #16
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_UART_MspInit+0x88>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_UART_MspInit+0x88>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_UART_MspInit+0x88>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_UART_MspInit+0x88>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800285e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002870:	2307      	movs	r3, #7
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4805      	ldr	r0, [pc, #20]	; (8002890 <HAL_UART_MspInit+0x8c>)
 800287c:	f001 f8ae 	bl	80039dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40011000 	.word	0x40011000
 800288c:	40023800 	.word	0x40023800
 8002890:	40020000 	.word	0x40020000

08002894 <startTimeout>:
I2C_HandleTypeDef *i2c_1 = &hi2c1;;
//todo: remove hit2c from func , create file to register sending func
HAL_StatusTypeDef (*VL53L0X_REG_I2C_Mem_Write)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout) = HAL_I2C_Mem_Write;
HAL_StatusTypeDef (*VL53L0X_REG_I2C_Mem_Read)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout) = HAL_I2C_Mem_Read;

void startTimeout(void){ startMesure_ms(vl53l0x_tim);} ;
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff faaf 	bl	8001dfc <startMesure_ms>
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <getTimeout>:
uint32_t getTimeout(void){ return getMesure_ms(vl53l0x_tim); };
 80028a2:	b580      	push	{r7, lr}
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7ff facc 	bl	8001e44 <getMesure_ms>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4618      	mov	r0, r3
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <stopTimeout>:
uint32_t stopTimeout(void){ return stopMesure_ms(vl53l0x_tim); };
 80028b2:	b580      	push	{r7, lr}
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fad8 	bl	8001e6c <stopMesure_ms>
 80028bc:	4603      	mov	r3, r0
 80028be:	4618      	mov	r0, r3
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <vl53l0x_I2C_Write_Reg8>:
static uint16_t encodeTimeout(uint16_t timeout_mclks);
bool setMeasurementTimingBudget(uint32_t budget_us);
/*--------------------------*/


void vl53l0x_I2C_Write_Reg8(uint8_t addr, uint8_t value){
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	4603      	mov	r3, r0
 80028cc:	460a      	mov	r2, r1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_REG_I2C_Mem_Write(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, &value,1 , I2C_TIMEOUT);
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <vl53l0x_I2C_Write_Reg8+0x38>)
 80028d6:	681c      	ldr	r4, [r3, #0]
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <vl53l0x_I2C_Write_Reg8+0x3c>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	2332      	movs	r3, #50	; 0x32
 80028e2:	9302      	str	r3, [sp, #8]
 80028e4:	2301      	movs	r3, #1
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	1dbb      	adds	r3, r7, #6
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2301      	movs	r3, #1
 80028ee:	2152      	movs	r1, #82	; 0x52
 80028f0:	47a0      	blx	r4

}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd90      	pop	{r4, r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000044 	.word	0x20000044
 8002900:	20000040 	.word	0x20000040

08002904 <vl53l0x_I2C_Write_Reg16>:
void vl53l0x_I2C_Write_Reg16(uint8_t addr, uint16_t value){
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af04      	add	r7, sp, #16
 800290a:	4603      	mov	r3, r0
 800290c:	460a      	mov	r2, r1
 800290e:	71fb      	strb	r3, [r7, #7]
 8002910:	4613      	mov	r3, r2
 8002912:	80bb      	strh	r3, [r7, #4]
	uint8_t temp[2];
	temp[0] =(value>>8) & 0xff; //hi byte
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	b29b      	uxth	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	733b      	strb	r3, [r7, #12]
	temp[1] = value & 0xff;		// lo byte
 800291e:	88bb      	ldrh	r3, [r7, #4]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	737b      	strb	r3, [r7, #13]
	VL53L0X_REG_I2C_Mem_Write(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, temp,2 , I2C_TIMEOUT);
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <vl53l0x_I2C_Write_Reg16+0x48>)
 8002926:	681c      	ldr	r4, [r3, #0]
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <vl53l0x_I2C_Write_Reg16+0x4c>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	b29a      	uxth	r2, r3
 8002930:	2332      	movs	r3, #50	; 0x32
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2302      	movs	r3, #2
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2301      	movs	r3, #1
 8002940:	2152      	movs	r1, #82	; 0x52
 8002942:	47a0      	blx	r4

}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	20000044 	.word	0x20000044
 8002950:	20000040 	.word	0x20000040

08002954 <vl53l0x_I2C_Read_Reg8>:
void vl53l0x_I2C_Write_MultiReg(uint8_t addr, uint8_t *pData, uint8_t count){

	VL53L0X_REG_I2C_Mem_Write(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, pData, count, I2C_TIMEOUT);
}

uint8_t vl53l0x_I2C_Read_Reg8(uint8_t addr){
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af04      	add	r7, sp, #16
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, &value  ,1 , I2C_TIMEOUT);
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <vl53l0x_I2C_Read_Reg8+0x34>)
 8002960:	681c      	ldr	r4, [r3, #0]
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <vl53l0x_I2C_Read_Reg8+0x38>)
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	b29a      	uxth	r2, r3
 800296a:	2332      	movs	r3, #50	; 0x32
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	2301      	movs	r3, #1
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	f107 030f 	add.w	r3, r7, #15
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2301      	movs	r3, #1
 800297a:	2152      	movs	r1, #82	; 0x52
 800297c:	47a0      	blx	r4
	return value;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	20000048 	.word	0x20000048
 800298c:	20000040 	.word	0x20000040

08002990 <vl53l0x_I2C_Read_Reg16>:
	uint8_t value;
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, &value  ,1 , timeOut);
	return value;
}

uint16_t vl53l0x_I2C_Read_Reg16(uint8_t addr){
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af04      	add	r7, sp, #16
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	81fb      	strh	r3, [r7, #14]
	uint8_t temp[2] = {0};
 800299e:	2300      	movs	r3, #0
 80029a0:	81bb      	strh	r3, [r7, #12]
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, temp  ,2 , I2C_TIMEOUT);
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <vl53l0x_I2C_Read_Reg16+0x58>)
 80029a4:	681c      	ldr	r4, [r3, #0]
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <vl53l0x_I2C_Read_Reg16+0x5c>)
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	2332      	movs	r3, #50	; 0x32
 80029b0:	9302      	str	r3, [sp, #8]
 80029b2:	2302      	movs	r3, #2
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2301      	movs	r3, #1
 80029be:	2152      	movs	r1, #82	; 0x52
 80029c0:	47a0      	blx	r4
	value |= (temp[0]<<8);
 80029c2:	7b3b      	ldrb	r3, [r7, #12]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	b21a      	sxth	r2, r3
 80029c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	81fb      	strh	r3, [r7, #14]
	value |= temp[1];
 80029d2:	7b7b      	ldrb	r3, [r7, #13]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	4313      	orrs	r3, r2
 80029da:	81fb      	strh	r3, [r7, #14]
	return value;
 80029dc:	89fb      	ldrh	r3, [r7, #14]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000048 	.word	0x20000048
 80029ec:	20000040 	.word	0x20000040

080029f0 <vl53l0x_I2C_Read_MultiReg>:
	value |= (temp[2]<<8);
	value |= temp[3];
	return value;
}
/* reading multiple data*/
void vl53l0x_I2C_Read_MultiReg(uint8_t addr, uint8_t *pData, uint8_t count){
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
 80029fc:	4613      	mov	r3, r2
 80029fe:	71bb      	strb	r3, [r7, #6]
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, pData ,count , I2C_TIMEOUT);
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <vl53l0x_I2C_Read_MultiReg+0x38>)
 8002a02:	681c      	ldr	r4, [r3, #0]
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <vl53l0x_I2C_Read_MultiReg+0x3c>)
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	79bb      	ldrb	r3, [r7, #6]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2132      	movs	r1, #50	; 0x32
 8002a12:	9102      	str	r1, [sp, #8]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	2152      	movs	r1, #82	; 0x52
 8002a1e:	47a0      	blx	r4

}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd90      	pop	{r4, r7, pc}
 8002a28:	20000048 	.word	0x20000048
 8002a2c:	20000040 	.word	0x20000040

08002a30 <vl53l0x_Init>:

uint8_t init_stop_var;		// read in intin used when starting measurment
/*public methods*/
bool vl53l0x_Init(bool io_2v8){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]


	if(io_2v8){
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <vl53l0x_Init+0x26>
		vl53l0x_I2C_Write_Reg8(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
				vl53l0x_I2C_Read_Reg8(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01);
 8002a40:	2089      	movs	r0, #137	; 0x89
 8002a42:	f7ff ff87 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8002a46:	4603      	mov	r3, r0
		vl53l0x_I2C_Write_Reg8(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4619      	mov	r1, r3
 8002a50:	2089      	movs	r0, #137	; 0x89
 8002a52:	f7ff ff37 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	}
	// set i2c standart mode
	vl53l0x_I2C_Write_Reg8(0x88, 0x00);
 8002a56:	2100      	movs	r1, #0
 8002a58:	2088      	movs	r0, #136	; 0x88
 8002a5a:	f7ff ff33 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2080      	movs	r0, #128	; 0x80
 8002a62:	f7ff ff2f 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002a66:	2101      	movs	r1, #1
 8002a68:	20ff      	movs	r0, #255	; 0xff
 8002a6a:	f7ff ff2b 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7ff ff27 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	init_stop_var = vl53l0x_I2C_Read_Reg8(0x091);
 8002a76:	2091      	movs	r0, #145	; 0x91
 8002a78:	f7ff ff6c 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <vl53l0x_Init+0x144>)
 8002a82:	701a      	strb	r2, [r3, #0]

	vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8002a84:	2101      	movs	r1, #1
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7ff ff1c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	20ff      	movs	r0, #255	; 0xff
 8002a90:	f7ff ff18 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 8002a94:	2100      	movs	r1, #0
 8002a96:	2080      	movs	r0, #128	; 0x80
 8002a98:	f7ff ff14 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	//disable signal rate msrc bit 1 and signal rate pre range bit 4 limit checks

	vl53l0x_I2C_Write_Reg8(MSRC_CONFIG_CONTROL,
			vl53l0x_I2C_Read_Reg8(MSRC_CONFIG_CONTROL) | 0x12);
 8002a9c:	2060      	movs	r0, #96	; 0x60
 8002a9e:	f7ff ff59 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8002aa2:	4603      	mov	r3, r0
	vl53l0x_I2C_Write_Reg8(MSRC_CONFIG_CONTROL,
 8002aa4:	f043 0312 	orr.w	r3, r3, #18
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	2060      	movs	r0, #96	; 0x60
 8002aae:	f7ff ff09 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	// set rate signal limit Mcps( milion counts per second)
	setSignalRateLimit(0.25);
 8002ab2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002ab6:	f000 fa9f 	bl	8002ff8 <setSignalRateLimit>

	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8002aba:	21ff      	movs	r1, #255	; 0xff
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7ff ff01 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	// staticInit
	uint8_t spad_count;
	bool  spad_type_is_aperture; //
	if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) return false;
 8002ac2:	f107 0213 	add.w	r2, r7, #19
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fac9 	bl	8003064 <getSpadInfo>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <vl53l0x_Init+0xac>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e1ed      	b.n	8002eb8 <vl53l0x_Init+0x488>

	//The SPAD map
	uint8_t ref_spad_map[6];
	vl53l0x_I2C_Read_MultiReg(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2206      	movs	r2, #6
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	20b0      	movs	r0, #176	; 0xb0
 8002ae6:	f7ff ff83 	bl	80029f0 <vl53l0x_I2C_Read_MultiReg>

	// vl53l0x_set_reference_spad() in api --start

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002aea:	2101      	movs	r1, #1
 8002aec:	20ff      	movs	r0, #255	; 0xff
 8002aee:	f7ff fee9 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002af2:	2100      	movs	r1, #0
 8002af4:	204f      	movs	r0, #79	; 0x4f
 8002af6:	f7ff fee5 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	204e      	movs	r0, #78	; 0x4e
 8002afe:	f7ff fee1 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002b02:	2100      	movs	r1, #0
 8002b04:	20ff      	movs	r0, #255	; 0xff
 8002b06:	f7ff fedd 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8002b0a:	21b4      	movs	r1, #180	; 0xb4
 8002b0c:	20b6      	movs	r0, #182	; 0xb6
 8002b0e:	f7ff fed9 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <vl53l0x_Init+0xec>
 8002b18:	230c      	movs	r3, #12
 8002b1a:	e000      	b.n	8002b1e <vl53l0x_Init+0xee>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	75bb      	strb	r3, [r7, #22]
 8002b28:	e03e      	b.n	8002ba8 <vl53l0x_Init+0x178>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8002b2a:	7dba      	ldrb	r2, [r7, #22]
 8002b2c:	7d7b      	ldrb	r3, [r7, #21]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d303      	bcc.n	8002b3a <vl53l0x_Init+0x10a>
 8002b32:	7d3b      	ldrb	r3, [r7, #20]
 8002b34:	7dfa      	ldrb	r2, [r7, #23]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d11e      	bne.n	8002b78 <vl53l0x_Init+0x148>
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8002b3a:	7dbb      	ldrb	r3, [r7, #22]
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	b2d8      	uxtb	r0, r3
 8002b40:	4603      	mov	r3, r0
 8002b42:	f107 0218 	add.w	r2, r7, #24
 8002b46:	4413      	add	r3, r2
 8002b48:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b4c:	b25a      	sxtb	r2, r3
 8002b4e:	7dbb      	ldrb	r3, [r7, #22]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	b25b      	sxtb	r3, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	4013      	ands	r3, r2
 8002b62:	b25a      	sxtb	r2, r3
 8002b64:	4603      	mov	r3, r0
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f107 0118 	add.w	r1, r7, #24
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002b72:	e016      	b.n	8002ba2 <vl53l0x_Init+0x172>
 8002b74:	20000668 	.word	0x20000668
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8002b78:	7dbb      	ldrb	r3, [r7, #22]
 8002b7a:	08db      	lsrs	r3, r3, #3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f107 0218 	add.w	r2, r7, #24
 8002b82:	4413      	add	r3, r2
 8002b84:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	7dbb      	ldrb	r3, [r7, #22]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	fa42 f303 	asr.w	r3, r2, r3
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <vl53l0x_Init+0x172>
		{
			spads_enabled++;
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 8002ba2:	7dbb      	ldrb	r3, [r7, #22]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	75bb      	strb	r3, [r7, #22]
 8002ba8:	7dbb      	ldrb	r3, [r7, #22]
 8002baa:	2b2f      	cmp	r3, #47	; 0x2f
 8002bac:	d9bd      	bls.n	8002b2a <vl53l0x_Init+0xfa>
		}
	}

	vl53l0x_I2C_Read_MultiReg(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	2206      	movs	r2, #6
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	20b0      	movs	r0, #176	; 0xb0
 8002bb8:	f7ff ff1a 	bl	80029f0 <vl53l0x_I2C_Read_MultiReg>

	// VL53L0X_set_reference_spads() --end

	//VL53L0X_load_tuning_settings() --start

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	20ff      	movs	r0, #255	; 0xff
 8002bc0:	f7ff fe80 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7ff fe7c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002bcc:	2100      	movs	r1, #0
 8002bce:	20ff      	movs	r0, #255	; 0xff
 8002bd0:	f7ff fe78 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x09, 0x00);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2009      	movs	r0, #9
 8002bd8:	f7ff fe74 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x10, 0x00);
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2010      	movs	r0, #16
 8002be0:	f7ff fe70 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x11, 0x00);
 8002be4:	2100      	movs	r1, #0
 8002be6:	2011      	movs	r0, #17
 8002be8:	f7ff fe6c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0x24, 0x01);
 8002bec:	2101      	movs	r1, #1
 8002bee:	2024      	movs	r0, #36	; 0x24
 8002bf0:	f7ff fe68 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x25, 0xFF);
 8002bf4:	21ff      	movs	r1, #255	; 0xff
 8002bf6:	2025      	movs	r0, #37	; 0x25
 8002bf8:	f7ff fe64 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x75, 0x00);
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2075      	movs	r0, #117	; 0x75
 8002c00:	f7ff fe60 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002c04:	2101      	movs	r1, #1
 8002c06:	20ff      	movs	r0, #255	; 0xff
 8002c08:	f7ff fe5c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4E, 0x2C);
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	204e      	movs	r0, #78	; 0x4e
 8002c10:	f7ff fe58 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x48, 0x00);
 8002c14:	2100      	movs	r1, #0
 8002c16:	2048      	movs	r0, #72	; 0x48
 8002c18:	f7ff fe54 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x30, 0x20);
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	2030      	movs	r0, #48	; 0x30
 8002c20:	f7ff fe50 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002c24:	2100      	movs	r1, #0
 8002c26:	20ff      	movs	r0, #255	; 0xff
 8002c28:	f7ff fe4c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x30, 0x09);
 8002c2c:	2109      	movs	r1, #9
 8002c2e:	2030      	movs	r0, #48	; 0x30
 8002c30:	f7ff fe48 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x54, 0x00);
 8002c34:	2100      	movs	r1, #0
 8002c36:	2054      	movs	r0, #84	; 0x54
 8002c38:	f7ff fe44 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x31, 0x04);
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	2031      	movs	r0, #49	; 0x31
 8002c40:	f7ff fe40 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x32, 0x03);
 8002c44:	2103      	movs	r1, #3
 8002c46:	2032      	movs	r0, #50	; 0x32
 8002c48:	f7ff fe3c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x40, 0x83);
 8002c4c:	2183      	movs	r1, #131	; 0x83
 8002c4e:	2040      	movs	r0, #64	; 0x40
 8002c50:	f7ff fe38 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x46, 0x25);
 8002c54:	2125      	movs	r1, #37	; 0x25
 8002c56:	2046      	movs	r0, #70	; 0x46
 8002c58:	f7ff fe34 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x60, 0x00);
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2060      	movs	r0, #96	; 0x60
 8002c60:	f7ff fe30 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x27, 0x00);
 8002c64:	2100      	movs	r1, #0
 8002c66:	2027      	movs	r0, #39	; 0x27
 8002c68:	f7ff fe2c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x50, 0x06);
 8002c6c:	2106      	movs	r1, #6
 8002c6e:	2050      	movs	r0, #80	; 0x50
 8002c70:	f7ff fe28 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x51, 0x00);
 8002c74:	2100      	movs	r1, #0
 8002c76:	2051      	movs	r0, #81	; 0x51
 8002c78:	f7ff fe24 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x52, 0x96);
 8002c7c:	2196      	movs	r1, #150	; 0x96
 8002c7e:	2052      	movs	r0, #82	; 0x52
 8002c80:	f7ff fe20 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x56, 0x08);
 8002c84:	2108      	movs	r1, #8
 8002c86:	2056      	movs	r0, #86	; 0x56
 8002c88:	f7ff fe1c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x57, 0x30);
 8002c8c:	2130      	movs	r1, #48	; 0x30
 8002c8e:	2057      	movs	r0, #87	; 0x57
 8002c90:	f7ff fe18 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x61, 0x00);
 8002c94:	2100      	movs	r1, #0
 8002c96:	2061      	movs	r0, #97	; 0x61
 8002c98:	f7ff fe14 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x62, 0x00);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2062      	movs	r0, #98	; 0x62
 8002ca0:	f7ff fe10 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x64, 0x00);
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2064      	movs	r0, #100	; 0x64
 8002ca8:	f7ff fe0c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x65, 0x00);
 8002cac:	2100      	movs	r1, #0
 8002cae:	2065      	movs	r0, #101	; 0x65
 8002cb0:	f7ff fe08 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x66, 0xA0);
 8002cb4:	21a0      	movs	r1, #160	; 0xa0
 8002cb6:	2066      	movs	r0, #102	; 0x66
 8002cb8:	f7ff fe04 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	20ff      	movs	r0, #255	; 0xff
 8002cc0:	f7ff fe00 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x22, 0x32);
 8002cc4:	2132      	movs	r1, #50	; 0x32
 8002cc6:	2022      	movs	r0, #34	; 0x22
 8002cc8:	f7ff fdfc 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x47, 0x14);
 8002ccc:	2114      	movs	r1, #20
 8002cce:	2047      	movs	r0, #71	; 0x47
 8002cd0:	f7ff fdf8 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x49, 0xFF);
 8002cd4:	21ff      	movs	r1, #255	; 0xff
 8002cd6:	2049      	movs	r0, #73	; 0x49
 8002cd8:	f7ff fdf4 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4A, 0x00);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	204a      	movs	r0, #74	; 0x4a
 8002ce0:	f7ff fdf0 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	20ff      	movs	r0, #255	; 0xff
 8002ce8:	f7ff fdec 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x7A, 0x0A);
 8002cec:	210a      	movs	r1, #10
 8002cee:	207a      	movs	r0, #122	; 0x7a
 8002cf0:	f7ff fde8 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x7B, 0x00);
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	207b      	movs	r0, #123	; 0x7b
 8002cf8:	f7ff fde4 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x78, 0x21);
 8002cfc:	2121      	movs	r1, #33	; 0x21
 8002cfe:	2078      	movs	r0, #120	; 0x78
 8002d00:	f7ff fde0 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002d04:	2101      	movs	r1, #1
 8002d06:	20ff      	movs	r0, #255	; 0xff
 8002d08:	f7ff fddc 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x23, 0x34);
 8002d0c:	2134      	movs	r1, #52	; 0x34
 8002d0e:	2023      	movs	r0, #35	; 0x23
 8002d10:	f7ff fdd8 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x42, 0x00);
 8002d14:	2100      	movs	r1, #0
 8002d16:	2042      	movs	r0, #66	; 0x42
 8002d18:	f7ff fdd4 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x44, 0xFF);
 8002d1c:	21ff      	movs	r1, #255	; 0xff
 8002d1e:	2044      	movs	r0, #68	; 0x44
 8002d20:	f7ff fdd0 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x45, 0x26);
 8002d24:	2126      	movs	r1, #38	; 0x26
 8002d26:	2045      	movs	r0, #69	; 0x45
 8002d28:	f7ff fdcc 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x46, 0x05);
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	2046      	movs	r0, #70	; 0x46
 8002d30:	f7ff fdc8 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x40, 0x40);
 8002d34:	2140      	movs	r1, #64	; 0x40
 8002d36:	2040      	movs	r0, #64	; 0x40
 8002d38:	f7ff fdc4 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x0E, 0x06);
 8002d3c:	2106      	movs	r1, #6
 8002d3e:	200e      	movs	r0, #14
 8002d40:	f7ff fdc0 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x20, 0x1A);
 8002d44:	211a      	movs	r1, #26
 8002d46:	2020      	movs	r0, #32
 8002d48:	f7ff fdbc 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x43, 0x40);
 8002d4c:	2140      	movs	r1, #64	; 0x40
 8002d4e:	2043      	movs	r0, #67	; 0x43
 8002d50:	f7ff fdb8 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002d54:	2100      	movs	r1, #0
 8002d56:	20ff      	movs	r0, #255	; 0xff
 8002d58:	f7ff fdb4 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x34, 0x03);
 8002d5c:	2103      	movs	r1, #3
 8002d5e:	2034      	movs	r0, #52	; 0x34
 8002d60:	f7ff fdb0 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x35, 0x44);
 8002d64:	2144      	movs	r1, #68	; 0x44
 8002d66:	2035      	movs	r0, #53	; 0x35
 8002d68:	f7ff fdac 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	20ff      	movs	r0, #255	; 0xff
 8002d70:	f7ff fda8 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x31, 0x04);
 8002d74:	2104      	movs	r1, #4
 8002d76:	2031      	movs	r0, #49	; 0x31
 8002d78:	f7ff fda4 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4B, 0x09);
 8002d7c:	2109      	movs	r1, #9
 8002d7e:	204b      	movs	r0, #75	; 0x4b
 8002d80:	f7ff fda0 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4C, 0x05);
 8002d84:	2105      	movs	r1, #5
 8002d86:	204c      	movs	r0, #76	; 0x4c
 8002d88:	f7ff fd9c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4D, 0x04);
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	204d      	movs	r0, #77	; 0x4d
 8002d90:	f7ff fd98 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002d94:	2100      	movs	r1, #0
 8002d96:	20ff      	movs	r0, #255	; 0xff
 8002d98:	f7ff fd94 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x44, 0x00);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2044      	movs	r0, #68	; 0x44
 8002da0:	f7ff fd90 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x45, 0x20);
 8002da4:	2120      	movs	r1, #32
 8002da6:	2045      	movs	r0, #69	; 0x45
 8002da8:	f7ff fd8c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x47, 0x08);
 8002dac:	2108      	movs	r1, #8
 8002dae:	2047      	movs	r0, #71	; 0x47
 8002db0:	f7ff fd88 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x48, 0x28);
 8002db4:	2128      	movs	r1, #40	; 0x28
 8002db6:	2048      	movs	r0, #72	; 0x48
 8002db8:	f7ff fd84 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x67, 0x00);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2067      	movs	r0, #103	; 0x67
 8002dc0:	f7ff fd80 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x70, 0x04);
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	2070      	movs	r0, #112	; 0x70
 8002dc8:	f7ff fd7c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x71, 0x01);
 8002dcc:	2101      	movs	r1, #1
 8002dce:	2071      	movs	r0, #113	; 0x71
 8002dd0:	f7ff fd78 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x72, 0xFE);
 8002dd4:	21fe      	movs	r1, #254	; 0xfe
 8002dd6:	2072      	movs	r0, #114	; 0x72
 8002dd8:	f7ff fd74 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x76, 0x00);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2076      	movs	r0, #118	; 0x76
 8002de0:	f7ff fd70 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x77, 0x00);
 8002de4:	2100      	movs	r1, #0
 8002de6:	2077      	movs	r0, #119	; 0x77
 8002de8:	f7ff fd6c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002dec:	2101      	movs	r1, #1
 8002dee:	20ff      	movs	r0, #255	; 0xff
 8002df0:	f7ff fd68 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x0D, 0x01);
 8002df4:	2101      	movs	r1, #1
 8002df6:	200d      	movs	r0, #13
 8002df8:	f7ff fd64 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	20ff      	movs	r0, #255	; 0xff
 8002e00:	f7ff fd60 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 8002e04:	2101      	movs	r1, #1
 8002e06:	2080      	movs	r0, #128	; 0x80
 8002e08:	f7ff fd5c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x01, 0xF8);
 8002e0c:	21f8      	movs	r1, #248	; 0xf8
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7ff fd58 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002e14:	2101      	movs	r1, #1
 8002e16:	20ff      	movs	r0, #255	; 0xff
 8002e18:	f7ff fd54 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x8E, 0x01);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	208e      	movs	r0, #142	; 0x8e
 8002e20:	f7ff fd50 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8002e24:	2101      	movs	r1, #1
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7ff fd4c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	20ff      	movs	r0, #255	; 0xff
 8002e30:	f7ff fd48 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 8002e34:	2100      	movs	r1, #0
 8002e36:	2080      	movs	r0, #128	; 0x80
 8002e38:	f7ff fd44 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	  //VL53L0X_load_tuning_settings() --end

	 // "Set interrupt config to new sample ready"
	  // VL53L0X_SetGpioConfig() -- start

	 vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	200a      	movs	r0, #10
 8002e40:	f7ff fd40 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	 vl53l0x_I2C_Write_Reg8(GPIO_HV_MUX_ACTIVE_HIGH, vl53l0x_I2C_Read_Reg8(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8002e44:	2084      	movs	r0, #132	; 0x84
 8002e46:	f7ff fd85 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f023 0310 	bic.w	r3, r3, #16
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	2084      	movs	r0, #132	; 0x84
 8002e56:	f7ff fd35 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	 vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	200b      	movs	r0, #11
 8002e5e:	f7ff fd31 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	 // VL53L0X_SetGpioConfig() -- end

	 g_measTimBudUs = getMeasurementTimingBudget();
 8002e62:	f000 f977 	bl	8003154 <getMeasurementTimingBudget>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <vl53l0x_Init+0x490>)
 8002e6a:	6013      	str	r3, [r2, #0]
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// VL53L0X_SetSequenceStepEnable() -- start

	 vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8002e6c:	21e8      	movs	r1, #232	; 0xe8
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7ff fd28 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	  //VL53L0X_SetSequenceStepEnable() --end

	// "Recalculate timing budget"
	setMeasurementTimingBudget(g_measTimBudUs);
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <vl53l0x_Init+0x490>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f823 	bl	8002ec4 <setMeasurementTimingBudget>

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002e7e:	2101      	movs	r1, #1
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7ff fd1f 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	if (!performSingleRefCalibration(0x40)) { return false; }
 8002e86:	2040      	movs	r0, #64	; 0x40
 8002e88:	f000 fb0e 	bl	80034a8 <performSingleRefCalibration>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <vl53l0x_Init+0x466>
 8002e92:	2300      	movs	r3, #0
 8002e94:	e010      	b.n	8002eb8 <vl53l0x_Init+0x488>

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002e96:	2102      	movs	r1, #2
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f7ff fd13 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	if (!performSingleRefCalibration(0x00)) { return false; }
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f000 fb02 	bl	80034a8 <performSingleRefCalibration>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <vl53l0x_Init+0x47e>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e004      	b.n	8002eb8 <vl53l0x_Init+0x488>

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8002eae:	21e8      	movs	r1, #232	; 0xe8
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7ff fd07 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	// VL53L0X_PerformRefCalibration() end

	 return true;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000066c 	.word	0x2000066c

08002ec4 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b092      	sub	sp, #72	; 0x48
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002ecc:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8002ed0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 8002ed4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ed8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 8002eda:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002ede:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 8002ee0:	f240 234e 	movw	r3, #590	; 0x24e
 8002ee4:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 8002ee6:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002eea:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 8002eec:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002ef0:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8002ef2:	f240 2326 	movw	r3, #550	; 0x226
 8002ef6:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 8002ef8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d201      	bcs.n	8002f0a <setMeasurementTimingBudget+0x46>
 8002f06:	2300      	movs	r3, #0
 8002f08:	e06e      	b.n	8002fe8 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8002f0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002f0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f10:	4413      	add	r3, r2
 8002f12:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(&enables);
 8002f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f97d 	bl	8003218 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8002f1e:	f107 020c 	add.w	r2, r7, #12
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f9a7 	bl	800327c <getSequenceStepTimeouts>

  if (enables.tcc)
 8002f2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f3a:	4413      	add	r3, r2
 8002f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3e:	4413      	add	r3, r2
 8002f40:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8002f42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f4e:	4413      	add	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f54:	4413      	add	r3, r2
 8002f56:	647b      	str	r3, [r7, #68]	; 0x44
 8002f58:	e009      	b.n	8002f6e <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 8002f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f66:	4413      	add	r3, r2
 8002f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f6a:	4413      	add	r3, r2
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 8002f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f7a:	4413      	add	r3, r2
 8002f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f7e:	4413      	add	r3, r2
 8002f80:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8002f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02d      	beq.n	8002fe6 <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 8002f8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	4413      	add	r3, r2
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d901      	bls.n	8002f9e <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e024      	b.n	8002fe8 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	4619      	mov	r1, r3
 8002fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fae:	f000 fa29 	bl	8003404 <timeoutMicrosecondsToMclks>
 8002fb2:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8002fb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 8002fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002fc0:	8a7a      	ldrh	r2, [r7, #18]
 8002fc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    vl53l0x_I2C_Write_Reg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002fcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fa3d 	bl	8003450 <encodeTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	2071      	movs	r0, #113	; 0x71
 8002fdc:	f7ff fc92 	bl	8002904 <vl53l0x_I2C_Write_Reg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 8002fe0:	4a03      	ldr	r2, [pc, #12]	; (8002ff0 <setMeasurementTimingBudget+0x12c>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
  }
  return true;
 8002fe6:	2301      	movs	r3, #1
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3748      	adds	r7, #72	; 0x48
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000066c 	.word	0x2000066c
 8002ff4:	00000000 	.word	0x00000000

08002ff8 <setSignalRateLimit>:
// Mcps - mega counts per second
bool setSignalRateLimit(float Mcps){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	ed87 0a01 	vstr	s0, [r7, #4]

	if(Mcps < 0 || Mcps > 511.99)return false;
 8003002:	edd7 7a01 	vldr	s15, [r7, #4]
 8003006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300e:	d40a      	bmi.n	8003026 <setSignalRateLimit+0x2e>
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fd faa1 	bl	8000558 <__aeabi_f2d>
 8003016:	a311      	add	r3, pc, #68	; (adr r3, 800305c <setSignalRateLimit+0x64>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd fd84 	bl	8000b28 <__aeabi_dcmpgt>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <setSignalRateLimit+0x32>
 8003026:	2300      	movs	r3, #0
 8003028:	e00f      	b.n	800304a <setSignalRateLimit+0x52>
	vl53l0x_I2C_Write_Reg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, Mcps *(1<<7));
 800302a:	edd7 7a01 	vldr	s15, [r7, #4]
 800302e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003058 <setSignalRateLimit+0x60>
 8003032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800303a:	ee17 3a90 	vmov	r3, s15
 800303e:	b29b      	uxth	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	2044      	movs	r0, #68	; 0x44
 8003044:	f7ff fc5e 	bl	8002904 <vl53l0x_I2C_Write_Reg16>
	return true;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	43000000 	.word	0x43000000
 800305c:	0a3d70a4 	.word	0x0a3d70a4
 8003060:	407fffd7 	.word	0x407fffd7

08003064 <getSpadInfo>:
/* Get feference SPAD count and type
 * based on vl53l0x_get_info_from_divice()*/
bool getSpadInfo(uint8_t *count, bool *type_is_aperture){
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

	uint8_t tmp;
	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 800306e:	2101      	movs	r1, #1
 8003070:	2080      	movs	r0, #128	; 0x80
 8003072:	f7ff fc27 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8003076:	2101      	movs	r1, #1
 8003078:	20ff      	movs	r0, #255	; 0xff
 800307a:	f7ff fc23 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 800307e:	2100      	movs	r1, #0
 8003080:	2000      	movs	r0, #0
 8003082:	f7ff fc1f 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x06);
 8003086:	2106      	movs	r1, #6
 8003088:	20ff      	movs	r0, #255	; 0xff
 800308a:	f7ff fc1b 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x83, vl53l0x_I2C_Read_Reg8(0x83) | 0x04);
 800308e:	2083      	movs	r0, #131	; 0x83
 8003090:	f7ff fc60 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8003094:	4603      	mov	r3, r0
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	2083      	movs	r0, #131	; 0x83
 80030a0:	f7ff fc10 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x07);
 80030a4:	2107      	movs	r1, #7
 80030a6:	20ff      	movs	r0, #255	; 0xff
 80030a8:	f7ff fc0c 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x81, 0x01);
 80030ac:	2101      	movs	r1, #1
 80030ae:	2081      	movs	r0, #129	; 0x81
 80030b0:	f7ff fc08 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 80030b4:	2101      	movs	r1, #1
 80030b6:	2080      	movs	r0, #128	; 0x80
 80030b8:	f7ff fc04 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0x94, 0x6b);
 80030bc:	216b      	movs	r1, #107	; 0x6b
 80030be:	2094      	movs	r0, #148	; 0x94
 80030c0:	f7ff fc00 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x83, 0x00);
 80030c4:	2100      	movs	r1, #0
 80030c6:	2083      	movs	r0, #131	; 0x83
 80030c8:	f7ff fbfc 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	while(vl53l0x_I2C_Read_Reg8(0x83) == 0x00){ //while change
 80030cc:	bf00      	nop
 80030ce:	2083      	movs	r0, #131	; 0x83
 80030d0:	f7ff fc40 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f9      	beq.n	80030ce <getSpadInfo+0x6a>
		// add timeout function
	}
	vl53l0x_I2C_Write_Reg8(0x83, 0x01);
 80030da:	2101      	movs	r1, #1
 80030dc:	2083      	movs	r0, #131	; 0x83
 80030de:	f7ff fbf1 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	tmp = vl53l0x_I2C_Read_Reg8(0x92);
 80030e2:	2092      	movs	r0, #146	; 0x92
 80030e4:	f7ff fc36 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]

	*count = tmp & 0x7f;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	09db      	lsrs	r3, r3, #7
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	701a      	strb	r2, [r3, #0]

	vl53l0x_I2C_Write_Reg8(0x81, 0x00);
 8003102:	2100      	movs	r1, #0
 8003104:	2081      	movs	r0, #129	; 0x81
 8003106:	f7ff fbdd 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x06);
 800310a:	2106      	movs	r1, #6
 800310c:	20ff      	movs	r0, #255	; 0xff
 800310e:	f7ff fbd9 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x83, vl53l0x_I2C_Read_Reg8(0x83)  & ~0x04);
 8003112:	2083      	movs	r0, #131	; 0x83
 8003114:	f7ff fc1e 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8003118:	4603      	mov	r3, r0
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	b2db      	uxtb	r3, r3
 8003120:	4619      	mov	r1, r3
 8003122:	2083      	movs	r0, #131	; 0x83
 8003124:	f7ff fbce 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8003128:	2101      	movs	r1, #1
 800312a:	20ff      	movs	r0, #255	; 0xff
 800312c:	f7ff fbca 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8003130:	2101      	movs	r1, #1
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff fbc6 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8003138:	2100      	movs	r1, #0
 800313a:	20ff      	movs	r0, #255	; 0xff
 800313c:	f7ff fbc2 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 8003140:	2100      	movs	r1, #0
 8003142:	2080      	movs	r0, #128	; 0x80
 8003144:	f7ff fbbe 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

	return true;
 8003148:	2301      	movs	r3, #1
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	; 0x30
 8003158:	af00      	add	r7, sp, #0
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800315a:	f240 7376 	movw	r3, #1910	; 0x776
 800315e:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t const EndOverhead        = 960;
 8003160:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003164:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t const MsrcOverhead       = 660;
 8003166:	f44f 7325 	mov.w	r3, #660	; 0x294
 800316a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t const TccOverhead        = 590;
 800316c:	f240 234e 	movw	r3, #590	; 0x24e
 8003170:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t const DssOverhead        = 690;
 8003172:	f240 23b2 	movw	r3, #690	; 0x2b2
 8003176:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t const PreRangeOverhead   = 660;
 8003178:	f44f 7325 	mov.w	r3, #660	; 0x294
 800317c:	843b      	strh	r3, [r7, #32]
	uint16_t const FinalRangeOverhead = 550;
 800317e:	f240 2326 	movw	r3, #550	; 0x226
 8003182:	83fb      	strh	r3, [r7, #30]

	// "Start and end overhead times always present"
	uint32_t budget_us = StartOverhead + EndOverhead;
 8003184:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003186:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003188:	4413      	add	r3, r2
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c

	getSequenceStepEnables(&enables);
 800318c:	f107 0318 	add.w	r3, r7, #24
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f841 	bl	8003218 <getSequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 8003196:	463a      	mov	r2, r7
 8003198:	f107 0318 	add.w	r3, r7, #24
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f86c 	bl	800327c <getSequenceStepTimeouts>

	if (enables.tcc)
 80031a4:	7e3b      	ldrb	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <getMeasurementTimingBudget+0x62>
	{
	budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ae:	4413      	add	r3, r2
 80031b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b2:	4413      	add	r3, r2
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.dss)
 80031b6:	7ebb      	ldrb	r3, [r7, #26]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <getMeasurementTimingBudget+0x78>
	{
	budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031c0:	4413      	add	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c6:	4413      	add	r3, r2
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ca:	e008      	b.n	80031de <getMeasurementTimingBudget+0x8a>
	}
	else if (enables.msrc)
 80031cc:	7e7b      	ldrb	r3, [r7, #25]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <getMeasurementTimingBudget+0x8a>
	{
	budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031d6:	4413      	add	r3, r2
 80031d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031da:	4413      	add	r3, r2
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.pre_range)
 80031de:	7efb      	ldrb	r3, [r7, #27]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <getMeasurementTimingBudget+0x9c>
	{
	budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	8c3b      	ldrh	r3, [r7, #32]
 80031e8:	4413      	add	r3, r2
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	4413      	add	r3, r2
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.final_range)
 80031f0:	7f3b      	ldrb	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <getMeasurementTimingBudget+0xae>
	{
	budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	8bfb      	ldrh	r3, [r7, #30]
 80031fa:	4413      	add	r3, r2
 80031fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031fe:	4413      	add	r3, r2
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	g_measTimBudUs = budget_us; // store for internal reuse
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <getMeasurementTimingBudget+0xc0>)
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	6013      	str	r3, [r2, #0]
	return budget_us;
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800320a:	4618      	mov	r0, r3
 800320c:	3730      	adds	r7, #48	; 0x30
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	2000066c 	.word	0x2000066c

08003218 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = vl53l0x_I2C_Read_Reg8(SYSTEM_SEQUENCE_CONFIG);
 8003220:	2001      	movs	r0, #1
 8003222:	f7ff fb97 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	b2da      	uxtb	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	09db      	lsrs	r3, r3, #7
 800326e:	b2da      	uxtb	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	711a      	strb	r2, [r3, #4]
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8003286:	2000      	movs	r0, #0
 8003288:	f000 f85e 	bl	8003348 <getVcselPulsePeriod>
 800328c:	4603      	mov	r3, r0
 800328e:	b29a      	uxth	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = vl53l0x_I2C_Read_Reg8(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8003294:	2046      	movs	r0, #70	; 0x46
 8003296:	f7ff fb5d 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 800329a:	4603      	mov	r3, r0
 800329c:	b29b      	uxth	r3, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 f86a 	bl	800338c <timeoutMclksToMicroseconds>
 80032b8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(vl53l0x_I2C_Read_Reg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80032be:	2051      	movs	r0, #81	; 0x51
 80032c0:	f7ff fb66 	bl	8002990 <vl53l0x_I2C_Read_Reg16>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f888 	bl	80033dc <decodeTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f000 f853 	bl	800338c <timeoutMclksToMicroseconds>
 80032e6:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f000 f82b 	bl	8003348 <getVcselPulsePeriod>
 80032f2:	4603      	mov	r3, r0
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(vl53l0x_I2C_Read_Reg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80032fa:	2071      	movs	r0, #113	; 0x71
 80032fc:	f7ff fb48 	bl	8002990 <vl53l0x_I2C_Read_Reg16>
 8003300:	4603      	mov	r3, r0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f86a 	bl	80033dc <decodeTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	78db      	ldrb	r3, [r3, #3]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <getSequenceStepTimeouts+0xac>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	891a      	ldrh	r2, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	88db      	ldrh	r3, [r3, #6]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	b29a      	uxth	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 f829 	bl	800338c <timeoutMclksToMicroseconds>
 800333a:	4602      	mov	r2, r0
  timeouts->final_range_us =
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	615a      	str	r2, [r3, #20]
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d108      	bne.n	800336a <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(vl53l0x_I2C_Read_Reg8(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8003358:	2050      	movs	r0, #80	; 0x50
 800335a:	f7ff fafb 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 800335e:	4603      	mov	r3, r0
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	e00c      	b.n	8003384 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(vl53l0x_I2C_Read_Reg8(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8003370:	2070      	movs	r0, #112	; 0x70
 8003372:	f7ff faef 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8003376:	4603      	mov	r3, r0
 8003378:	3301      	adds	r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	e000      	b.n	8003384 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 8003382:	23ff      	movs	r3, #255	; 0xff
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	460a      	mov	r2, r1
 8003396:	80fb      	strh	r3, [r7, #6]
 8003398:	4613      	mov	r3, r2
 800339a:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800339c:	797b      	ldrb	r3, [r7, #5]
 800339e:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <timeoutMclksToMicroseconds+0x48>)
 80033a0:	fb02 f303 	mul.w	r3, r2, r3
 80033a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <timeoutMclksToMicroseconds+0x4c>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	fb02 f203 	mul.w	r2, r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <timeoutMclksToMicroseconds+0x4c>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	099b      	lsrs	r3, r3, #6
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	003a2f00 	.word	0x003a2f00
 80033d8:	10624dd3 	.word	0x10624dd3

080033dc <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	0a12      	lsrs	r2, r2, #8
 80033ee:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 80033f0:	4093      	lsls	r3, r2
 80033f2:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80033f4:	3301      	adds	r3, #1
 80033f6:	b29b      	uxth	r3, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <timeoutMicrosecondsToMclks+0x44>)
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800341c:	4a0b      	ldr	r2, [pc, #44]	; (800344c <timeoutMicrosecondsToMclks+0x48>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800342c:	fb02 f203 	mul.w	r2, r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	003a2f00 	.word	0x003a2f00
 800344c:	10624dd3 	.word	0x10624dd3

08003450 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 800346e:	e005      	b.n	800347c <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	3301      	adds	r3, #1
 800347a:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f4      	bne.n	8003470 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8003486:	897b      	ldrh	r3, [r7, #10]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	b29b      	uxth	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	b29b      	uxth	r3, r3
 8003494:	4313      	orrs	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	e000      	b.n	800349c <encodeTimeout+0x4c>
  }
  else { return 0; }
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <performSingleRefCalibration>:

// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  vl53l0x_I2C_Write_Reg8(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	2000      	movs	r0, #0
 80034be:	f7ff fa01 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

  startTimeout();
 80034c2:	f7ff f9e7 	bl	8002894 <startTimeout>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80034c6:	e00e      	b.n	80034e6 <performSingleRefCalibration+0x3e>
  {
	   if (checkTimeoutExpired())
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <performSingleRefCalibration+0x68>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <performSingleRefCalibration+0x3e>
 80034d0:	f7ff f9e7 	bl	80028a2 <getTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <performSingleRefCalibration+0x68>)
 80034d8:	8812      	ldrh	r2, [r2, #0]
 80034da:	4293      	cmp	r3, r2
 80034dc:	d903      	bls.n	80034e6 <performSingleRefCalibration+0x3e>
	   {
	    //  g_isTimeout = true;
		   stopTimeout();
 80034de:	f7ff f9e8 	bl	80028b2 <stopTimeout>
	       return false;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e010      	b.n	8003508 <performSingleRefCalibration+0x60>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80034e6:	2013      	movs	r0, #19
 80034e8:	f7ff fa34 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0e8      	beq.n	80034c8 <performSingleRefCalibration+0x20>
	    }
  }

  vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80034f6:	2101      	movs	r1, #1
 80034f8:	200b      	movs	r0, #11
 80034fa:	f7ff f9e3 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

  vl53l0x_I2C_Write_Reg8(SYSRANGE_START, 0x00);
 80034fe:	2100      	movs	r1, #0
 8003500:	2000      	movs	r0, #0
 8003502:	f7ff f9df 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>

  return true;
 8003506:	2301      	movs	r3, #1
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	2000003c 	.word	0x2000003c

08003514 <vl53l0x_ReadRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t vl53l0x_ReadRangeContinuousMillimeters( statInfo_t *extraStats ) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  //todo: func ->startTimeout();
  startTimeout();
 800351c:	f7ff f9ba 	bl	8002894 <startTimeout>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0) { // wait for mesure complet
 8003520:	e00f      	b.n	8003542 <vl53l0x_ReadRangeContinuousMillimeters+0x2e>
   if (checkTimeoutExpired())
 8003522:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <vl53l0x_ReadRangeContinuousMillimeters+0xcc>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <vl53l0x_ReadRangeContinuousMillimeters+0x2e>
 800352a:	f7ff f9ba 	bl	80028a2 <getTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <vl53l0x_ReadRangeContinuousMillimeters+0xcc>)
 8003532:	8812      	ldrh	r2, [r2, #0]
 8003534:	4293      	cmp	r3, r2
 8003536:	d904      	bls.n	8003542 <vl53l0x_ReadRangeContinuousMillimeters+0x2e>
   {
    //  g_isTimeout = true;
	   stopTimeout();
 8003538:	f7ff f9bb 	bl	80028b2 <stopTimeout>
       return 65535;
 800353c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003540:	e04a      	b.n	80035d8 <vl53l0x_ReadRangeContinuousMillimeters+0xc4>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0) { // wait for mesure complet
 8003542:	2013      	movs	r0, #19
 8003544:	f7ff fa06 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0e7      	beq.n	8003522 <vl53l0x_ReadRangeContinuousMillimeters+0xe>
    }
  }
  if( extraStats == 0 ){
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <vl53l0x_ReadRangeContinuousMillimeters+0x50>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = vl53l0x_I2C_Read_Reg16(RESULT_RANGE_STATUS + 10);
 8003558:	201e      	movs	r0, #30
 800355a:	f7ff fa19 	bl	8002990 <vl53l0x_I2C_Read_Reg16>
 800355e:	4603      	mov	r3, r0
 8003560:	82fb      	strh	r3, [r7, #22]
 8003562:	e034      	b.n	80035ce <vl53l0x_ReadRangeContinuousMillimeters+0xba>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
	vl53l0x_I2C_Read_MultiReg(0x14, tempBuffer, 12);
 8003564:	f107 0308 	add.w	r3, r7, #8
 8003568:	220c      	movs	r2, #12
 800356a:	4619      	mov	r1, r3
 800356c:	2014      	movs	r0, #20
 800356e:	f7ff fa3f 	bl	80029f0 <vl53l0x_I2C_Read_MultiReg>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8003572:	7a3b      	ldrb	r3, [r7, #8]
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	b2da      	uxtb	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 800357c:	7abb      	ldrb	r3, [r7, #10]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	b21a      	sxth	r2, r3
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	b21b      	sxth	r3, r3
 8003586:	4313      	orrs	r3, r2
 8003588:	b21b      	sxth	r3, r3
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8003590:	7bbb      	ldrb	r3, [r7, #14]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	b21a      	sxth	r2, r3
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	b21b      	sxth	r3, r3
 800359a:	4313      	orrs	r3, r2
 800359c:	b21b      	sxth	r3, r3
 800359e:	b29a      	uxth	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];
 80035a4:	7c3b      	ldrb	r3, [r7, #16]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	7c7b      	ldrb	r3, [r7, #17]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 80035b8:	7cbb      	ldrb	r3, [r7, #18]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	b21a      	sxth	r2, r3
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8afa      	ldrh	r2, [r7, #22]
 80035cc:	801a      	strh	r2, [r3, #0]
  }
  vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80035ce:	2101      	movs	r1, #1
 80035d0:	200b      	movs	r0, #11
 80035d2:	f7ff f977 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  return temp;
 80035d6:	8afb      	ldrh	r3, [r7, #22]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	2000003c 	.word	0x2000003c

080035e4 <vl53l0x_ReadRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t vl53l0x_ReadRangeSingleMillimeters( statInfo_t *extraStats ) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 80035ec:	2101      	movs	r1, #1
 80035ee:	2080      	movs	r0, #128	; 0x80
 80035f0:	f7ff f968 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 80035f4:	2101      	movs	r1, #1
 80035f6:	20ff      	movs	r0, #255	; 0xff
 80035f8:	f7ff f964 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 80035fc:	2100      	movs	r1, #0
 80035fe:	2000      	movs	r0, #0
 8003600:	f7ff f960 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x91, init_stop_var);
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <vl53l0x_ReadRangeSingleMillimeters+0x94>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	2091      	movs	r0, #145	; 0x91
 800360c:	f7ff f95a 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8003610:	2101      	movs	r1, #1
 8003612:	2000      	movs	r0, #0
 8003614:	f7ff f956 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8003618:	2100      	movs	r1, #0
 800361a:	20ff      	movs	r0, #255	; 0xff
 800361c:	f7ff f952 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 8003620:	2100      	movs	r1, #0
 8003622:	2080      	movs	r0, #128	; 0x80
 8003624:	f7ff f94e 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(SYSRANGE_START, 0x01);
 8003628:	2101      	movs	r1, #1
 800362a:	2000      	movs	r0, #0
 800362c:	f7ff f94a 	bl	80028c4 <vl53l0x_I2C_Write_Reg8>
  // "Wait until start bit has been cleared"
  startTimeout();
 8003630:	f7ff f930 	bl	8002894 <startTimeout>
  while (vl53l0x_I2C_Read_Reg8(SYSRANGE_START) & 0x01){
 8003634:	e00f      	b.n	8003656 <vl53l0x_ReadRangeSingleMillimeters+0x72>
    if (checkTimeoutExpired())
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <vl53l0x_ReadRangeSingleMillimeters+0x98>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <vl53l0x_ReadRangeSingleMillimeters+0x72>
 800363e:	f7ff f930 	bl	80028a2 <getTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <vl53l0x_ReadRangeSingleMillimeters+0x98>)
 8003646:	8812      	ldrh	r2, [r2, #0]
 8003648:	4293      	cmp	r3, r2
 800364a:	d904      	bls.n	8003656 <vl53l0x_ReadRangeSingleMillimeters+0x72>
    {
    	//g_isTimeout = true;
    	stopTimeout();
 800364c:	f7ff f931 	bl	80028b2 <stopTimeout>
    	return 65535;
 8003650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003654:	e00b      	b.n	800366e <vl53l0x_ReadRangeSingleMillimeters+0x8a>
  while (vl53l0x_I2C_Read_Reg8(SYSRANGE_START) & 0x01){
 8003656:	2000      	movs	r0, #0
 8003658:	f7ff f97c 	bl	8002954 <vl53l0x_I2C_Read_Reg8>
 800365c:	4603      	mov	r3, r0
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e7      	bne.n	8003636 <vl53l0x_ReadRangeSingleMillimeters+0x52>
    }
  }
  return vl53l0x_ReadRangeContinuousMillimeters( extraStats );
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff54 	bl	8003514 <vl53l0x_ReadRangeContinuousMillimeters>
 800366c:	4603      	mov	r3, r0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000668 	.word	0x20000668
 800367c:	2000003c 	.word	0x2000003c

08003680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003684:	480d      	ldr	r0, [pc, #52]	; (80036bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003686:	490e      	ldr	r1, [pc, #56]	; (80036c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800369c:	4c0b      	ldr	r4, [pc, #44]	; (80036cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036aa:	f7fe fe3b 	bl	8002324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ae:	f003 fee5 	bl	800747c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b2:	f7fd ffd9 	bl	8001668 <main>
  bx  lr    
 80036b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c0:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80036c4:	0800a6a4 	.word	0x0800a6a4
  ldr r2, =_sbss
 80036c8:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80036cc:	20000684 	.word	0x20000684

080036d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <ADC_IRQHandler>
	...

080036d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <HAL_Init+0x40>)
 80036de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_Init+0x40>)
 80036ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_Init+0x40>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f000 f92b 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003702:	2000      	movs	r0, #0
 8003704:	f000 f808 	bl	8003718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003708:	f7fe fce6 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00

08003718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_InitTick+0x54>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_InitTick+0x58>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800372e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f943 	bl	80039c2 <HAL_SYSTICK_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e00e      	b.n	8003764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d80a      	bhi.n	8003762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800374c:	2200      	movs	r2, #0
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	f000 f90b 	bl	800396e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003758:	4a06      	ldr	r2, [pc, #24]	; (8003774 <HAL_InitTick+0x5c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000038 	.word	0x20000038
 8003770:	20000050 	.word	0x20000050
 8003774:	2000004c 	.word	0x2000004c

08003778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_IncTick+0x20>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_IncTick+0x24>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4413      	add	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_IncTick+0x24>)
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000050 	.word	0x20000050
 800379c:	20000670 	.word	0x20000670

080037a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return uwTick;
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_GetTick+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000670 	.word	0x20000670

080037b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	60d3      	str	r3, [r2, #12]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	; (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003924:	d301      	bcc.n	800392a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003926:	2301      	movs	r3, #1
 8003928:	e00f      	b.n	800394a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <SysTick_Config+0x40>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003932:	210f      	movs	r1, #15
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	f7ff ff8e 	bl	8003858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SysTick_Config+0x40>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <SysTick_Config+0x40>)
 8003944:	2207      	movs	r2, #7
 8003946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	e000e010 	.word	0xe000e010

08003958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff29 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003980:	f7ff ff3e 	bl	8003800 <__NVIC_GetPriorityGrouping>
 8003984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7ff ff8e 	bl	80038ac <NVIC_EncodePriority>
 8003990:	4602      	mov	r2, r0
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff5d 	bl	8003858 <__NVIC_SetPriority>
}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff31 	bl	800381c <__NVIC_EnableIRQ>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffa2 	bl	8003914 <SysTick_Config>
 80039d0:	4603      	mov	r3, r0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e159      	b.n	8003cac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f8:	2201      	movs	r2, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f040 8148 	bne.w	8003ca6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d005      	beq.n	8003a2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d130      	bne.n	8003a90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	2203      	movs	r2, #3
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a64:	2201      	movs	r2, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 0201 	and.w	r2, r3, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d017      	beq.n	8003acc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d123      	bne.n	8003b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	220f      	movs	r2, #15
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	08da      	lsrs	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3208      	adds	r2, #8
 8003b1a:	69b9      	ldr	r1, [r7, #24]
 8003b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0203 	and.w	r2, r3, #3
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a2 	beq.w	8003ca6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <HAL_GPIO_Init+0x2e8>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4a56      	ldr	r2, [pc, #344]	; (8003cc4 <HAL_GPIO_Init+0x2e8>)
 8003b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <HAL_GPIO_Init+0x2e8>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7e:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_GPIO_Init+0x2ec>)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	220f      	movs	r2, #15
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a49      	ldr	r2, [pc, #292]	; (8003ccc <HAL_GPIO_Init+0x2f0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x202>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a48      	ldr	r2, [pc, #288]	; (8003cd0 <HAL_GPIO_Init+0x2f4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x1fe>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a47      	ldr	r2, [pc, #284]	; (8003cd4 <HAL_GPIO_Init+0x2f8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a46      	ldr	r2, [pc, #280]	; (8003cd8 <HAL_GPIO_Init+0x2fc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x1f6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a45      	ldr	r2, [pc, #276]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x1f2>
 8003bca:	2304      	movs	r3, #4
 8003bcc:	e008      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bce:	2307      	movs	r3, #7
 8003bd0:	e006      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e004      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e002      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bde:	2300      	movs	r3, #0
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	f002 0203 	and.w	r2, r2, #3
 8003be6:	0092      	lsls	r2, r2, #2
 8003be8:	4093      	lsls	r3, r2
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf0:	4935      	ldr	r1, [pc, #212]	; (8003cc8 <HAL_GPIO_Init+0x2ec>)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bfe:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c22:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c28:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c7c:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca0:	4a0f      	ldr	r2, [pc, #60]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	f67f aea2 	bls.w	80039f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40013800 	.word	0x40013800
 8003ccc:	40020000 	.word	0x40020000
 8003cd0:	40020400 	.word	0x40020400
 8003cd4:	40020800 	.word	0x40020800
 8003cd8:	40020c00 	.word	0x40020c00
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40013c00 	.word	0x40013c00

08003ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
 8003d00:	e001      	b.n	8003d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d30:	e003      	b.n	8003d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d32:	887b      	ldrh	r3, [r7, #2]
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e171      	b.n	800403e <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d12c      	bne.n	8003dc0 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a77      	ldr	r2, [pc, #476]	; (8003f50 <HAL_I2C_Init+0x208>)
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a77      	ldr	r2, [pc, #476]	; (8003f54 <HAL_I2C_Init+0x20c>)
 8003d78:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a76      	ldr	r2, [pc, #472]	; (8003f58 <HAL_I2C_Init+0x210>)
 8003d7e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a76      	ldr	r2, [pc, #472]	; (8003f5c <HAL_I2C_Init+0x214>)
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a75      	ldr	r2, [pc, #468]	; (8003f60 <HAL_I2C_Init+0x218>)
 8003d8a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a75      	ldr	r2, [pc, #468]	; (8003f64 <HAL_I2C_Init+0x21c>)
 8003d90:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a74      	ldr	r2, [pc, #464]	; (8003f68 <HAL_I2C_Init+0x220>)
 8003d96:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a74      	ldr	r2, [pc, #464]	; (8003f6c <HAL_I2C_Init+0x224>)
 8003d9c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a73      	ldr	r2, [pc, #460]	; (8003f70 <HAL_I2C_Init+0x228>)
 8003da2:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a73      	ldr	r2, [pc, #460]	; (8003f74 <HAL_I2C_Init+0x22c>)
 8003da8:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a70      	ldr	r2, [pc, #448]	; (8003f78 <HAL_I2C_Init+0x230>)
 8003db6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	; 0x24
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003df8:	f001 fc2a 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4a5e      	ldr	r2, [pc, #376]	; (8003f7c <HAL_I2C_Init+0x234>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d807      	bhi.n	8003e18 <HAL_I2C_Init+0xd0>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a5d      	ldr	r2, [pc, #372]	; (8003f80 <HAL_I2C_Init+0x238>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf94      	ite	ls
 8003e10:	2301      	movls	r3, #1
 8003e12:	2300      	movhi	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e006      	b.n	8003e26 <HAL_I2C_Init+0xde>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a5a      	ldr	r2, [pc, #360]	; (8003f84 <HAL_I2C_Init+0x23c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bf94      	ite	ls
 8003e20:	2301      	movls	r3, #1
 8003e22:	2300      	movhi	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e107      	b.n	800403e <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a55      	ldr	r2, [pc, #340]	; (8003f88 <HAL_I2C_Init+0x240>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	0c9b      	lsrs	r3, r3, #18
 8003e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4a47      	ldr	r2, [pc, #284]	; (8003f7c <HAL_I2C_Init+0x234>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d802      	bhi.n	8003e68 <HAL_I2C_Init+0x120>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3301      	adds	r3, #1
 8003e66:	e009      	b.n	8003e7c <HAL_I2C_Init+0x134>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	4a46      	ldr	r2, [pc, #280]	; (8003f8c <HAL_I2C_Init+0x244>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4939      	ldr	r1, [pc, #228]	; (8003f7c <HAL_I2C_Init+0x234>)
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d819      	bhi.n	8003ed0 <HAL_I2C_Init+0x188>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e59      	subs	r1, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003eb0:	400b      	ands	r3, r1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_I2C_Init+0x184>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1e59      	subs	r1, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	e071      	b.n	8003fb0 <HAL_I2C_Init+0x268>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	e06f      	b.n	8003fb0 <HAL_I2C_Init+0x268>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d111      	bne.n	8003efc <HAL_I2C_Init+0x1b4>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1e58      	subs	r0, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	440b      	add	r3, r1
 8003ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eea:	3301      	adds	r3, #1
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e012      	b.n	8003f22 <HAL_I2C_Init+0x1da>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Init+0x1e2>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e042      	b.n	8003fb0 <HAL_I2C_Init+0x268>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d12e      	bne.n	8003f90 <HAL_I2C_Init+0x248>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1e58      	subs	r0, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	440b      	add	r3, r1
 8003f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4e:	e02f      	b.n	8003fb0 <HAL_I2C_Init+0x268>
 8003f50:	08004689 	.word	0x08004689
 8003f54:	0800469d 	.word	0x0800469d
 8003f58:	080046b1 	.word	0x080046b1
 8003f5c:	080046c5 	.word	0x080046c5
 8003f60:	080046f5 	.word	0x080046f5
 8003f64:	08004709 	.word	0x08004709
 8003f68:	0800471d 	.word	0x0800471d
 8003f6c:	08004731 	.word	0x08004731
 8003f70:	08004745 	.word	0x08004745
 8003f74:	080046d9 	.word	0x080046d9
 8003f78:	08001589 	.word	0x08001589
 8003f7c:	000186a0 	.word	0x000186a0
 8003f80:	001e847f 	.word	0x001e847f
 8003f84:	003d08ff 	.word	0x003d08ff
 8003f88:	431bde83 	.word	0x431bde83
 8003f8c:	10624dd3 	.word	0x10624dd3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e58      	subs	r0, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	0099      	lsls	r1, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	6809      	ldr	r1, [r1, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6911      	ldr	r1, [r2, #16]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68d2      	ldr	r2, [r2, #12]
 8003fea:	4311      	orrs	r1, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop

08004048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	817b      	strh	r3, [r7, #10]
 800405a:	460b      	mov	r3, r1
 800405c:	813b      	strh	r3, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004062:	f7ff fb9d 	bl	80037a0 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b20      	cmp	r3, #32
 8004072:	f040 80d9 	bne.w	8004228 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2319      	movs	r3, #25
 800407c:	2201      	movs	r2, #1
 800407e:	496d      	ldr	r1, [pc, #436]	; (8004234 <HAL_I2C_Mem_Write+0x1ec>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fce7 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	e0cc      	b.n	800422a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2C_Mem_Write+0x56>
 800409a:	2302      	movs	r3, #2
 800409c:	e0c5      	b.n	800422a <HAL_I2C_Mem_Write+0x1e2>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d007      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2221      	movs	r2, #33	; 0x21
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2240      	movs	r2, #64	; 0x40
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_I2C_Mem_Write+0x1f0>)
 8004104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004106:	88f8      	ldrh	r0, [r7, #6]
 8004108:	893a      	ldrh	r2, [r7, #8]
 800410a:	8979      	ldrh	r1, [r7, #10]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4603      	mov	r3, r0
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fb1e 	bl	8004758 <I2C_RequestMemoryWrite>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d052      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e081      	b.n	800422a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fd68 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	2b04      	cmp	r3, #4
 800413c:	d107      	bne.n	800414e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06b      	b.n	800422a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d11b      	bne.n	80041c8 <HAL_I2C_Mem_Write+0x180>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d017      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1aa      	bne.n	8004126 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fd54 	bl	8004c82 <I2C_WaitOnBTFFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d107      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e016      	b.n	800422a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	00100002 	.word	0x00100002
 8004238:	ffff0000 	.word	0xffff0000

0800423c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004256:	f7ff faa3 	bl	80037a0 <HAL_GetTick>
 800425a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	f040 8208 	bne.w	800467a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2319      	movs	r3, #25
 8004270:	2201      	movs	r2, #1
 8004272:	497b      	ldr	r1, [pc, #492]	; (8004460 <HAL_I2C_Mem_Read+0x224>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fbed 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
 8004282:	e1fb      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_I2C_Mem_Read+0x56>
 800428e:	2302      	movs	r3, #2
 8004290:	e1f4      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d007      	beq.n	80042b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2222      	movs	r2, #34	; 0x22
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a5b      	ldr	r2, [pc, #364]	; (8004464 <HAL_I2C_Mem_Read+0x228>)
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042fa:	88f8      	ldrh	r0, [r7, #6]
 80042fc:	893a      	ldrh	r2, [r7, #8]
 80042fe:	8979      	ldrh	r1, [r7, #10]
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	4603      	mov	r3, r0
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 faba 	bl	8004884 <I2C_RequestMemoryRead>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e1b0      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d113      	bne.n	800434a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	623b      	str	r3, [r7, #32]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e184      	b.n	8004654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	2b01      	cmp	r3, #1
 8004350:	d11b      	bne.n	800438a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e164      	b.n	8004654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	2b02      	cmp	r3, #2
 8004390:	d11b      	bne.n	80043ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	e144      	b.n	8004654 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043e0:	e138      	b.n	8004654 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	f200 80f1 	bhi.w	80045ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d123      	bne.n	800443c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fc83 	bl	8004d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e139      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800443a:	e10b      	b.n	8004654 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b02      	cmp	r3, #2
 8004442:	d14e      	bne.n	80044e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2200      	movs	r2, #0
 800444c:	4906      	ldr	r1, [pc, #24]	; (8004468 <HAL_I2C_Mem_Read+0x22c>)
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fb00 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e10e      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
 800445e:	bf00      	nop
 8004460:	00100002 	.word	0x00100002
 8004464:	ffff0000 	.word	0xffff0000
 8004468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044e0:	e0b8      	b.n	8004654 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	2200      	movs	r2, #0
 80044ea:	4966      	ldr	r1, [pc, #408]	; (8004684 <HAL_I2C_Mem_Read+0x448>)
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fab1 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0bf      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	2200      	movs	r2, #0
 8004546:	494f      	ldr	r1, [pc, #316]	; (8004684 <HAL_I2C_Mem_Read+0x448>)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fa83 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e091      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045cc:	e042      	b.n	8004654 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fb96 	bl	8004d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e04c      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d118      	bne.n	8004654 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	f47f aec2 	bne.w	80043e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3728      	adds	r7, #40	; 0x28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00010004 	.word	0x00010004

08004688 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
 80046e4:	4613      	mov	r3, r2
 80046e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4603      	mov	r3, r0
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	460b      	mov	r3, r1
 800476c:	813b      	strh	r3, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2200      	movs	r2, #0
 800478a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f960 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a8:	d103      	bne.n	80047b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e05f      	b.n	8004876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047b6:	897b      	ldrh	r3, [r7, #10]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	6a3a      	ldr	r2, [r7, #32]
 80047ca:	492d      	ldr	r1, [pc, #180]	; (8004880 <I2C_RequestMemoryWrite+0x128>)
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f998 	bl	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04c      	b.n	8004876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	6a39      	ldr	r1, [r7, #32]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fa02 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b04      	cmp	r3, #4
 8004808:	d107      	bne.n	800481a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e02b      	b.n	8004876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	e021      	b.n	8004874 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004830:	893b      	ldrh	r3, [r7, #8]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	b29b      	uxth	r3, r3
 8004836:	b2da      	uxtb	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	6a39      	ldr	r1, [r7, #32]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f9dc 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b04      	cmp	r3, #4
 8004854:	d107      	bne.n	8004866 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e005      	b.n	8004876 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800486a:	893b      	ldrh	r3, [r7, #8]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	00010002 	.word	0x00010002

08004884 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	461a      	mov	r2, r3
 8004892:	4603      	mov	r3, r0
 8004894:	817b      	strh	r3, [r7, #10]
 8004896:	460b      	mov	r3, r1
 8004898:	813b      	strh	r3, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f8c2 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e4:	d103      	bne.n	80048ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0aa      	b.n	8004a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f2:	897b      	ldrh	r3, [r7, #10]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	4952      	ldr	r1, [pc, #328]	; (8004a50 <I2C_RequestMemoryRead+0x1cc>)
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f8fa 	bl	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e097      	b.n	8004a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	6a39      	ldr	r1, [r7, #32]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f964 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b04      	cmp	r3, #4
 8004944:	d107      	bne.n	8004956 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e076      	b.n	8004a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d105      	bne.n	800496c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004960:	893b      	ldrh	r3, [r7, #8]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	611a      	str	r2, [r3, #16]
 800496a:	e021      	b.n	80049b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800496c:	893b      	ldrh	r3, [r7, #8]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b29b      	uxth	r3, r3
 8004972:	b2da      	uxtb	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497c:	6a39      	ldr	r1, [r7, #32]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f93e 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b04      	cmp	r3, #4
 8004990:	d107      	bne.n	80049a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e050      	b.n	8004a48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049a6:	893b      	ldrh	r3, [r7, #8]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b2:	6a39      	ldr	r1, [r7, #32]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f923 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d107      	bne.n	80049d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e035      	b.n	8004a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f82b 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d103      	bne.n	8004a1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e013      	b.n	8004a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a20:	897b      	ldrh	r3, [r7, #10]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	6a3a      	ldr	r2, [r7, #32]
 8004a34:	4906      	ldr	r1, [pc, #24]	; (8004a50 <I2C_RequestMemoryRead+0x1cc>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f863 	bl	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00010002 	.word	0x00010002

08004a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a64:	e025      	b.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d021      	beq.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7fe fe97 	bl	80037a0 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e023      	b.n	8004afa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d10d      	bne.n	8004ad8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	e00c      	b.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d0b6      	beq.n	8004a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b10:	e051      	b.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b20:	d123      	bne.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e046      	b.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d021      	beq.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fe fe15 	bl	80037a0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e020      	b.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10c      	bne.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e00b      	b.n	8004bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d18d      	bne.n	8004b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c0c:	e02d      	b.n	8004c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f8ce 	bl	8004db0 <I2C_IsAcknowledgeFailed>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e02d      	b.n	8004c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d021      	beq.n	8004c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fe fdbb 	bl	80037a0 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d116      	bne.n	8004c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e007      	b.n	8004c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d1ca      	bne.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c8e:	e02d      	b.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f88d 	bl	8004db0 <I2C_IsAcknowledgeFailed>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e02d      	b.n	8004cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca6:	d021      	beq.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca8:	f7fe fd7a 	bl	80037a0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e007      	b.n	8004cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d1ca      	bne.n	8004c90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d10:	e042      	b.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d119      	bne.n	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e029      	b.n	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7fe fd24 	bl	80037a0 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d116      	bne.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e007      	b.n	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d1b5      	bne.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d11b      	bne.n	8004e00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f043 0204 	orr.w	r2, r3, #4
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e264      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d075      	beq.n	8004f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e2e:	4ba3      	ldr	r3, [pc, #652]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d00c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3a:	4ba0      	ldr	r3, [pc, #640]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d112      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b9d      	ldr	r3, [pc, #628]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	4b99      	ldr	r3, [pc, #612]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05b      	beq.n	8004f18 <HAL_RCC_OscConfig+0x108>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d157      	bne.n	8004f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e23f      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x74>
 8004e76:	4b91      	ldr	r3, [pc, #580]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a90      	ldr	r2, [pc, #576]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e01d      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x98>
 8004e8e:	4b8b      	ldr	r3, [pc, #556]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a8a      	ldr	r2, [pc, #552]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b88      	ldr	r3, [pc, #544]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a87      	ldr	r2, [pc, #540]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004ea8:	4b84      	ldr	r3, [pc, #528]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a83      	ldr	r2, [pc, #524]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b81      	ldr	r3, [pc, #516]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a80      	ldr	r2, [pc, #512]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fc6a 	bl	80037a0 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fe fc66 	bl	80037a0 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e204      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xc0>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fc56 	bl	80037a0 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fe fc52 	bl	80037a0 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1f0      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	4b6c      	ldr	r3, [pc, #432]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xe8>
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d063      	beq.n	8004fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f32:	4b62      	ldr	r3, [pc, #392]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d11c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3e:	4b5f      	ldr	r3, [pc, #380]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	4b5c      	ldr	r3, [pc, #368]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e1c4      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f62:	4b56      	ldr	r3, [pc, #344]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4952      	ldr	r1, [pc, #328]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	e03a      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f80:	4b4f      	ldr	r3, [pc, #316]	; (80050c0 <HAL_RCC_OscConfig+0x2b0>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fe fc0b 	bl	80037a0 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f8e:	f7fe fc07 	bl	80037a0 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e1a5      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa0:	4b46      	ldr	r3, [pc, #280]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b43      	ldr	r3, [pc, #268]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4940      	ldr	r1, [pc, #256]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	e015      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_OscConfig+0x2b0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fe fbea 	bl	80037a0 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fe fbe6 	bl	80037a0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e184      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d030      	beq.n	800505c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d016      	beq.n	8005030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_RCC_OscConfig+0x2b4>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fe fbca 	bl	80037a0 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005010:	f7fe fbc6 	bl	80037a0 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e164      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005022:	4b26      	ldr	r3, [pc, #152]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x200>
 800502e:	e015      	b.n	800505c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_OscConfig+0x2b4>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005036:	f7fe fbb3 	bl	80037a0 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503e:	f7fe fbaf 	bl	80037a0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e14d      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f0      	bne.n	800503e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80a0 	beq.w	80051aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCC_OscConfig+0x2b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d121      	bne.n	80050ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_RCC_OscConfig+0x2b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <HAL_RCC_OscConfig+0x2b8>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b2:	f7fe fb75 	bl	80037a0 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	e011      	b.n	80050de <HAL_RCC_OscConfig+0x2ce>
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	42470000 	.word	0x42470000
 80050c4:	42470e80 	.word	0x42470e80
 80050c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7fe fb68 	bl	80037a0 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e106      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b85      	ldr	r3, [pc, #532]	; (80052f4 <HAL_RCC_OscConfig+0x4e4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d106      	bne.n	8005100 <HAL_RCC_OscConfig+0x2f0>
 80050f2:	4b81      	ldr	r3, [pc, #516]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a80      	ldr	r2, [pc, #512]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	e01c      	b.n	800513a <HAL_RCC_OscConfig+0x32a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b05      	cmp	r3, #5
 8005106:	d10c      	bne.n	8005122 <HAL_RCC_OscConfig+0x312>
 8005108:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800510e:	f043 0304 	orr.w	r3, r3, #4
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
 8005114:	4b78      	ldr	r3, [pc, #480]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a77      	ldr	r2, [pc, #476]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
 8005120:	e00b      	b.n	800513a <HAL_RCC_OscConfig+0x32a>
 8005122:	4b75      	ldr	r3, [pc, #468]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a74      	ldr	r2, [pc, #464]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
 800512e:	4b72      	ldr	r3, [pc, #456]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a71      	ldr	r2, [pc, #452]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d015      	beq.n	800516e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7fe fb2d 	bl	80037a0 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fe fb29 	bl	80037a0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0c5      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	4b65      	ldr	r3, [pc, #404]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ee      	beq.n	800514a <HAL_RCC_OscConfig+0x33a>
 800516c:	e014      	b.n	8005198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516e:	f7fe fb17 	bl	80037a0 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005174:	e00a      	b.n	800518c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fe fb13 	bl	80037a0 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e0af      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518c:	4b5a      	ldr	r3, [pc, #360]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ee      	bne.n	8005176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4b56      	ldr	r3, [pc, #344]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	4a55      	ldr	r2, [pc, #340]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 809b 	beq.w	80052ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b4:	4b50      	ldr	r3, [pc, #320]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d05c      	beq.n	800527a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d141      	bne.n	800524c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c8:	4b4c      	ldr	r3, [pc, #304]	; (80052fc <HAL_RCC_OscConfig+0x4ec>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fe fae7 	bl	80037a0 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d6:	f7fe fae3 	bl	80037a0 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e081      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e8:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f0      	bne.n	80051d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	019b      	lsls	r3, r3, #6
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	3b01      	subs	r3, #1
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	4937      	ldr	r1, [pc, #220]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521e:	4b37      	ldr	r3, [pc, #220]	; (80052fc <HAL_RCC_OscConfig+0x4ec>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fe fabc 	bl	80037a0 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522c:	f7fe fab8 	bl	80037a0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e056      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523e:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x41c>
 800524a:	e04e      	b.n	80052ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524c:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <HAL_RCC_OscConfig+0x4ec>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fe faa5 	bl	80037a0 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525a:	f7fe faa1 	bl	80037a0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e03f      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526c:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0x44a>
 8005278:	e037      	b.n	80052ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e032      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005286:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d028      	beq.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d121      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d11a      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	3b01      	subs	r3, #1
 80052d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d001      	beq.n	80052ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40007000 	.word	0x40007000
 80052f8:	40023800 	.word	0x40023800
 80052fc:	42470060 	.word	0x42470060

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0cc      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b68      	ldr	r3, [pc, #416]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d90c      	bls.n	800533c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b65      	ldr	r3, [pc, #404]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b63      	ldr	r3, [pc, #396]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0b8      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005354:	4b59      	ldr	r3, [pc, #356]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a58      	ldr	r2, [pc, #352]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800535e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800536c:	4b53      	ldr	r3, [pc, #332]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a52      	ldr	r2, [pc, #328]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005378:	4b50      	ldr	r3, [pc, #320]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	494d      	ldr	r1, [pc, #308]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d044      	beq.n	8005420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b47      	ldr	r3, [pc, #284]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d119      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e07f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d003      	beq.n	80053be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053be:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e06f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ce:	4b3b      	ldr	r3, [pc, #236]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e067      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053de:	4b37      	ldr	r3, [pc, #220]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 0203 	bic.w	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4934      	ldr	r1, [pc, #208]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f0:	f7fe f9d6 	bl	80037a0 <HAL_GetTick>
 80053f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f6:	e00a      	b.n	800540e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f8:	f7fe f9d2 	bl	80037a0 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	; 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e04f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 020c 	and.w	r2, r3, #12
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	429a      	cmp	r2, r3
 800541e:	d1eb      	bne.n	80053f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d20c      	bcs.n	8005448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e032      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4916      	ldr	r1, [pc, #88]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005472:	4b12      	ldr	r3, [pc, #72]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	490e      	ldr	r1, [pc, #56]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005486:	f000 f821 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 800548a:	4602      	mov	r2, r0
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	490a      	ldr	r1, [pc, #40]	; (80054c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	5ccb      	ldrb	r3, [r1, r3]
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	4a09      	ldr	r2, [pc, #36]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 80054a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe f936 	bl	8003718 <HAL_InitTick>

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023c00 	.word	0x40023c00
 80054bc:	40023800 	.word	0x40023800
 80054c0:	0800a298 	.word	0x0800a298
 80054c4:	20000038 	.word	0x20000038
 80054c8:	2000004c 	.word	0x2000004c

080054cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054cc:	b5b0      	push	{r4, r5, r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054d2:	2100      	movs	r1, #0
 80054d4:	6079      	str	r1, [r7, #4]
 80054d6:	2100      	movs	r1, #0
 80054d8:	60f9      	str	r1, [r7, #12]
 80054da:	2100      	movs	r1, #0
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054de:	2100      	movs	r1, #0
 80054e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e2:	4952      	ldr	r1, [pc, #328]	; (800562c <HAL_RCC_GetSysClockFreq+0x160>)
 80054e4:	6889      	ldr	r1, [r1, #8]
 80054e6:	f001 010c 	and.w	r1, r1, #12
 80054ea:	2908      	cmp	r1, #8
 80054ec:	d00d      	beq.n	800550a <HAL_RCC_GetSysClockFreq+0x3e>
 80054ee:	2908      	cmp	r1, #8
 80054f0:	f200 8094 	bhi.w	800561c <HAL_RCC_GetSysClockFreq+0x150>
 80054f4:	2900      	cmp	r1, #0
 80054f6:	d002      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0x32>
 80054f8:	2904      	cmp	r1, #4
 80054fa:	d003      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x38>
 80054fc:	e08e      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054fe:	4b4c      	ldr	r3, [pc, #304]	; (8005630 <HAL_RCC_GetSysClockFreq+0x164>)
 8005500:	60bb      	str	r3, [r7, #8]
       break;
 8005502:	e08e      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005504:	4b4b      	ldr	r3, [pc, #300]	; (8005634 <HAL_RCC_GetSysClockFreq+0x168>)
 8005506:	60bb      	str	r3, [r7, #8]
      break;
 8005508:	e08b      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800550a:	4948      	ldr	r1, [pc, #288]	; (800562c <HAL_RCC_GetSysClockFreq+0x160>)
 800550c:	6849      	ldr	r1, [r1, #4]
 800550e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005512:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005514:	4945      	ldr	r1, [pc, #276]	; (800562c <HAL_RCC_GetSysClockFreq+0x160>)
 8005516:	6849      	ldr	r1, [r1, #4]
 8005518:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800551c:	2900      	cmp	r1, #0
 800551e:	d024      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005520:	4942      	ldr	r1, [pc, #264]	; (800562c <HAL_RCC_GetSysClockFreq+0x160>)
 8005522:	6849      	ldr	r1, [r1, #4]
 8005524:	0989      	lsrs	r1, r1, #6
 8005526:	4608      	mov	r0, r1
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005530:	f04f 0500 	mov.w	r5, #0
 8005534:	ea00 0204 	and.w	r2, r0, r4
 8005538:	ea01 0305 	and.w	r3, r1, r5
 800553c:	493d      	ldr	r1, [pc, #244]	; (8005634 <HAL_RCC_GetSysClockFreq+0x168>)
 800553e:	fb01 f003 	mul.w	r0, r1, r3
 8005542:	2100      	movs	r1, #0
 8005544:	fb01 f102 	mul.w	r1, r1, r2
 8005548:	1844      	adds	r4, r0, r1
 800554a:	493a      	ldr	r1, [pc, #232]	; (8005634 <HAL_RCC_GetSysClockFreq+0x168>)
 800554c:	fba2 0101 	umull	r0, r1, r2, r1
 8005550:	1863      	adds	r3, r4, r1
 8005552:	4619      	mov	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	461a      	mov	r2, r3
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	f7fb fb7c 	bl	8000c58 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4613      	mov	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e04a      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556a:	4b30      	ldr	r3, [pc, #192]	; (800562c <HAL_RCC_GetSysClockFreq+0x160>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800557a:	f04f 0100 	mov.w	r1, #0
 800557e:	ea02 0400 	and.w	r4, r2, r0
 8005582:	ea03 0501 	and.w	r5, r3, r1
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	014b      	lsls	r3, r1, #5
 8005594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005598:	0142      	lsls	r2, r0, #5
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	1b00      	subs	r0, r0, r4
 80055a0:	eb61 0105 	sbc.w	r1, r1, r5
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	018b      	lsls	r3, r1, #6
 80055ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055b2:	0182      	lsls	r2, r0, #6
 80055b4:	1a12      	subs	r2, r2, r0
 80055b6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ba:	f04f 0000 	mov.w	r0, #0
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	00d9      	lsls	r1, r3, #3
 80055c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c8:	00d0      	lsls	r0, r2, #3
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	1912      	adds	r2, r2, r4
 80055d0:	eb45 0303 	adc.w	r3, r5, r3
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	0299      	lsls	r1, r3, #10
 80055de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055e2:	0290      	lsls	r0, r2, #10
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	f7fb fb30 	bl	8000c58 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_RCC_GetSysClockFreq+0x160>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	3301      	adds	r3, #1
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	60bb      	str	r3, [r7, #8]
      break;
 800561a:	e002      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <HAL_RCC_GetSysClockFreq+0x164>)
 800561e:	60bb      	str	r3, [r7, #8]
      break;
 8005620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005622:	68bb      	ldr	r3, [r7, #8]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bdb0      	pop	{r4, r5, r7, pc}
 800562c:	40023800 	.word	0x40023800
 8005630:	00f42400 	.word	0x00f42400
 8005634:	017d7840 	.word	0x017d7840

08005638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800563c:	4b03      	ldr	r3, [pc, #12]	; (800564c <HAL_RCC_GetHCLKFreq+0x14>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000038 	.word	0x20000038

08005650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005654:	f7ff fff0 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	0a9b      	lsrs	r3, r3, #10
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4903      	ldr	r1, [pc, #12]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40023800 	.word	0x40023800
 8005674:	0800a2a8 	.word	0x0800a2a8

08005678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800567c:	f7ff ffdc 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0b5b      	lsrs	r3, r3, #13
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	; (800569c <HAL_RCC_GetPCLK2Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800
 800569c:	0800a2a8 	.word	0x0800a2a8

080056a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d038      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056c8:	4b68      	ldr	r3, [pc, #416]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ce:	f7fe f867 	bl	80037a0 <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056d6:	f7fe f863 	bl	80037a0 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e0bd      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056e8:	4b61      	ldr	r3, [pc, #388]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	071b      	lsls	r3, r3, #28
 8005706:	495a      	ldr	r1, [pc, #360]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800570e:	4b57      	ldr	r3, [pc, #348]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005710:	2201      	movs	r2, #1
 8005712:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005714:	f7fe f844 	bl	80037a0 <HAL_GetTick>
 8005718:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800571a:	e008      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800571c:	f7fe f840 	bl	80037a0 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e09a      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800572e:	4b50      	ldr	r3, [pc, #320]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8083 	beq.w	800584e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	4b48      	ldr	r3, [pc, #288]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	4a47      	ldr	r2, [pc, #284]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005756:	6413      	str	r3, [r2, #64]	; 0x40
 8005758:	4b45      	ldr	r3, [pc, #276]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005764:	4b43      	ldr	r3, [pc, #268]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a42      	ldr	r2, [pc, #264]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800576a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005770:	f7fe f816 	bl	80037a0 <HAL_GetTick>
 8005774:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005778:	f7fe f812 	bl	80037a0 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e06c      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800578a:	4b3a      	ldr	r3, [pc, #232]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005796:	4b36      	ldr	r3, [pc, #216]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d02f      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d028      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057b4:	4b2e      	ldr	r3, [pc, #184]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057be:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057c4:	4b2c      	ldr	r3, [pc, #176]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057ca:	4a29      	ldr	r2, [pc, #164]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057d0:	4b27      	ldr	r3, [pc, #156]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d114      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fd ffe0 	bl	80037a0 <HAL_GetTick>
 80057e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e2:	e00a      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e4:	f7fd ffdc 	bl	80037a0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e034      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fa:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0ee      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005812:	d10d      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005828:	4911      	ldr	r1, [pc, #68]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
 800582e:	e005      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005836:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800583a:	6093      	str	r3, [r2, #8]
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005848:	4909      	ldr	r1, [pc, #36]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584a:	4313      	orrs	r3, r2
 800584c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	7d1a      	ldrb	r2, [r3, #20]
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005860:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	42470068 	.word	0x42470068
 8005870:	40023800 	.word	0x40023800
 8005874:	40007000 	.word	0x40007000
 8005878:	42470e40 	.word	0x42470e40
 800587c:	424711e0 	.word	0x424711e0

08005880 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e083      	b.n	800599a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	7f5b      	ldrb	r3, [r3, #29]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fc fc02 	bl	80020ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	22ca      	movs	r2, #202	; 0xca
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2253      	movs	r2, #83	; 0x53
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f897 	bl	80059f2 <RTC_EnterInitMode>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	22ff      	movs	r2, #255	; 0xff
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2204      	movs	r2, #4
 80058d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e05e      	b.n	800599a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6899      	ldr	r1, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68d2      	ldr	r2, [r2, #12]
 8005916:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6919      	ldr	r1, [r3, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	041a      	lsls	r2, r3, #16
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f829 	bl	80059a2 <HAL_RTC_WaitForSynchro>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	22ff      	movs	r2, #255	; 0xff
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2204      	movs	r2, #4
 8005962:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e018      	b.n	800599a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	22ff      	movs	r2, #255	; 0xff
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059be:	f7fd feef 	bl	80037a0 <HAL_GetTick>
 80059c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059c4:	e009      	b.n	80059da <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059c6:	f7fd feeb 	bl	80037a0 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059d4:	d901      	bls.n	80059da <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e007      	b.n	80059ea <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0ee      	beq.n	80059c6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d119      	bne.n	8005a40 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f04f 32ff 	mov.w	r2, #4294967295
 8005a14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a16:	f7fd fec3 	bl	80037a0 <HAL_GetTick>
 8005a1a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a1c:	e009      	b.n	8005a32 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a1e:	f7fd febf 	bl	80037a0 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a2c:	d901      	bls.n	8005a32 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e007      	b.n	8005a42 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ee      	beq.n	8005a1e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e04c      	b.n	8005af8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d111      	bne.n	8005a8e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 f910 	bl	8006c98 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_TIM_Base_Init+0xb4>)
 8005a84:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f000 fe2d 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	08002615 	.word	0x08002615

08005b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d001      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e044      	b.n	8005ba6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d018      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x6c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b46:	d013      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x6c>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00e      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x6c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <HAL_TIM_Base_Start_IT+0xb8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d009      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x6c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d004      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x6c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d111      	bne.n	8005b94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d010      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b92:	e007      	b.n	8005ba4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40014000 	.word	0x40014000

08005bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e04c      	b.n	8005c74 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d111      	bne.n	8005c0a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 f852 	bl	8006c98 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a1f      	ldr	r2, [pc, #124]	; (8005c7c <HAL_TIM_PWM_Init+0xb4>)
 8005c00:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 fd6f 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08005c81 	.word	0x08005c81

08005c80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <HAL_TIM_PWM_Start+0x24>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	bf14      	ite	ne
 8005cb0:	2301      	movne	r3, #1
 8005cb2:	2300      	moveq	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e022      	b.n	8005cfe <HAL_TIM_PWM_Start+0x6a>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d109      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0x3e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	bf14      	ite	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	2300      	moveq	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	e015      	b.n	8005cfe <HAL_TIM_PWM_Start+0x6a>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d109      	bne.n	8005cec <HAL_TIM_PWM_Start+0x58>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	e008      	b.n	8005cfe <HAL_TIM_PWM_Start+0x6a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	bf14      	ite	ne
 8005cf8:	2301      	movne	r3, #1
 8005cfa:	2300      	moveq	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e068      	b.n	8005dd8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d104      	bne.n	8005d16 <HAL_TIM_PWM_Start+0x82>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d14:	e013      	b.n	8005d3e <HAL_TIM_PWM_Start+0xaa>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d104      	bne.n	8005d26 <HAL_TIM_PWM_Start+0x92>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d24:	e00b      	b.n	8005d3e <HAL_TIM_PWM_Start+0xaa>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d104      	bne.n	8005d36 <HAL_TIM_PWM_Start+0xa2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d34:	e003      	b.n	8005d3e <HAL_TIM_PWM_Start+0xaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2201      	movs	r2, #1
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 ff80 	bl	8006c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a23      	ldr	r2, [pc, #140]	; (8005de0 <HAL_TIM_PWM_Start+0x14c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_TIM_PWM_Start+0x14c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d018      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x10e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d78:	d013      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x10e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a19      	ldr	r2, [pc, #100]	; (8005de4 <HAL_TIM_PWM_Start+0x150>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x10e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <HAL_TIM_PWM_Start+0x154>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x10e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <HAL_TIM_PWM_Start+0x158>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x10e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <HAL_TIM_PWM_Start+0x15c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d111      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b06      	cmp	r3, #6
 8005db2:	d010      	beq.n	8005dd6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc4:	e007      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40014000 	.word	0x40014000

08005df4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_IC_Start+0x1a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e013      	b.n	8005e36 <HAL_TIM_IC_Start+0x42>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_IC_Start+0x2a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIM_IC_Start+0x42>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_IC_Start+0x3a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e003      	b.n	8005e36 <HAL_TIM_IC_Start+0x42>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <HAL_TIM_IC_Start+0x54>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e013      	b.n	8005e70 <HAL_TIM_IC_Start+0x7c>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d104      	bne.n	8005e58 <HAL_TIM_IC_Start+0x64>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e00b      	b.n	8005e70 <HAL_TIM_IC_Start+0x7c>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d104      	bne.n	8005e68 <HAL_TIM_IC_Start+0x74>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e003      	b.n	8005e70 <HAL_TIM_IC_Start+0x7c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d102      	bne.n	8005e7e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e077      	b.n	8005f72 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_IC_Start+0x9e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e90:	e013      	b.n	8005eba <HAL_TIM_IC_Start+0xc6>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_IC_Start+0xae>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea0:	e00b      	b.n	8005eba <HAL_TIM_IC_Start+0xc6>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_IC_Start+0xbe>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb0:	e003      	b.n	8005eba <HAL_TIM_IC_Start+0xc6>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_IC_Start+0xd6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec8:	e013      	b.n	8005ef2 <HAL_TIM_IC_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_IC_Start+0xe6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ed8:	e00b      	b.n	8005ef2 <HAL_TIM_IC_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_IC_Start+0xf6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee8:	e003      	b.n	8005ef2 <HAL_TIM_IC_Start+0xfe>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fea6 	bl	8006c4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1d      	ldr	r2, [pc, #116]	; (8005f7c <HAL_TIM_IC_Start+0x188>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_TIM_IC_Start+0x148>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f12:	d013      	beq.n	8005f3c <HAL_TIM_IC_Start+0x148>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <HAL_TIM_IC_Start+0x18c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_TIM_IC_Start+0x148>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a18      	ldr	r2, [pc, #96]	; (8005f84 <HAL_TIM_IC_Start+0x190>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_TIM_IC_Start+0x148>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a16      	ldr	r2, [pc, #88]	; (8005f88 <HAL_TIM_IC_Start+0x194>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_TIM_IC_Start+0x148>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a15      	ldr	r2, [pc, #84]	; (8005f8c <HAL_TIM_IC_Start+0x198>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d111      	bne.n	8005f60 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b06      	cmp	r3, #6
 8005f4c:	d010      	beq.n	8005f70 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5e:	e007      	b.n	8005f70 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40000400 	.word	0x40000400
 8005f84:	40000800 	.word	0x40000800
 8005f88:	40000c00 	.word	0x40000c00
 8005f8c:	40014000 	.word	0x40014000

08005f90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0a2      	b.n	80060ea <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d111      	bne.n	8005fd4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fe6d 	bl	8006c98 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d102      	bne.n	8005fcc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a4a      	ldr	r2, [pc, #296]	; (80060f4 <HAL_TIM_Encoder_Init+0x164>)
 8005fca:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f000 fb80 	bl	8006700 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006028:	f023 0303 	bic.w	r3, r3, #3
 800602c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	4313      	orrs	r3, r2
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006046:	f023 030c 	bic.w	r3, r3, #12
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	4313      	orrs	r3, r2
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	011a      	lsls	r2, r3, #4
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	4313      	orrs	r3, r2
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006084:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800608c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	4313      	orrs	r3, r2
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	080026ad 	.word	0x080026ad

080060f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d128      	bne.n	8006160 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d121      	bne.n	8006160 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0202 	mvn.w	r2, #2
 8006124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	e009      	b.n	800615a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b04      	cmp	r3, #4
 800616c:	d128      	bne.n	80061c0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b04      	cmp	r3, #4
 800617a:	d121      	bne.n	80061c0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0204 	mvn.w	r2, #4
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
 80061a4:	e009      	b.n	80061ba <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d128      	bne.n	8006220 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d121      	bne.n	8006220 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0208 	mvn.w	r2, #8
 80061e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
 8006204:	e009      	b.n	800621a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b10      	cmp	r3, #16
 800622c:	d128      	bne.n	8006280 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b10      	cmp	r3, #16
 800623a:	d121      	bne.n	8006280 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0210 	mvn.w	r2, #16
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2208      	movs	r2, #8
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
 8006264:	e009      	b.n	800627a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b01      	cmp	r3, #1
 800628c:	d110      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d109      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0201 	mvn.w	r2, #1
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d110      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d109      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d110      	bne.n	8006310 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d109      	bne.n	8006310 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d110      	bne.n	8006340 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d109      	bne.n	8006340 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0220 	mvn.w	r2, #32
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800635e:	2302      	movs	r3, #2
 8006360:	e0ac      	b.n	80064bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	f200 809f 	bhi.w	80064b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080064b1 	.word	0x080064b1
 8006380:	080064b1 	.word	0x080064b1
 8006384:	080064b1 	.word	0x080064b1
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080064b1 	.word	0x080064b1
 8006390:	080064b1 	.word	0x080064b1
 8006394:	080064b1 	.word	0x080064b1
 8006398:	0800642f 	.word	0x0800642f
 800639c:	080064b1 	.word	0x080064b1
 80063a0:	080064b1 	.word	0x080064b1
 80063a4:	080064b1 	.word	0x080064b1
 80063a8:	0800646f 	.word	0x0800646f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fa24 	bl	8006800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]
      break;
 80063ea:	e062      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa6a 	bl	80068cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
      break;
 800642c:	e041      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fab5 	bl	80069a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0204 	bic.w	r2, r2, #4
 8006458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	61da      	str	r2, [r3, #28]
      break;
 800646c:	e021      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 faff 	bl	8006a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69d9      	ldr	r1, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	61da      	str	r2, [r3, #28]
      break;
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80064b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_ConfigClockSource+0x18>
 80064d8:	2302      	movs	r3, #2
 80064da:	e0b3      	b.n	8006644 <HAL_TIM_ConfigClockSource+0x180>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006502:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006514:	d03e      	beq.n	8006594 <HAL_TIM_ConfigClockSource+0xd0>
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	f200 8087 	bhi.w	800662c <HAL_TIM_ConfigClockSource+0x168>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	f000 8085 	beq.w	8006630 <HAL_TIM_ConfigClockSource+0x16c>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	d87f      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x168>
 800652c:	2b70      	cmp	r3, #112	; 0x70
 800652e:	d01a      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0xa2>
 8006530:	2b70      	cmp	r3, #112	; 0x70
 8006532:	d87b      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x168>
 8006534:	2b60      	cmp	r3, #96	; 0x60
 8006536:	d050      	beq.n	80065da <HAL_TIM_ConfigClockSource+0x116>
 8006538:	2b60      	cmp	r3, #96	; 0x60
 800653a:	d877      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x168>
 800653c:	2b50      	cmp	r3, #80	; 0x50
 800653e:	d03c      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0xf6>
 8006540:	2b50      	cmp	r3, #80	; 0x50
 8006542:	d873      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x168>
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d058      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x136>
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d86f      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x168>
 800654c:	2b30      	cmp	r3, #48	; 0x30
 800654e:	d064      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x156>
 8006550:	2b30      	cmp	r3, #48	; 0x30
 8006552:	d86b      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x168>
 8006554:	2b20      	cmp	r3, #32
 8006556:	d060      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x156>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d867      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x168>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x156>
 8006560:	2b10      	cmp	r3, #16
 8006562:	d05a      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006564:	e062      	b.n	800662c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6899      	ldr	r1, [r3, #8]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f000 fb49 	bl	8006c0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006588:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	609a      	str	r2, [r3, #8]
      break;
 8006592:	e04e      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	6899      	ldr	r1, [r3, #8]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f000 fb32 	bl	8006c0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065b6:	609a      	str	r2, [r3, #8]
      break;
 80065b8:	e03b      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f000 faa6 	bl	8006b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2150      	movs	r1, #80	; 0x50
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 faff 	bl	8006bd6 <TIM_ITRx_SetConfig>
      break;
 80065d8:	e02b      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6859      	ldr	r1, [r3, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f000 fac5 	bl	8006b76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2160      	movs	r1, #96	; 0x60
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 faef 	bl	8006bd6 <TIM_ITRx_SetConfig>
      break;
 80065f8:	e01b      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	461a      	mov	r2, r3
 8006608:	f000 fa86 	bl	8006b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2140      	movs	r1, #64	; 0x40
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fadf 	bl	8006bd6 <TIM_ITRx_SetConfig>
      break;
 8006618:	e00b      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f000 fad6 	bl	8006bd6 <TIM_ITRx_SetConfig>
        break;
 800662a:	e002      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006630:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a34      	ldr	r2, [pc, #208]	; (80067e4 <TIM_Base_SetConfig+0xe4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00f      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a31      	ldr	r2, [pc, #196]	; (80067e8 <TIM_Base_SetConfig+0xe8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a30      	ldr	r2, [pc, #192]	; (80067ec <TIM_Base_SetConfig+0xec>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2f      	ldr	r2, [pc, #188]	; (80067f0 <TIM_Base_SetConfig+0xf0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <TIM_Base_SetConfig+0xe4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01b      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d017      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <TIM_Base_SetConfig+0xe8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a21      	ldr	r2, [pc, #132]	; (80067ec <TIM_Base_SetConfig+0xec>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a20      	ldr	r2, [pc, #128]	; (80067f0 <TIM_Base_SetConfig+0xf0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1f      	ldr	r2, [pc, #124]	; (80067f4 <TIM_Base_SetConfig+0xf4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <TIM_Base_SetConfig+0xf8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <TIM_Base_SetConfig+0xfc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a08      	ldr	r2, [pc, #32]	; (80067e4 <TIM_Base_SetConfig+0xe4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800

08006800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f023 0201 	bic.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f023 0302 	bic.w	r3, r3, #2
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <TIM_OC1_SetConfig+0xc8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10c      	bne.n	8006876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0308 	bic.w	r3, r3, #8
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 0304 	bic.w	r3, r3, #4
 8006874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <TIM_OC1_SetConfig+0xc8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d111      	bne.n	80068a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800688c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	40010000 	.word	0x40010000

080068cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0210 	bic.w	r2, r3, #16
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f023 0320 	bic.w	r3, r3, #32
 8006916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <TIM_OC2_SetConfig+0xd4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d10d      	bne.n	8006948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <TIM_OC2_SetConfig+0xd4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d113      	bne.n	8006978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800695e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010000 	.word	0x40010000

080069a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <TIM_OC3_SetConfig+0xd0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d10d      	bne.n	8006a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a14      	ldr	r2, [pc, #80]	; (8006a74 <TIM_OC3_SetConfig+0xd0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d113      	bne.n	8006a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40010000 	.word	0x40010000

08006a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	031b      	lsls	r3, r3, #12
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a10      	ldr	r2, [pc, #64]	; (8006b14 <TIM_OC4_SetConfig+0x9c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d109      	bne.n	8006aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	019b      	lsls	r3, r3, #6
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	621a      	str	r2, [r3, #32]
}
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000

08006b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 030a 	bic.w	r3, r3, #10
 8006b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b087      	sub	sp, #28
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f023 0210 	bic.w	r2, r3, #16
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	031b      	lsls	r3, r3, #12
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f043 0307 	orr.w	r3, r3, #7
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	021a      	lsls	r2, r3, #8
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	609a      	str	r2, [r3, #8]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	2201      	movs	r2, #1
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1a      	ldr	r2, [r3, #32]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <TIM_ResetCallback+0x7c>)
 8006ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1b      	ldr	r2, [pc, #108]	; (8006d18 <TIM_ResetCallback+0x80>)
 8006cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1a      	ldr	r2, [pc, #104]	; (8006d1c <TIM_ResetCallback+0x84>)
 8006cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a19      	ldr	r2, [pc, #100]	; (8006d20 <TIM_ResetCallback+0x88>)
 8006cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <TIM_ResetCallback+0x8c>)
 8006cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <TIM_ResetCallback+0x90>)
 8006ccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <TIM_ResetCallback+0x94>)
 8006cd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <TIM_ResetCallback+0x98>)
 8006cdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a14      	ldr	r2, [pc, #80]	; (8006d34 <TIM_ResetCallback+0x9c>)
 8006ce4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <TIM_ResetCallback+0xa0>)
 8006cec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a12      	ldr	r2, [pc, #72]	; (8006d3c <TIM_ResetCallback+0xa4>)
 8006cf4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <TIM_ResetCallback+0xa8>)
 8006cfc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a10      	ldr	r2, [pc, #64]	; (8006d44 <TIM_ResetCallback+0xac>)
 8006d04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	08001dad 	.word	0x08001dad
 8006d18:	0800664d 	.word	0x0800664d
 8006d1c:	080066c5 	.word	0x080066c5
 8006d20:	080066d9 	.word	0x080066d9
 8006d24:	08006675 	.word	0x08006675
 8006d28:	08006689 	.word	0x08006689
 8006d2c:	08006661 	.word	0x08006661
 8006d30:	0800669d 	.word	0x0800669d
 8006d34:	080066b1 	.word	0x080066b1
 8006d38:	080066ed 	.word	0x080066ed
 8006d3c:	08006ec9 	.word	0x08006ec9
 8006d40:	08006edd 	.word	0x08006edd
 8006d44:	08006ef1 	.word	0x08006ef1

08006d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e050      	b.n	8006e02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1c      	ldr	r2, [pc, #112]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dac:	d013      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a16      	ldr	r2, [pc, #88]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d10c      	bne.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40014000 	.word	0x40014000

08006e24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e03d      	b.n	8006ebc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e04a      	b.n	8006fac <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d111      	bne.n	8006f46 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f8a0 	bl	8007070 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <HAL_UART_Init+0xb0>)
 8006f3c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2224      	movs	r2, #36	; 0x24
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f8be 	bl	80070e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695a      	ldr	r2, [r3, #20]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	08002805 	.word	0x08002805

08006fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a10      	ldr	r2, [pc, #64]	; (80070bc <UART_InitCallbacksToDefault+0x4c>)
 800707c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <UART_InitCallbacksToDefault+0x50>)
 8007082:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a0f      	ldr	r2, [pc, #60]	; (80070c4 <UART_InitCallbacksToDefault+0x54>)
 8007088:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <UART_InitCallbacksToDefault+0x58>)
 800708e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a0e      	ldr	r2, [pc, #56]	; (80070cc <UART_InitCallbacksToDefault+0x5c>)
 8007094:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a0d      	ldr	r2, [pc, #52]	; (80070d0 <UART_InitCallbacksToDefault+0x60>)
 800709a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a0d      	ldr	r2, [pc, #52]	; (80070d4 <UART_InitCallbacksToDefault+0x64>)
 80070a0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <UART_InitCallbacksToDefault+0x68>)
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <UART_InitCallbacksToDefault+0x6c>)
 80070ac:	669a      	str	r2, [r3, #104]	; 0x68

}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	08006fcd 	.word	0x08006fcd
 80070c0:	08006fb9 	.word	0x08006fb9
 80070c4:	08006ff5 	.word	0x08006ff5
 80070c8:	08006fe1 	.word	0x08006fe1
 80070cc:	08007009 	.word	0x08007009
 80070d0:	0800701d 	.word	0x0800701d
 80070d4:	08007031 	.word	0x08007031
 80070d8:	08007045 	.word	0x08007045
 80070dc:	08007059 	.word	0x08007059

080070e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	b09f      	sub	sp, #124	; 0x7c
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	68d9      	ldr	r1, [r3, #12]
 80070f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	ea40 0301 	orr.w	r3, r0, r1
 8007100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	431a      	orrs	r2, r3
 800710c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	431a      	orrs	r2, r3
 8007112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	4313      	orrs	r3, r2
 8007118:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800711a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007124:	f021 010c 	bic.w	r1, r1, #12
 8007128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800712e:	430b      	orrs	r3, r1
 8007130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800713c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713e:	6999      	ldr	r1, [r3, #24]
 8007140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	ea40 0301 	orr.w	r3, r0, r1
 8007148:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800714a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4bc5      	ldr	r3, [pc, #788]	; (8007464 <UART_SetConfig+0x384>)
 8007150:	429a      	cmp	r2, r3
 8007152:	d004      	beq.n	800715e <UART_SetConfig+0x7e>
 8007154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4bc3      	ldr	r3, [pc, #780]	; (8007468 <UART_SetConfig+0x388>)
 800715a:	429a      	cmp	r2, r3
 800715c:	d103      	bne.n	8007166 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800715e:	f7fe fa8b 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 8007162:	6778      	str	r0, [r7, #116]	; 0x74
 8007164:	e002      	b.n	800716c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007166:	f7fe fa73 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 800716a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007174:	f040 80b6 	bne.w	80072e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800717a:	461c      	mov	r4, r3
 800717c:	f04f 0500 	mov.w	r5, #0
 8007180:	4622      	mov	r2, r4
 8007182:	462b      	mov	r3, r5
 8007184:	1891      	adds	r1, r2, r2
 8007186:	6439      	str	r1, [r7, #64]	; 0x40
 8007188:	415b      	adcs	r3, r3
 800718a:	647b      	str	r3, [r7, #68]	; 0x44
 800718c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007190:	1912      	adds	r2, r2, r4
 8007192:	eb45 0303 	adc.w	r3, r5, r3
 8007196:	f04f 0000 	mov.w	r0, #0
 800719a:	f04f 0100 	mov.w	r1, #0
 800719e:	00d9      	lsls	r1, r3, #3
 80071a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071a4:	00d0      	lsls	r0, r2, #3
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	1911      	adds	r1, r2, r4
 80071ac:	6639      	str	r1, [r7, #96]	; 0x60
 80071ae:	416b      	adcs	r3, r5
 80071b0:	667b      	str	r3, [r7, #100]	; 0x64
 80071b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	461a      	mov	r2, r3
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	63b9      	str	r1, [r7, #56]	; 0x38
 80071c0:	415b      	adcs	r3, r3
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80071cc:	f7f9 fd44 	bl	8000c58 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4ba5      	ldr	r3, [pc, #660]	; (800746c <UART_SetConfig+0x38c>)
 80071d6:	fba3 2302 	umull	r2, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	011e      	lsls	r6, r3, #4
 80071de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e0:	461c      	mov	r4, r3
 80071e2:	f04f 0500 	mov.w	r5, #0
 80071e6:	4622      	mov	r2, r4
 80071e8:	462b      	mov	r3, r5
 80071ea:	1891      	adds	r1, r2, r2
 80071ec:	6339      	str	r1, [r7, #48]	; 0x30
 80071ee:	415b      	adcs	r3, r3
 80071f0:	637b      	str	r3, [r7, #52]	; 0x34
 80071f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071f6:	1912      	adds	r2, r2, r4
 80071f8:	eb45 0303 	adc.w	r3, r5, r3
 80071fc:	f04f 0000 	mov.w	r0, #0
 8007200:	f04f 0100 	mov.w	r1, #0
 8007204:	00d9      	lsls	r1, r3, #3
 8007206:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800720a:	00d0      	lsls	r0, r2, #3
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	1911      	adds	r1, r2, r4
 8007212:	65b9      	str	r1, [r7, #88]	; 0x58
 8007214:	416b      	adcs	r3, r5
 8007216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	461a      	mov	r2, r3
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	1891      	adds	r1, r2, r2
 8007224:	62b9      	str	r1, [r7, #40]	; 0x28
 8007226:	415b      	adcs	r3, r3
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800722e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007232:	f7f9 fd11 	bl	8000c58 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4b8c      	ldr	r3, [pc, #560]	; (800746c <UART_SetConfig+0x38c>)
 800723c:	fba3 1302 	umull	r1, r3, r3, r2
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	2164      	movs	r1, #100	; 0x64
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	3332      	adds	r3, #50	; 0x32
 800724e:	4a87      	ldr	r2, [pc, #540]	; (800746c <UART_SetConfig+0x38c>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800725c:	441e      	add	r6, r3
 800725e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007260:	4618      	mov	r0, r3
 8007262:	f04f 0100 	mov.w	r1, #0
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	1894      	adds	r4, r2, r2
 800726c:	623c      	str	r4, [r7, #32]
 800726e:	415b      	adcs	r3, r3
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
 8007272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007276:	1812      	adds	r2, r2, r0
 8007278:	eb41 0303 	adc.w	r3, r1, r3
 800727c:	f04f 0400 	mov.w	r4, #0
 8007280:	f04f 0500 	mov.w	r5, #0
 8007284:	00dd      	lsls	r5, r3, #3
 8007286:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800728a:	00d4      	lsls	r4, r2, #3
 800728c:	4622      	mov	r2, r4
 800728e:	462b      	mov	r3, r5
 8007290:	1814      	adds	r4, r2, r0
 8007292:	653c      	str	r4, [r7, #80]	; 0x50
 8007294:	414b      	adcs	r3, r1
 8007296:	657b      	str	r3, [r7, #84]	; 0x54
 8007298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	461a      	mov	r2, r3
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	1891      	adds	r1, r2, r2
 80072a4:	61b9      	str	r1, [r7, #24]
 80072a6:	415b      	adcs	r3, r3
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072b2:	f7f9 fcd1 	bl	8000c58 <__aeabi_uldivmod>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4b6c      	ldr	r3, [pc, #432]	; (800746c <UART_SetConfig+0x38c>)
 80072bc:	fba3 1302 	umull	r1, r3, r3, r2
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	2164      	movs	r1, #100	; 0x64
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	3332      	adds	r3, #50	; 0x32
 80072ce:	4a67      	ldr	r2, [pc, #412]	; (800746c <UART_SetConfig+0x38c>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	f003 0207 	and.w	r2, r3, #7
 80072da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4432      	add	r2, r6
 80072e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072e2:	e0b9      	b.n	8007458 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e6:	461c      	mov	r4, r3
 80072e8:	f04f 0500 	mov.w	r5, #0
 80072ec:	4622      	mov	r2, r4
 80072ee:	462b      	mov	r3, r5
 80072f0:	1891      	adds	r1, r2, r2
 80072f2:	6139      	str	r1, [r7, #16]
 80072f4:	415b      	adcs	r3, r3
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072fc:	1912      	adds	r2, r2, r4
 80072fe:	eb45 0303 	adc.w	r3, r5, r3
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f04f 0100 	mov.w	r1, #0
 800730a:	00d9      	lsls	r1, r3, #3
 800730c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007310:	00d0      	lsls	r0, r2, #3
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	eb12 0804 	adds.w	r8, r2, r4
 800731a:	eb43 0905 	adc.w	r9, r3, r5
 800731e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4618      	mov	r0, r3
 8007324:	f04f 0100 	mov.w	r1, #0
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	008b      	lsls	r3, r1, #2
 8007332:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007336:	0082      	lsls	r2, r0, #2
 8007338:	4640      	mov	r0, r8
 800733a:	4649      	mov	r1, r9
 800733c:	f7f9 fc8c 	bl	8000c58 <__aeabi_uldivmod>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4b49      	ldr	r3, [pc, #292]	; (800746c <UART_SetConfig+0x38c>)
 8007346:	fba3 2302 	umull	r2, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	011e      	lsls	r6, r3, #4
 800734e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007350:	4618      	mov	r0, r3
 8007352:	f04f 0100 	mov.w	r1, #0
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	1894      	adds	r4, r2, r2
 800735c:	60bc      	str	r4, [r7, #8]
 800735e:	415b      	adcs	r3, r3
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007366:	1812      	adds	r2, r2, r0
 8007368:	eb41 0303 	adc.w	r3, r1, r3
 800736c:	f04f 0400 	mov.w	r4, #0
 8007370:	f04f 0500 	mov.w	r5, #0
 8007374:	00dd      	lsls	r5, r3, #3
 8007376:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800737a:	00d4      	lsls	r4, r2, #3
 800737c:	4622      	mov	r2, r4
 800737e:	462b      	mov	r3, r5
 8007380:	1814      	adds	r4, r2, r0
 8007382:	64bc      	str	r4, [r7, #72]	; 0x48
 8007384:	414b      	adcs	r3, r1
 8007386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	f04f 0100 	mov.w	r1, #0
 8007392:	f04f 0200 	mov.w	r2, #0
 8007396:	f04f 0300 	mov.w	r3, #0
 800739a:	008b      	lsls	r3, r1, #2
 800739c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073a0:	0082      	lsls	r2, r0, #2
 80073a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80073a6:	f7f9 fc57 	bl	8000c58 <__aeabi_uldivmod>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4b2f      	ldr	r3, [pc, #188]	; (800746c <UART_SetConfig+0x38c>)
 80073b0:	fba3 1302 	umull	r1, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	2164      	movs	r1, #100	; 0x64
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	3332      	adds	r3, #50	; 0x32
 80073c2:	4a2a      	ldr	r2, [pc, #168]	; (800746c <UART_SetConfig+0x38c>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ce:	441e      	add	r6, r3
 80073d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d2:	4618      	mov	r0, r3
 80073d4:	f04f 0100 	mov.w	r1, #0
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	1894      	adds	r4, r2, r2
 80073de:	603c      	str	r4, [r7, #0]
 80073e0:	415b      	adcs	r3, r3
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e8:	1812      	adds	r2, r2, r0
 80073ea:	eb41 0303 	adc.w	r3, r1, r3
 80073ee:	f04f 0400 	mov.w	r4, #0
 80073f2:	f04f 0500 	mov.w	r5, #0
 80073f6:	00dd      	lsls	r5, r3, #3
 80073f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073fc:	00d4      	lsls	r4, r2, #3
 80073fe:	4622      	mov	r2, r4
 8007400:	462b      	mov	r3, r5
 8007402:	eb12 0a00 	adds.w	sl, r2, r0
 8007406:	eb43 0b01 	adc.w	fp, r3, r1
 800740a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	4618      	mov	r0, r3
 8007410:	f04f 0100 	mov.w	r1, #0
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	008b      	lsls	r3, r1, #2
 800741e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007422:	0082      	lsls	r2, r0, #2
 8007424:	4650      	mov	r0, sl
 8007426:	4659      	mov	r1, fp
 8007428:	f7f9 fc16 	bl	8000c58 <__aeabi_uldivmod>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4b0e      	ldr	r3, [pc, #56]	; (800746c <UART_SetConfig+0x38c>)
 8007432:	fba3 1302 	umull	r1, r3, r3, r2
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	2164      	movs	r1, #100	; 0x64
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	3332      	adds	r3, #50	; 0x32
 8007444:	4a09      	ldr	r2, [pc, #36]	; (800746c <UART_SetConfig+0x38c>)
 8007446:	fba2 2303 	umull	r2, r3, r2, r3
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4432      	add	r2, r6
 8007456:	609a      	str	r2, [r3, #8]
}
 8007458:	bf00      	nop
 800745a:	377c      	adds	r7, #124	; 0x7c
 800745c:	46bd      	mov	sp, r7
 800745e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007462:	bf00      	nop
 8007464:	40011000 	.word	0x40011000
 8007468:	40011400 	.word	0x40011400
 800746c:	51eb851f 	.word	0x51eb851f

08007470 <__errno>:
 8007470:	4b01      	ldr	r3, [pc, #4]	; (8007478 <__errno+0x8>)
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000054 	.word	0x20000054

0800747c <__libc_init_array>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4d0d      	ldr	r5, [pc, #52]	; (80074b4 <__libc_init_array+0x38>)
 8007480:	4c0d      	ldr	r4, [pc, #52]	; (80074b8 <__libc_init_array+0x3c>)
 8007482:	1b64      	subs	r4, r4, r5
 8007484:	10a4      	asrs	r4, r4, #2
 8007486:	2600      	movs	r6, #0
 8007488:	42a6      	cmp	r6, r4
 800748a:	d109      	bne.n	80074a0 <__libc_init_array+0x24>
 800748c:	4d0b      	ldr	r5, [pc, #44]	; (80074bc <__libc_init_array+0x40>)
 800748e:	4c0c      	ldr	r4, [pc, #48]	; (80074c0 <__libc_init_array+0x44>)
 8007490:	f002 feb4 	bl	800a1fc <_init>
 8007494:	1b64      	subs	r4, r4, r5
 8007496:	10a4      	asrs	r4, r4, #2
 8007498:	2600      	movs	r6, #0
 800749a:	42a6      	cmp	r6, r4
 800749c:	d105      	bne.n	80074aa <__libc_init_array+0x2e>
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a4:	4798      	blx	r3
 80074a6:	3601      	adds	r6, #1
 80074a8:	e7ee      	b.n	8007488 <__libc_init_array+0xc>
 80074aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ae:	4798      	blx	r3
 80074b0:	3601      	adds	r6, #1
 80074b2:	e7f2      	b.n	800749a <__libc_init_array+0x1e>
 80074b4:	0800a69c 	.word	0x0800a69c
 80074b8:	0800a69c 	.word	0x0800a69c
 80074bc:	0800a69c 	.word	0x0800a69c
 80074c0:	0800a6a0 	.word	0x0800a6a0

080074c4 <memset>:
 80074c4:	4402      	add	r2, r0
 80074c6:	4603      	mov	r3, r0
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d100      	bne.n	80074ce <memset+0xa>
 80074cc:	4770      	bx	lr
 80074ce:	f803 1b01 	strb.w	r1, [r3], #1
 80074d2:	e7f9      	b.n	80074c8 <memset+0x4>

080074d4 <__cvt>:
 80074d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074d8:	ec55 4b10 	vmov	r4, r5, d0
 80074dc:	2d00      	cmp	r5, #0
 80074de:	460e      	mov	r6, r1
 80074e0:	4619      	mov	r1, r3
 80074e2:	462b      	mov	r3, r5
 80074e4:	bfbb      	ittet	lt
 80074e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074ea:	461d      	movlt	r5, r3
 80074ec:	2300      	movge	r3, #0
 80074ee:	232d      	movlt	r3, #45	; 0x2d
 80074f0:	700b      	strb	r3, [r1, #0]
 80074f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074f8:	4691      	mov	r9, r2
 80074fa:	f023 0820 	bic.w	r8, r3, #32
 80074fe:	bfbc      	itt	lt
 8007500:	4622      	movlt	r2, r4
 8007502:	4614      	movlt	r4, r2
 8007504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007508:	d005      	beq.n	8007516 <__cvt+0x42>
 800750a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800750e:	d100      	bne.n	8007512 <__cvt+0x3e>
 8007510:	3601      	adds	r6, #1
 8007512:	2102      	movs	r1, #2
 8007514:	e000      	b.n	8007518 <__cvt+0x44>
 8007516:	2103      	movs	r1, #3
 8007518:	ab03      	add	r3, sp, #12
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	ab02      	add	r3, sp, #8
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	ec45 4b10 	vmov	d0, r4, r5
 8007524:	4653      	mov	r3, sl
 8007526:	4632      	mov	r2, r6
 8007528:	f000 fcea 	bl	8007f00 <_dtoa_r>
 800752c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007530:	4607      	mov	r7, r0
 8007532:	d102      	bne.n	800753a <__cvt+0x66>
 8007534:	f019 0f01 	tst.w	r9, #1
 8007538:	d022      	beq.n	8007580 <__cvt+0xac>
 800753a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800753e:	eb07 0906 	add.w	r9, r7, r6
 8007542:	d110      	bne.n	8007566 <__cvt+0x92>
 8007544:	783b      	ldrb	r3, [r7, #0]
 8007546:	2b30      	cmp	r3, #48	; 0x30
 8007548:	d10a      	bne.n	8007560 <__cvt+0x8c>
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 fac1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007556:	b918      	cbnz	r0, 8007560 <__cvt+0x8c>
 8007558:	f1c6 0601 	rsb	r6, r6, #1
 800755c:	f8ca 6000 	str.w	r6, [sl]
 8007560:	f8da 3000 	ldr.w	r3, [sl]
 8007564:	4499      	add	r9, r3
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f9 fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007572:	b108      	cbz	r0, 8007578 <__cvt+0xa4>
 8007574:	f8cd 900c 	str.w	r9, [sp, #12]
 8007578:	2230      	movs	r2, #48	; 0x30
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	454b      	cmp	r3, r9
 800757e:	d307      	bcc.n	8007590 <__cvt+0xbc>
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007584:	1bdb      	subs	r3, r3, r7
 8007586:	4638      	mov	r0, r7
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	b004      	add	sp, #16
 800758c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007590:	1c59      	adds	r1, r3, #1
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e7f0      	b.n	800757a <__cvt+0xa6>

08007598 <__exponent>:
 8007598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800759a:	4603      	mov	r3, r0
 800759c:	2900      	cmp	r1, #0
 800759e:	bfb8      	it	lt
 80075a0:	4249      	neglt	r1, r1
 80075a2:	f803 2b02 	strb.w	r2, [r3], #2
 80075a6:	bfb4      	ite	lt
 80075a8:	222d      	movlt	r2, #45	; 0x2d
 80075aa:	222b      	movge	r2, #43	; 0x2b
 80075ac:	2909      	cmp	r1, #9
 80075ae:	7042      	strb	r2, [r0, #1]
 80075b0:	dd2a      	ble.n	8007608 <__exponent+0x70>
 80075b2:	f10d 0407 	add.w	r4, sp, #7
 80075b6:	46a4      	mov	ip, r4
 80075b8:	270a      	movs	r7, #10
 80075ba:	46a6      	mov	lr, r4
 80075bc:	460a      	mov	r2, r1
 80075be:	fb91 f6f7 	sdiv	r6, r1, r7
 80075c2:	fb07 1516 	mls	r5, r7, r6, r1
 80075c6:	3530      	adds	r5, #48	; 0x30
 80075c8:	2a63      	cmp	r2, #99	; 0x63
 80075ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80075ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075d2:	4631      	mov	r1, r6
 80075d4:	dcf1      	bgt.n	80075ba <__exponent+0x22>
 80075d6:	3130      	adds	r1, #48	; 0x30
 80075d8:	f1ae 0502 	sub.w	r5, lr, #2
 80075dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075e0:	1c44      	adds	r4, r0, #1
 80075e2:	4629      	mov	r1, r5
 80075e4:	4561      	cmp	r1, ip
 80075e6:	d30a      	bcc.n	80075fe <__exponent+0x66>
 80075e8:	f10d 0209 	add.w	r2, sp, #9
 80075ec:	eba2 020e 	sub.w	r2, r2, lr
 80075f0:	4565      	cmp	r5, ip
 80075f2:	bf88      	it	hi
 80075f4:	2200      	movhi	r2, #0
 80075f6:	4413      	add	r3, r2
 80075f8:	1a18      	subs	r0, r3, r0
 80075fa:	b003      	add	sp, #12
 80075fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007602:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007606:	e7ed      	b.n	80075e4 <__exponent+0x4c>
 8007608:	2330      	movs	r3, #48	; 0x30
 800760a:	3130      	adds	r1, #48	; 0x30
 800760c:	7083      	strb	r3, [r0, #2]
 800760e:	70c1      	strb	r1, [r0, #3]
 8007610:	1d03      	adds	r3, r0, #4
 8007612:	e7f1      	b.n	80075f8 <__exponent+0x60>

08007614 <_printf_float>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	ed2d 8b02 	vpush	{d8}
 800761c:	b08d      	sub	sp, #52	; 0x34
 800761e:	460c      	mov	r4, r1
 8007620:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007624:	4616      	mov	r6, r2
 8007626:	461f      	mov	r7, r3
 8007628:	4605      	mov	r5, r0
 800762a:	f001 fa55 	bl	8008ad8 <_localeconv_r>
 800762e:	f8d0 a000 	ldr.w	sl, [r0]
 8007632:	4650      	mov	r0, sl
 8007634:	f7f8 fdd4 	bl	80001e0 <strlen>
 8007638:	2300      	movs	r3, #0
 800763a:	930a      	str	r3, [sp, #40]	; 0x28
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	9305      	str	r3, [sp, #20]
 8007640:	f8d8 3000 	ldr.w	r3, [r8]
 8007644:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007648:	3307      	adds	r3, #7
 800764a:	f023 0307 	bic.w	r3, r3, #7
 800764e:	f103 0208 	add.w	r2, r3, #8
 8007652:	f8c8 2000 	str.w	r2, [r8]
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800765e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007662:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007666:	9307      	str	r3, [sp, #28]
 8007668:	f8cd 8018 	str.w	r8, [sp, #24]
 800766c:	ee08 0a10 	vmov	s16, r0
 8007670:	4b9f      	ldr	r3, [pc, #636]	; (80078f0 <_printf_float+0x2dc>)
 8007672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007676:	f04f 32ff 	mov.w	r2, #4294967295
 800767a:	f7f9 fa5f 	bl	8000b3c <__aeabi_dcmpun>
 800767e:	bb88      	cbnz	r0, 80076e4 <_printf_float+0xd0>
 8007680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007684:	4b9a      	ldr	r3, [pc, #616]	; (80078f0 <_printf_float+0x2dc>)
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	f7f9 fa39 	bl	8000b00 <__aeabi_dcmple>
 800768e:	bb48      	cbnz	r0, 80076e4 <_printf_float+0xd0>
 8007690:	2200      	movs	r2, #0
 8007692:	2300      	movs	r3, #0
 8007694:	4640      	mov	r0, r8
 8007696:	4649      	mov	r1, r9
 8007698:	f7f9 fa28 	bl	8000aec <__aeabi_dcmplt>
 800769c:	b110      	cbz	r0, 80076a4 <_printf_float+0x90>
 800769e:	232d      	movs	r3, #45	; 0x2d
 80076a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a4:	4b93      	ldr	r3, [pc, #588]	; (80078f4 <_printf_float+0x2e0>)
 80076a6:	4894      	ldr	r0, [pc, #592]	; (80078f8 <_printf_float+0x2e4>)
 80076a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076ac:	bf94      	ite	ls
 80076ae:	4698      	movls	r8, r3
 80076b0:	4680      	movhi	r8, r0
 80076b2:	2303      	movs	r3, #3
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	9b05      	ldr	r3, [sp, #20]
 80076b8:	f023 0204 	bic.w	r2, r3, #4
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	9700      	str	r7, [sp, #0]
 80076c4:	4633      	mov	r3, r6
 80076c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80076c8:	4621      	mov	r1, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f9d8 	bl	8007a80 <_printf_common>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f040 8090 	bne.w	80077f6 <_printf_float+0x1e2>
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	b00d      	add	sp, #52	; 0x34
 80076dc:	ecbd 8b02 	vpop	{d8}
 80076e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e4:	4642      	mov	r2, r8
 80076e6:	464b      	mov	r3, r9
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f9 fa26 	bl	8000b3c <__aeabi_dcmpun>
 80076f0:	b140      	cbz	r0, 8007704 <_printf_float+0xf0>
 80076f2:	464b      	mov	r3, r9
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfbc      	itt	lt
 80076f8:	232d      	movlt	r3, #45	; 0x2d
 80076fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076fe:	487f      	ldr	r0, [pc, #508]	; (80078fc <_printf_float+0x2e8>)
 8007700:	4b7f      	ldr	r3, [pc, #508]	; (8007900 <_printf_float+0x2ec>)
 8007702:	e7d1      	b.n	80076a8 <_printf_float+0x94>
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800770a:	9206      	str	r2, [sp, #24]
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	d13f      	bne.n	8007790 <_printf_float+0x17c>
 8007710:	2306      	movs	r3, #6
 8007712:	6063      	str	r3, [r4, #4]
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	6861      	ldr	r1, [r4, #4]
 8007718:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800771c:	2300      	movs	r3, #0
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	ab0a      	add	r3, sp, #40	; 0x28
 8007722:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007726:	ab09      	add	r3, sp, #36	; 0x24
 8007728:	ec49 8b10 	vmov	d0, r8, r9
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	6022      	str	r2, [r4, #0]
 8007730:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007734:	4628      	mov	r0, r5
 8007736:	f7ff fecd 	bl	80074d4 <__cvt>
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800773e:	2b47      	cmp	r3, #71	; 0x47
 8007740:	4680      	mov	r8, r0
 8007742:	d108      	bne.n	8007756 <_printf_float+0x142>
 8007744:	1cc8      	adds	r0, r1, #3
 8007746:	db02      	blt.n	800774e <_printf_float+0x13a>
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	4299      	cmp	r1, r3
 800774c:	dd41      	ble.n	80077d2 <_printf_float+0x1be>
 800774e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007752:	fa5f fb8b 	uxtb.w	fp, fp
 8007756:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800775a:	d820      	bhi.n	800779e <_printf_float+0x18a>
 800775c:	3901      	subs	r1, #1
 800775e:	465a      	mov	r2, fp
 8007760:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007764:	9109      	str	r1, [sp, #36]	; 0x24
 8007766:	f7ff ff17 	bl	8007598 <__exponent>
 800776a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800776c:	1813      	adds	r3, r2, r0
 800776e:	2a01      	cmp	r2, #1
 8007770:	4681      	mov	r9, r0
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	dc02      	bgt.n	800777c <_printf_float+0x168>
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	07d2      	lsls	r2, r2, #31
 800777a:	d501      	bpl.n	8007780 <_printf_float+0x16c>
 800777c:	3301      	adds	r3, #1
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007784:	2b00      	cmp	r3, #0
 8007786:	d09c      	beq.n	80076c2 <_printf_float+0xae>
 8007788:	232d      	movs	r3, #45	; 0x2d
 800778a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800778e:	e798      	b.n	80076c2 <_printf_float+0xae>
 8007790:	9a06      	ldr	r2, [sp, #24]
 8007792:	2a47      	cmp	r2, #71	; 0x47
 8007794:	d1be      	bne.n	8007714 <_printf_float+0x100>
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1bc      	bne.n	8007714 <_printf_float+0x100>
 800779a:	2301      	movs	r3, #1
 800779c:	e7b9      	b.n	8007712 <_printf_float+0xfe>
 800779e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077a2:	d118      	bne.n	80077d6 <_printf_float+0x1c2>
 80077a4:	2900      	cmp	r1, #0
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	dd0b      	ble.n	80077c2 <_printf_float+0x1ae>
 80077aa:	6121      	str	r1, [r4, #16]
 80077ac:	b913      	cbnz	r3, 80077b4 <_printf_float+0x1a0>
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	07d0      	lsls	r0, r2, #31
 80077b2:	d502      	bpl.n	80077ba <_printf_float+0x1a6>
 80077b4:	3301      	adds	r3, #1
 80077b6:	440b      	add	r3, r1
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80077bc:	f04f 0900 	mov.w	r9, #0
 80077c0:	e7de      	b.n	8007780 <_printf_float+0x16c>
 80077c2:	b913      	cbnz	r3, 80077ca <_printf_float+0x1b6>
 80077c4:	6822      	ldr	r2, [r4, #0]
 80077c6:	07d2      	lsls	r2, r2, #31
 80077c8:	d501      	bpl.n	80077ce <_printf_float+0x1ba>
 80077ca:	3302      	adds	r3, #2
 80077cc:	e7f4      	b.n	80077b8 <_printf_float+0x1a4>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e7f2      	b.n	80077b8 <_printf_float+0x1a4>
 80077d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d8:	4299      	cmp	r1, r3
 80077da:	db05      	blt.n	80077e8 <_printf_float+0x1d4>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	6121      	str	r1, [r4, #16]
 80077e0:	07d8      	lsls	r0, r3, #31
 80077e2:	d5ea      	bpl.n	80077ba <_printf_float+0x1a6>
 80077e4:	1c4b      	adds	r3, r1, #1
 80077e6:	e7e7      	b.n	80077b8 <_printf_float+0x1a4>
 80077e8:	2900      	cmp	r1, #0
 80077ea:	bfd4      	ite	le
 80077ec:	f1c1 0202 	rsble	r2, r1, #2
 80077f0:	2201      	movgt	r2, #1
 80077f2:	4413      	add	r3, r2
 80077f4:	e7e0      	b.n	80077b8 <_printf_float+0x1a4>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	055a      	lsls	r2, r3, #21
 80077fa:	d407      	bmi.n	800780c <_printf_float+0x1f8>
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	4642      	mov	r2, r8
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	d12c      	bne.n	8007864 <_printf_float+0x250>
 800780a:	e764      	b.n	80076d6 <_printf_float+0xc2>
 800780c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007810:	f240 80e0 	bls.w	80079d4 <_printf_float+0x3c0>
 8007814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007818:	2200      	movs	r2, #0
 800781a:	2300      	movs	r3, #0
 800781c:	f7f9 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007820:	2800      	cmp	r0, #0
 8007822:	d034      	beq.n	800788e <_printf_float+0x27a>
 8007824:	4a37      	ldr	r2, [pc, #220]	; (8007904 <_printf_float+0x2f0>)
 8007826:	2301      	movs	r3, #1
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f af51 	beq.w	80076d6 <_printf_float+0xc2>
 8007834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007838:	429a      	cmp	r2, r3
 800783a:	db02      	blt.n	8007842 <_printf_float+0x22e>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07d8      	lsls	r0, r3, #31
 8007840:	d510      	bpl.n	8007864 <_printf_float+0x250>
 8007842:	ee18 3a10 	vmov	r3, s16
 8007846:	4652      	mov	r2, sl
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f af41 	beq.w	80076d6 <_printf_float+0xc2>
 8007854:	f04f 0800 	mov.w	r8, #0
 8007858:	f104 091a 	add.w	r9, r4, #26
 800785c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785e:	3b01      	subs	r3, #1
 8007860:	4543      	cmp	r3, r8
 8007862:	dc09      	bgt.n	8007878 <_printf_float+0x264>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	079b      	lsls	r3, r3, #30
 8007868:	f100 8105 	bmi.w	8007a76 <_printf_float+0x462>
 800786c:	68e0      	ldr	r0, [r4, #12]
 800786e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007870:	4298      	cmp	r0, r3
 8007872:	bfb8      	it	lt
 8007874:	4618      	movlt	r0, r3
 8007876:	e730      	b.n	80076da <_printf_float+0xc6>
 8007878:	2301      	movs	r3, #1
 800787a:	464a      	mov	r2, r9
 800787c:	4631      	mov	r1, r6
 800787e:	4628      	mov	r0, r5
 8007880:	47b8      	blx	r7
 8007882:	3001      	adds	r0, #1
 8007884:	f43f af27 	beq.w	80076d6 <_printf_float+0xc2>
 8007888:	f108 0801 	add.w	r8, r8, #1
 800788c:	e7e6      	b.n	800785c <_printf_float+0x248>
 800788e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	dc39      	bgt.n	8007908 <_printf_float+0x2f4>
 8007894:	4a1b      	ldr	r2, [pc, #108]	; (8007904 <_printf_float+0x2f0>)
 8007896:	2301      	movs	r3, #1
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f af19 	beq.w	80076d6 <_printf_float+0xc2>
 80078a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078a8:	4313      	orrs	r3, r2
 80078aa:	d102      	bne.n	80078b2 <_printf_float+0x29e>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	d5d8      	bpl.n	8007864 <_printf_float+0x250>
 80078b2:	ee18 3a10 	vmov	r3, s16
 80078b6:	4652      	mov	r2, sl
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	f43f af09 	beq.w	80076d6 <_printf_float+0xc2>
 80078c4:	f04f 0900 	mov.w	r9, #0
 80078c8:	f104 0a1a 	add.w	sl, r4, #26
 80078cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ce:	425b      	negs	r3, r3
 80078d0:	454b      	cmp	r3, r9
 80078d2:	dc01      	bgt.n	80078d8 <_printf_float+0x2c4>
 80078d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d6:	e792      	b.n	80077fe <_printf_float+0x1ea>
 80078d8:	2301      	movs	r3, #1
 80078da:	4652      	mov	r2, sl
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	f43f aef7 	beq.w	80076d6 <_printf_float+0xc2>
 80078e8:	f109 0901 	add.w	r9, r9, #1
 80078ec:	e7ee      	b.n	80078cc <_printf_float+0x2b8>
 80078ee:	bf00      	nop
 80078f0:	7fefffff 	.word	0x7fefffff
 80078f4:	0800a2b4 	.word	0x0800a2b4
 80078f8:	0800a2b8 	.word	0x0800a2b8
 80078fc:	0800a2c0 	.word	0x0800a2c0
 8007900:	0800a2bc 	.word	0x0800a2bc
 8007904:	0800a2c4 	.word	0x0800a2c4
 8007908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800790a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800790c:	429a      	cmp	r2, r3
 800790e:	bfa8      	it	ge
 8007910:	461a      	movge	r2, r3
 8007912:	2a00      	cmp	r2, #0
 8007914:	4691      	mov	r9, r2
 8007916:	dc37      	bgt.n	8007988 <_printf_float+0x374>
 8007918:	f04f 0b00 	mov.w	fp, #0
 800791c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007920:	f104 021a 	add.w	r2, r4, #26
 8007924:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	eba3 0309 	sub.w	r3, r3, r9
 800792c:	455b      	cmp	r3, fp
 800792e:	dc33      	bgt.n	8007998 <_printf_float+0x384>
 8007930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007934:	429a      	cmp	r2, r3
 8007936:	db3b      	blt.n	80079b0 <_printf_float+0x39c>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d438      	bmi.n	80079b0 <_printf_float+0x39c>
 800793e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007940:	9b05      	ldr	r3, [sp, #20]
 8007942:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	eba2 0901 	sub.w	r9, r2, r1
 800794a:	4599      	cmp	r9, r3
 800794c:	bfa8      	it	ge
 800794e:	4699      	movge	r9, r3
 8007950:	f1b9 0f00 	cmp.w	r9, #0
 8007954:	dc35      	bgt.n	80079c2 <_printf_float+0x3ae>
 8007956:	f04f 0800 	mov.w	r8, #0
 800795a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800795e:	f104 0a1a 	add.w	sl, r4, #26
 8007962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	eba3 0309 	sub.w	r3, r3, r9
 800796c:	4543      	cmp	r3, r8
 800796e:	f77f af79 	ble.w	8007864 <_printf_float+0x250>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f aeaa 	beq.w	80076d6 <_printf_float+0xc2>
 8007982:	f108 0801 	add.w	r8, r8, #1
 8007986:	e7ec      	b.n	8007962 <_printf_float+0x34e>
 8007988:	4613      	mov	r3, r2
 800798a:	4631      	mov	r1, r6
 800798c:	4642      	mov	r2, r8
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	d1c0      	bne.n	8007918 <_printf_float+0x304>
 8007996:	e69e      	b.n	80076d6 <_printf_float+0xc2>
 8007998:	2301      	movs	r3, #1
 800799a:	4631      	mov	r1, r6
 800799c:	4628      	mov	r0, r5
 800799e:	9205      	str	r2, [sp, #20]
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	f43f ae97 	beq.w	80076d6 <_printf_float+0xc2>
 80079a8:	9a05      	ldr	r2, [sp, #20]
 80079aa:	f10b 0b01 	add.w	fp, fp, #1
 80079ae:	e7b9      	b.n	8007924 <_printf_float+0x310>
 80079b0:	ee18 3a10 	vmov	r3, s16
 80079b4:	4652      	mov	r2, sl
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	d1be      	bne.n	800793e <_printf_float+0x32a>
 80079c0:	e689      	b.n	80076d6 <_printf_float+0xc2>
 80079c2:	9a05      	ldr	r2, [sp, #20]
 80079c4:	464b      	mov	r3, r9
 80079c6:	4442      	add	r2, r8
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	d1c1      	bne.n	8007956 <_printf_float+0x342>
 80079d2:	e680      	b.n	80076d6 <_printf_float+0xc2>
 80079d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d6:	2a01      	cmp	r2, #1
 80079d8:	dc01      	bgt.n	80079de <_printf_float+0x3ca>
 80079da:	07db      	lsls	r3, r3, #31
 80079dc:	d538      	bpl.n	8007a50 <_printf_float+0x43c>
 80079de:	2301      	movs	r3, #1
 80079e0:	4642      	mov	r2, r8
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae74 	beq.w	80076d6 <_printf_float+0xc2>
 80079ee:	ee18 3a10 	vmov	r3, s16
 80079f2:	4652      	mov	r2, sl
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f43f ae6b 	beq.w	80076d6 <_printf_float+0xc2>
 8007a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a04:	2200      	movs	r2, #0
 8007a06:	2300      	movs	r3, #0
 8007a08:	f7f9 f866 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a0c:	b9d8      	cbnz	r0, 8007a46 <_printf_float+0x432>
 8007a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a10:	f108 0201 	add.w	r2, r8, #1
 8007a14:	3b01      	subs	r3, #1
 8007a16:	4631      	mov	r1, r6
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b8      	blx	r7
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d10e      	bne.n	8007a3e <_printf_float+0x42a>
 8007a20:	e659      	b.n	80076d6 <_printf_float+0xc2>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4652      	mov	r2, sl
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f ae52 	beq.w	80076d6 <_printf_float+0xc2>
 8007a32:	f108 0801 	add.w	r8, r8, #1
 8007a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	4543      	cmp	r3, r8
 8007a3c:	dcf1      	bgt.n	8007a22 <_printf_float+0x40e>
 8007a3e:	464b      	mov	r3, r9
 8007a40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a44:	e6dc      	b.n	8007800 <_printf_float+0x1ec>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	f104 0a1a 	add.w	sl, r4, #26
 8007a4e:	e7f2      	b.n	8007a36 <_printf_float+0x422>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4642      	mov	r2, r8
 8007a54:	e7df      	b.n	8007a16 <_printf_float+0x402>
 8007a56:	2301      	movs	r3, #1
 8007a58:	464a      	mov	r2, r9
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f ae38 	beq.w	80076d6 <_printf_float+0xc2>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	68e3      	ldr	r3, [r4, #12]
 8007a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a6e:	1a5b      	subs	r3, r3, r1
 8007a70:	4543      	cmp	r3, r8
 8007a72:	dcf0      	bgt.n	8007a56 <_printf_float+0x442>
 8007a74:	e6fa      	b.n	800786c <_printf_float+0x258>
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	f104 0919 	add.w	r9, r4, #25
 8007a7e:	e7f4      	b.n	8007a6a <_printf_float+0x456>

08007a80 <_printf_common>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	4616      	mov	r6, r2
 8007a86:	4699      	mov	r9, r3
 8007a88:	688a      	ldr	r2, [r1, #8]
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	bfb8      	it	lt
 8007a94:	4613      	movlt	r3, r2
 8007a96:	6033      	str	r3, [r6, #0]
 8007a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b10a      	cbz	r2, 8007aa6 <_printf_common+0x26>
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	6033      	str	r3, [r6, #0]
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	0699      	lsls	r1, r3, #26
 8007aaa:	bf42      	ittt	mi
 8007aac:	6833      	ldrmi	r3, [r6, #0]
 8007aae:	3302      	addmi	r3, #2
 8007ab0:	6033      	strmi	r3, [r6, #0]
 8007ab2:	6825      	ldr	r5, [r4, #0]
 8007ab4:	f015 0506 	ands.w	r5, r5, #6
 8007ab8:	d106      	bne.n	8007ac8 <_printf_common+0x48>
 8007aba:	f104 0a19 	add.w	sl, r4, #25
 8007abe:	68e3      	ldr	r3, [r4, #12]
 8007ac0:	6832      	ldr	r2, [r6, #0]
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	dc26      	bgt.n	8007b16 <_printf_common+0x96>
 8007ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007acc:	1e13      	subs	r3, r2, #0
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	bf18      	it	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	0692      	lsls	r2, r2, #26
 8007ad6:	d42b      	bmi.n	8007b30 <_printf_common+0xb0>
 8007ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007adc:	4649      	mov	r1, r9
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c0      	blx	r8
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d01e      	beq.n	8007b24 <_printf_common+0xa4>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	68e5      	ldr	r5, [r4, #12]
 8007aea:	6832      	ldr	r2, [r6, #0]
 8007aec:	f003 0306 	and.w	r3, r3, #6
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	bf08      	it	eq
 8007af4:	1aad      	subeq	r5, r5, r2
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	6922      	ldr	r2, [r4, #16]
 8007afa:	bf0c      	ite	eq
 8007afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b00:	2500      	movne	r5, #0
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bfc4      	itt	gt
 8007b06:	1a9b      	subgt	r3, r3, r2
 8007b08:	18ed      	addgt	r5, r5, r3
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	341a      	adds	r4, #26
 8007b0e:	42b5      	cmp	r5, r6
 8007b10:	d11a      	bne.n	8007b48 <_printf_common+0xc8>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e008      	b.n	8007b28 <_printf_common+0xa8>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	47c0      	blx	r8
 8007b20:	3001      	adds	r0, #1
 8007b22:	d103      	bne.n	8007b2c <_printf_common+0xac>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	e7c6      	b.n	8007abe <_printf_common+0x3e>
 8007b30:	18e1      	adds	r1, r4, r3
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	2030      	movs	r0, #48	; 0x30
 8007b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b3a:	4422      	add	r2, r4
 8007b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b44:	3302      	adds	r3, #2
 8007b46:	e7c7      	b.n	8007ad8 <_printf_common+0x58>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c0      	blx	r8
 8007b52:	3001      	adds	r0, #1
 8007b54:	d0e6      	beq.n	8007b24 <_printf_common+0xa4>
 8007b56:	3601      	adds	r6, #1
 8007b58:	e7d9      	b.n	8007b0e <_printf_common+0x8e>
	...

08007b5c <_printf_i>:
 8007b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	460c      	mov	r4, r1
 8007b62:	4691      	mov	r9, r2
 8007b64:	7e27      	ldrb	r7, [r4, #24]
 8007b66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b68:	2f78      	cmp	r7, #120	; 0x78
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	469a      	mov	sl, r3
 8007b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b72:	d807      	bhi.n	8007b84 <_printf_i+0x28>
 8007b74:	2f62      	cmp	r7, #98	; 0x62
 8007b76:	d80a      	bhi.n	8007b8e <_printf_i+0x32>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	f000 80d8 	beq.w	8007d2e <_printf_i+0x1d2>
 8007b7e:	2f58      	cmp	r7, #88	; 0x58
 8007b80:	f000 80a3 	beq.w	8007cca <_printf_i+0x16e>
 8007b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b8c:	e03a      	b.n	8007c04 <_printf_i+0xa8>
 8007b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b92:	2b15      	cmp	r3, #21
 8007b94:	d8f6      	bhi.n	8007b84 <_printf_i+0x28>
 8007b96:	a001      	add	r0, pc, #4	; (adr r0, 8007b9c <_printf_i+0x40>)
 8007b98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007b85 	.word	0x08007b85
 8007ba8:	08007b85 	.word	0x08007b85
 8007bac:	08007b85 	.word	0x08007b85
 8007bb0:	08007b85 	.word	0x08007b85
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b85 	.word	0x08007b85
 8007bbc:	08007b85 	.word	0x08007b85
 8007bc0:	08007b85 	.word	0x08007b85
 8007bc4:	08007b85 	.word	0x08007b85
 8007bc8:	08007d15 	.word	0x08007d15
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007cf7 	.word	0x08007cf7
 8007bd4:	08007b85 	.word	0x08007b85
 8007bd8:	08007b85 	.word	0x08007b85
 8007bdc:	08007d37 	.word	0x08007d37
 8007be0:	08007b85 	.word	0x08007b85
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007b85 	.word	0x08007b85
 8007bec:	08007b85 	.word	0x08007b85
 8007bf0:	08007cff 	.word	0x08007cff
 8007bf4:	680b      	ldr	r3, [r1, #0]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	600a      	str	r2, [r1, #0]
 8007bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0a3      	b.n	8007d50 <_printf_i+0x1f4>
 8007c08:	6825      	ldr	r5, [r4, #0]
 8007c0a:	6808      	ldr	r0, [r1, #0]
 8007c0c:	062e      	lsls	r6, r5, #24
 8007c0e:	f100 0304 	add.w	r3, r0, #4
 8007c12:	d50a      	bpl.n	8007c2a <_printf_i+0xce>
 8007c14:	6805      	ldr	r5, [r0, #0]
 8007c16:	600b      	str	r3, [r1, #0]
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	da03      	bge.n	8007c24 <_printf_i+0xc8>
 8007c1c:	232d      	movs	r3, #45	; 0x2d
 8007c1e:	426d      	negs	r5, r5
 8007c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c24:	485e      	ldr	r0, [pc, #376]	; (8007da0 <_printf_i+0x244>)
 8007c26:	230a      	movs	r3, #10
 8007c28:	e019      	b.n	8007c5e <_printf_i+0x102>
 8007c2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c2e:	6805      	ldr	r5, [r0, #0]
 8007c30:	600b      	str	r3, [r1, #0]
 8007c32:	bf18      	it	ne
 8007c34:	b22d      	sxthne	r5, r5
 8007c36:	e7ef      	b.n	8007c18 <_printf_i+0xbc>
 8007c38:	680b      	ldr	r3, [r1, #0]
 8007c3a:	6825      	ldr	r5, [r4, #0]
 8007c3c:	1d18      	adds	r0, r3, #4
 8007c3e:	6008      	str	r0, [r1, #0]
 8007c40:	0628      	lsls	r0, r5, #24
 8007c42:	d501      	bpl.n	8007c48 <_printf_i+0xec>
 8007c44:	681d      	ldr	r5, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <_printf_i+0xf2>
 8007c48:	0669      	lsls	r1, r5, #25
 8007c4a:	d5fb      	bpl.n	8007c44 <_printf_i+0xe8>
 8007c4c:	881d      	ldrh	r5, [r3, #0]
 8007c4e:	4854      	ldr	r0, [pc, #336]	; (8007da0 <_printf_i+0x244>)
 8007c50:	2f6f      	cmp	r7, #111	; 0x6f
 8007c52:	bf0c      	ite	eq
 8007c54:	2308      	moveq	r3, #8
 8007c56:	230a      	movne	r3, #10
 8007c58:	2100      	movs	r1, #0
 8007c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c5e:	6866      	ldr	r6, [r4, #4]
 8007c60:	60a6      	str	r6, [r4, #8]
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	bfa2      	ittt	ge
 8007c66:	6821      	ldrge	r1, [r4, #0]
 8007c68:	f021 0104 	bicge.w	r1, r1, #4
 8007c6c:	6021      	strge	r1, [r4, #0]
 8007c6e:	b90d      	cbnz	r5, 8007c74 <_printf_i+0x118>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	d04d      	beq.n	8007d10 <_printf_i+0x1b4>
 8007c74:	4616      	mov	r6, r2
 8007c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c7e:	5dc7      	ldrb	r7, [r0, r7]
 8007c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c84:	462f      	mov	r7, r5
 8007c86:	42bb      	cmp	r3, r7
 8007c88:	460d      	mov	r5, r1
 8007c8a:	d9f4      	bls.n	8007c76 <_printf_i+0x11a>
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d10b      	bne.n	8007ca8 <_printf_i+0x14c>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	07df      	lsls	r7, r3, #31
 8007c94:	d508      	bpl.n	8007ca8 <_printf_i+0x14c>
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	4299      	cmp	r1, r3
 8007c9c:	bfde      	ittt	le
 8007c9e:	2330      	movle	r3, #48	; 0x30
 8007ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ca8:	1b92      	subs	r2, r2, r6
 8007caa:	6122      	str	r2, [r4, #16]
 8007cac:	f8cd a000 	str.w	sl, [sp]
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	aa03      	add	r2, sp, #12
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	f7ff fee2 	bl	8007a80 <_printf_common>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d14c      	bne.n	8007d5a <_printf_i+0x1fe>
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	b004      	add	sp, #16
 8007cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cca:	4835      	ldr	r0, [pc, #212]	; (8007da0 <_printf_i+0x244>)
 8007ccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	680e      	ldr	r6, [r1, #0]
 8007cd4:	061f      	lsls	r7, r3, #24
 8007cd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cda:	600e      	str	r6, [r1, #0]
 8007cdc:	d514      	bpl.n	8007d08 <_printf_i+0x1ac>
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	bf44      	itt	mi
 8007ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ce6:	6023      	strmi	r3, [r4, #0]
 8007ce8:	b91d      	cbnz	r5, 8007cf2 <_printf_i+0x196>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	f023 0320 	bic.w	r3, r3, #32
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	2310      	movs	r3, #16
 8007cf4:	e7b0      	b.n	8007c58 <_printf_i+0xfc>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f043 0320 	orr.w	r3, r3, #32
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	2378      	movs	r3, #120	; 0x78
 8007d00:	4828      	ldr	r0, [pc, #160]	; (8007da4 <_printf_i+0x248>)
 8007d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d06:	e7e3      	b.n	8007cd0 <_printf_i+0x174>
 8007d08:	065e      	lsls	r6, r3, #25
 8007d0a:	bf48      	it	mi
 8007d0c:	b2ad      	uxthmi	r5, r5
 8007d0e:	e7e6      	b.n	8007cde <_printf_i+0x182>
 8007d10:	4616      	mov	r6, r2
 8007d12:	e7bb      	b.n	8007c8c <_printf_i+0x130>
 8007d14:	680b      	ldr	r3, [r1, #0]
 8007d16:	6826      	ldr	r6, [r4, #0]
 8007d18:	6960      	ldr	r0, [r4, #20]
 8007d1a:	1d1d      	adds	r5, r3, #4
 8007d1c:	600d      	str	r5, [r1, #0]
 8007d1e:	0635      	lsls	r5, r6, #24
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0x1cc>
 8007d24:	6018      	str	r0, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0x1d2>
 8007d28:	0671      	lsls	r1, r6, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0x1c8>
 8007d2c:	8018      	strh	r0, [r3, #0]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	4616      	mov	r6, r2
 8007d34:	e7ba      	b.n	8007cac <_printf_i+0x150>
 8007d36:	680b      	ldr	r3, [r1, #0]
 8007d38:	1d1a      	adds	r2, r3, #4
 8007d3a:	600a      	str	r2, [r1, #0]
 8007d3c:	681e      	ldr	r6, [r3, #0]
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	2100      	movs	r1, #0
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7f8 fa54 	bl	80001f0 <memchr>
 8007d48:	b108      	cbz	r0, 8007d4e <_printf_i+0x1f2>
 8007d4a:	1b80      	subs	r0, r0, r6
 8007d4c:	6060      	str	r0, [r4, #4]
 8007d4e:	6863      	ldr	r3, [r4, #4]
 8007d50:	6123      	str	r3, [r4, #16]
 8007d52:	2300      	movs	r3, #0
 8007d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d58:	e7a8      	b.n	8007cac <_printf_i+0x150>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	47d0      	blx	sl
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0ab      	beq.n	8007cc0 <_printf_i+0x164>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	079b      	lsls	r3, r3, #30
 8007d6c:	d413      	bmi.n	8007d96 <_printf_i+0x23a>
 8007d6e:	68e0      	ldr	r0, [r4, #12]
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	4298      	cmp	r0, r3
 8007d74:	bfb8      	it	lt
 8007d76:	4618      	movlt	r0, r3
 8007d78:	e7a4      	b.n	8007cc4 <_printf_i+0x168>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	4649      	mov	r1, r9
 8007d80:	4640      	mov	r0, r8
 8007d82:	47d0      	blx	sl
 8007d84:	3001      	adds	r0, #1
 8007d86:	d09b      	beq.n	8007cc0 <_printf_i+0x164>
 8007d88:	3501      	adds	r5, #1
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	9903      	ldr	r1, [sp, #12]
 8007d8e:	1a5b      	subs	r3, r3, r1
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dcf2      	bgt.n	8007d7a <_printf_i+0x21e>
 8007d94:	e7eb      	b.n	8007d6e <_printf_i+0x212>
 8007d96:	2500      	movs	r5, #0
 8007d98:	f104 0619 	add.w	r6, r4, #25
 8007d9c:	e7f5      	b.n	8007d8a <_printf_i+0x22e>
 8007d9e:	bf00      	nop
 8007da0:	0800a2c6 	.word	0x0800a2c6
 8007da4:	0800a2d7 	.word	0x0800a2d7

08007da8 <siprintf>:
 8007da8:	b40e      	push	{r1, r2, r3}
 8007daa:	b500      	push	{lr}
 8007dac:	b09c      	sub	sp, #112	; 0x70
 8007dae:	ab1d      	add	r3, sp, #116	; 0x74
 8007db0:	9002      	str	r0, [sp, #8]
 8007db2:	9006      	str	r0, [sp, #24]
 8007db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007db8:	4809      	ldr	r0, [pc, #36]	; (8007de0 <siprintf+0x38>)
 8007dba:	9107      	str	r1, [sp, #28]
 8007dbc:	9104      	str	r1, [sp, #16]
 8007dbe:	4909      	ldr	r1, [pc, #36]	; (8007de4 <siprintf+0x3c>)
 8007dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc4:	9105      	str	r1, [sp, #20]
 8007dc6:	6800      	ldr	r0, [r0, #0]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	a902      	add	r1, sp, #8
 8007dcc:	f001 fb32 	bl	8009434 <_svfiprintf_r>
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	b01c      	add	sp, #112	; 0x70
 8007dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ddc:	b003      	add	sp, #12
 8007dde:	4770      	bx	lr
 8007de0:	20000054 	.word	0x20000054
 8007de4:	ffff0208 	.word	0xffff0208

08007de8 <quorem>:
 8007de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	6903      	ldr	r3, [r0, #16]
 8007dee:	690c      	ldr	r4, [r1, #16]
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	4607      	mov	r7, r0
 8007df4:	f2c0 8081 	blt.w	8007efa <quorem+0x112>
 8007df8:	3c01      	subs	r4, #1
 8007dfa:	f101 0814 	add.w	r8, r1, #20
 8007dfe:	f100 0514 	add.w	r5, r0, #20
 8007e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e10:	3301      	adds	r3, #1
 8007e12:	429a      	cmp	r2, r3
 8007e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e20:	d331      	bcc.n	8007e86 <quorem+0x9e>
 8007e22:	f04f 0e00 	mov.w	lr, #0
 8007e26:	4640      	mov	r0, r8
 8007e28:	46ac      	mov	ip, r5
 8007e2a:	46f2      	mov	sl, lr
 8007e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e30:	b293      	uxth	r3, r2
 8007e32:	fb06 e303 	mla	r3, r6, r3, lr
 8007e36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8007e40:	0c12      	lsrs	r2, r2, #16
 8007e42:	f8dc a000 	ldr.w	sl, [ip]
 8007e46:	fb06 e202 	mla	r2, r6, r2, lr
 8007e4a:	fa13 f38a 	uxtah	r3, r3, sl
 8007e4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e52:	fa1f fa82 	uxth.w	sl, r2
 8007e56:	f8dc 2000 	ldr.w	r2, [ip]
 8007e5a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007e5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e68:	4581      	cmp	r9, r0
 8007e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8007e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e72:	d2db      	bcs.n	8007e2c <quorem+0x44>
 8007e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e78:	b92b      	cbnz	r3, 8007e86 <quorem+0x9e>
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	d32e      	bcc.n	8007ee2 <quorem+0xfa>
 8007e84:	613c      	str	r4, [r7, #16]
 8007e86:	4638      	mov	r0, r7
 8007e88:	f001 f8be 	bl	8009008 <__mcmp>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	db24      	blt.n	8007eda <quorem+0xf2>
 8007e90:	3601      	adds	r6, #1
 8007e92:	4628      	mov	r0, r5
 8007e94:	f04f 0c00 	mov.w	ip, #0
 8007e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007ea0:	b293      	uxth	r3, r2
 8007ea2:	ebac 0303 	sub.w	r3, ip, r3
 8007ea6:	0c12      	lsrs	r2, r2, #16
 8007ea8:	fa13 f38e 	uxtah	r3, r3, lr
 8007eac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eba:	45c1      	cmp	r9, r8
 8007ebc:	f840 3b04 	str.w	r3, [r0], #4
 8007ec0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ec4:	d2e8      	bcs.n	8007e98 <quorem+0xb0>
 8007ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ece:	b922      	cbnz	r2, 8007eda <quorem+0xf2>
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	d30a      	bcc.n	8007eee <quorem+0x106>
 8007ed8:	613c      	str	r4, [r7, #16]
 8007eda:	4630      	mov	r0, r6
 8007edc:	b003      	add	sp, #12
 8007ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	3b04      	subs	r3, #4
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	d1cc      	bne.n	8007e84 <quorem+0x9c>
 8007eea:	3c01      	subs	r4, #1
 8007eec:	e7c7      	b.n	8007e7e <quorem+0x96>
 8007eee:	6812      	ldr	r2, [r2, #0]
 8007ef0:	3b04      	subs	r3, #4
 8007ef2:	2a00      	cmp	r2, #0
 8007ef4:	d1f0      	bne.n	8007ed8 <quorem+0xf0>
 8007ef6:	3c01      	subs	r4, #1
 8007ef8:	e7eb      	b.n	8007ed2 <quorem+0xea>
 8007efa:	2000      	movs	r0, #0
 8007efc:	e7ee      	b.n	8007edc <quorem+0xf4>
	...

08007f00 <_dtoa_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	ed2d 8b02 	vpush	{d8}
 8007f08:	ec57 6b10 	vmov	r6, r7, d0
 8007f0c:	b095      	sub	sp, #84	; 0x54
 8007f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f20:	b975      	cbnz	r5, 8007f40 <_dtoa_r+0x40>
 8007f22:	2010      	movs	r0, #16
 8007f24:	f000 fddc 	bl	8008ae0 <malloc>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007f2c:	b920      	cbnz	r0, 8007f38 <_dtoa_r+0x38>
 8007f2e:	4bb2      	ldr	r3, [pc, #712]	; (80081f8 <_dtoa_r+0x2f8>)
 8007f30:	21ea      	movs	r1, #234	; 0xea
 8007f32:	48b2      	ldr	r0, [pc, #712]	; (80081fc <_dtoa_r+0x2fc>)
 8007f34:	f001 fb8e 	bl	8009654 <__assert_func>
 8007f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f3c:	6005      	str	r5, [r0, #0]
 8007f3e:	60c5      	str	r5, [r0, #12]
 8007f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	b151      	cbz	r1, 8007f5c <_dtoa_r+0x5c>
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	604a      	str	r2, [r1, #4]
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4093      	lsls	r3, r2
 8007f4e:	608b      	str	r3, [r1, #8]
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fe1b 	bl	8008b8c <_Bfree>
 8007f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	1e3b      	subs	r3, r7, #0
 8007f5e:	bfb9      	ittee	lt
 8007f60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f64:	9303      	strlt	r3, [sp, #12]
 8007f66:	2300      	movge	r3, #0
 8007f68:	f8c8 3000 	strge.w	r3, [r8]
 8007f6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007f70:	4ba3      	ldr	r3, [pc, #652]	; (8008200 <_dtoa_r+0x300>)
 8007f72:	bfbc      	itt	lt
 8007f74:	2201      	movlt	r2, #1
 8007f76:	f8c8 2000 	strlt.w	r2, [r8]
 8007f7a:	ea33 0309 	bics.w	r3, r3, r9
 8007f7e:	d11b      	bne.n	8007fb8 <_dtoa_r+0xb8>
 8007f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f82:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f8c:	4333      	orrs	r3, r6
 8007f8e:	f000 857a 	beq.w	8008a86 <_dtoa_r+0xb86>
 8007f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f94:	b963      	cbnz	r3, 8007fb0 <_dtoa_r+0xb0>
 8007f96:	4b9b      	ldr	r3, [pc, #620]	; (8008204 <_dtoa_r+0x304>)
 8007f98:	e024      	b.n	8007fe4 <_dtoa_r+0xe4>
 8007f9a:	4b9b      	ldr	r3, [pc, #620]	; (8008208 <_dtoa_r+0x308>)
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	9800      	ldr	r0, [sp, #0]
 8007fa6:	b015      	add	sp, #84	; 0x54
 8007fa8:	ecbd 8b02 	vpop	{d8}
 8007fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb0:	4b94      	ldr	r3, [pc, #592]	; (8008204 <_dtoa_r+0x304>)
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	3303      	adds	r3, #3
 8007fb6:	e7f3      	b.n	8007fa0 <_dtoa_r+0xa0>
 8007fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	ec51 0b17 	vmov	r0, r1, d7
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007fc8:	f7f8 fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fcc:	4680      	mov	r8, r0
 8007fce:	b158      	cbz	r0, 8007fe8 <_dtoa_r+0xe8>
 8007fd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8551 	beq.w	8008a80 <_dtoa_r+0xb80>
 8007fde:	488b      	ldr	r0, [pc, #556]	; (800820c <_dtoa_r+0x30c>)
 8007fe0:	6018      	str	r0, [r3, #0]
 8007fe2:	1e43      	subs	r3, r0, #1
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	e7dd      	b.n	8007fa4 <_dtoa_r+0xa4>
 8007fe8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007fec:	aa12      	add	r2, sp, #72	; 0x48
 8007fee:	a913      	add	r1, sp, #76	; 0x4c
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f001 f8ad 	bl	8009150 <__d2b>
 8007ff6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ffa:	4683      	mov	fp, r0
 8007ffc:	2d00      	cmp	r5, #0
 8007ffe:	d07c      	beq.n	80080fa <_dtoa_r+0x1fa>
 8008000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008002:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800800a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800800e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008012:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800801a:	4b7d      	ldr	r3, [pc, #500]	; (8008210 <_dtoa_r+0x310>)
 800801c:	2200      	movs	r2, #0
 800801e:	4630      	mov	r0, r6
 8008020:	4639      	mov	r1, r7
 8008022:	f7f8 f939 	bl	8000298 <__aeabi_dsub>
 8008026:	a36e      	add	r3, pc, #440	; (adr r3, 80081e0 <_dtoa_r+0x2e0>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 faec 	bl	8000608 <__aeabi_dmul>
 8008030:	a36d      	add	r3, pc, #436	; (adr r3, 80081e8 <_dtoa_r+0x2e8>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 f931 	bl	800029c <__adddf3>
 800803a:	4606      	mov	r6, r0
 800803c:	4628      	mov	r0, r5
 800803e:	460f      	mov	r7, r1
 8008040:	f7f8 fa78 	bl	8000534 <__aeabi_i2d>
 8008044:	a36a      	add	r3, pc, #424	; (adr r3, 80081f0 <_dtoa_r+0x2f0>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 fadd 	bl	8000608 <__aeabi_dmul>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f921 	bl	800029c <__adddf3>
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	f7f8 fd83 	bl	8000b68 <__aeabi_d2iz>
 8008062:	2200      	movs	r2, #0
 8008064:	4682      	mov	sl, r0
 8008066:	2300      	movs	r3, #0
 8008068:	4630      	mov	r0, r6
 800806a:	4639      	mov	r1, r7
 800806c:	f7f8 fd3e 	bl	8000aec <__aeabi_dcmplt>
 8008070:	b148      	cbz	r0, 8008086 <_dtoa_r+0x186>
 8008072:	4650      	mov	r0, sl
 8008074:	f7f8 fa5e 	bl	8000534 <__aeabi_i2d>
 8008078:	4632      	mov	r2, r6
 800807a:	463b      	mov	r3, r7
 800807c:	f7f8 fd2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008080:	b908      	cbnz	r0, 8008086 <_dtoa_r+0x186>
 8008082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008086:	f1ba 0f16 	cmp.w	sl, #22
 800808a:	d854      	bhi.n	8008136 <_dtoa_r+0x236>
 800808c:	4b61      	ldr	r3, [pc, #388]	; (8008214 <_dtoa_r+0x314>)
 800808e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800809a:	f7f8 fd27 	bl	8000aec <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d04b      	beq.n	800813a <_dtoa_r+0x23a>
 80080a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080a6:	2300      	movs	r3, #0
 80080a8:	930e      	str	r3, [sp, #56]	; 0x38
 80080aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080ac:	1b5d      	subs	r5, r3, r5
 80080ae:	1e6b      	subs	r3, r5, #1
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	bf43      	ittte	mi
 80080b4:	2300      	movmi	r3, #0
 80080b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80080ba:	9304      	strmi	r3, [sp, #16]
 80080bc:	f04f 0800 	movpl.w	r8, #0
 80080c0:	f1ba 0f00 	cmp.w	sl, #0
 80080c4:	db3b      	blt.n	800813e <_dtoa_r+0x23e>
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80080cc:	4453      	add	r3, sl
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	2300      	movs	r3, #0
 80080d2:	9306      	str	r3, [sp, #24]
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	2b09      	cmp	r3, #9
 80080d8:	d869      	bhi.n	80081ae <_dtoa_r+0x2ae>
 80080da:	2b05      	cmp	r3, #5
 80080dc:	bfc4      	itt	gt
 80080de:	3b04      	subgt	r3, #4
 80080e0:	9305      	strgt	r3, [sp, #20]
 80080e2:	9b05      	ldr	r3, [sp, #20]
 80080e4:	f1a3 0302 	sub.w	r3, r3, #2
 80080e8:	bfcc      	ite	gt
 80080ea:	2500      	movgt	r5, #0
 80080ec:	2501      	movle	r5, #1
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d869      	bhi.n	80081c6 <_dtoa_r+0x2c6>
 80080f2:	e8df f003 	tbb	[pc, r3]
 80080f6:	4e2c      	.short	0x4e2c
 80080f8:	5a4c      	.short	0x5a4c
 80080fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80080fe:	441d      	add	r5, r3
 8008100:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008104:	2b20      	cmp	r3, #32
 8008106:	bfc1      	itttt	gt
 8008108:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800810c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008110:	fa09 f303 	lslgt.w	r3, r9, r3
 8008114:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008118:	bfda      	itte	le
 800811a:	f1c3 0320 	rsble	r3, r3, #32
 800811e:	fa06 f003 	lslle.w	r0, r6, r3
 8008122:	4318      	orrgt	r0, r3
 8008124:	f7f8 f9f6 	bl	8000514 <__aeabi_ui2d>
 8008128:	2301      	movs	r3, #1
 800812a:	4606      	mov	r6, r0
 800812c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008130:	3d01      	subs	r5, #1
 8008132:	9310      	str	r3, [sp, #64]	; 0x40
 8008134:	e771      	b.n	800801a <_dtoa_r+0x11a>
 8008136:	2301      	movs	r3, #1
 8008138:	e7b6      	b.n	80080a8 <_dtoa_r+0x1a8>
 800813a:	900e      	str	r0, [sp, #56]	; 0x38
 800813c:	e7b5      	b.n	80080aa <_dtoa_r+0x1aa>
 800813e:	f1ca 0300 	rsb	r3, sl, #0
 8008142:	9306      	str	r3, [sp, #24]
 8008144:	2300      	movs	r3, #0
 8008146:	eba8 080a 	sub.w	r8, r8, sl
 800814a:	930d      	str	r3, [sp, #52]	; 0x34
 800814c:	e7c2      	b.n	80080d4 <_dtoa_r+0x1d4>
 800814e:	2300      	movs	r3, #0
 8008150:	9308      	str	r3, [sp, #32]
 8008152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	dc39      	bgt.n	80081cc <_dtoa_r+0x2cc>
 8008158:	f04f 0901 	mov.w	r9, #1
 800815c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008160:	464b      	mov	r3, r9
 8008162:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008166:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008168:	2200      	movs	r2, #0
 800816a:	6042      	str	r2, [r0, #4]
 800816c:	2204      	movs	r2, #4
 800816e:	f102 0614 	add.w	r6, r2, #20
 8008172:	429e      	cmp	r6, r3
 8008174:	6841      	ldr	r1, [r0, #4]
 8008176:	d92f      	bls.n	80081d8 <_dtoa_r+0x2d8>
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fcc7 	bl	8008b0c <_Balloc>
 800817e:	9000      	str	r0, [sp, #0]
 8008180:	2800      	cmp	r0, #0
 8008182:	d14b      	bne.n	800821c <_dtoa_r+0x31c>
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <_dtoa_r+0x318>)
 8008186:	4602      	mov	r2, r0
 8008188:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800818c:	e6d1      	b.n	8007f32 <_dtoa_r+0x32>
 800818e:	2301      	movs	r3, #1
 8008190:	e7de      	b.n	8008150 <_dtoa_r+0x250>
 8008192:	2300      	movs	r3, #0
 8008194:	9308      	str	r3, [sp, #32]
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	eb0a 0903 	add.w	r9, sl, r3
 800819c:	f109 0301 	add.w	r3, r9, #1
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	bfb8      	it	lt
 80081a6:	2301      	movlt	r3, #1
 80081a8:	e7dd      	b.n	8008166 <_dtoa_r+0x266>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7f2      	b.n	8008194 <_dtoa_r+0x294>
 80081ae:	2501      	movs	r5, #1
 80081b0:	2300      	movs	r3, #0
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	9508      	str	r5, [sp, #32]
 80081b6:	f04f 39ff 	mov.w	r9, #4294967295
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80081c0:	2312      	movs	r3, #18
 80081c2:	9209      	str	r2, [sp, #36]	; 0x24
 80081c4:	e7cf      	b.n	8008166 <_dtoa_r+0x266>
 80081c6:	2301      	movs	r3, #1
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	e7f4      	b.n	80081b6 <_dtoa_r+0x2b6>
 80081cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80081d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80081d4:	464b      	mov	r3, r9
 80081d6:	e7c6      	b.n	8008166 <_dtoa_r+0x266>
 80081d8:	3101      	adds	r1, #1
 80081da:	6041      	str	r1, [r0, #4]
 80081dc:	0052      	lsls	r2, r2, #1
 80081de:	e7c6      	b.n	800816e <_dtoa_r+0x26e>
 80081e0:	636f4361 	.word	0x636f4361
 80081e4:	3fd287a7 	.word	0x3fd287a7
 80081e8:	8b60c8b3 	.word	0x8b60c8b3
 80081ec:	3fc68a28 	.word	0x3fc68a28
 80081f0:	509f79fb 	.word	0x509f79fb
 80081f4:	3fd34413 	.word	0x3fd34413
 80081f8:	0800a2f5 	.word	0x0800a2f5
 80081fc:	0800a30c 	.word	0x0800a30c
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	0800a2f1 	.word	0x0800a2f1
 8008208:	0800a2e8 	.word	0x0800a2e8
 800820c:	0800a2c5 	.word	0x0800a2c5
 8008210:	3ff80000 	.word	0x3ff80000
 8008214:	0800a408 	.word	0x0800a408
 8008218:	0800a36b 	.word	0x0800a36b
 800821c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800821e:	9a00      	ldr	r2, [sp, #0]
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	2b0e      	cmp	r3, #14
 8008226:	f200 80ad 	bhi.w	8008384 <_dtoa_r+0x484>
 800822a:	2d00      	cmp	r5, #0
 800822c:	f000 80aa 	beq.w	8008384 <_dtoa_r+0x484>
 8008230:	f1ba 0f00 	cmp.w	sl, #0
 8008234:	dd36      	ble.n	80082a4 <_dtoa_r+0x3a4>
 8008236:	4ac3      	ldr	r2, [pc, #780]	; (8008544 <_dtoa_r+0x644>)
 8008238:	f00a 030f 	and.w	r3, sl, #15
 800823c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008240:	ed93 7b00 	vldr	d7, [r3]
 8008244:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008248:	ea4f 172a 	mov.w	r7, sl, asr #4
 800824c:	eeb0 8a47 	vmov.f32	s16, s14
 8008250:	eef0 8a67 	vmov.f32	s17, s15
 8008254:	d016      	beq.n	8008284 <_dtoa_r+0x384>
 8008256:	4bbc      	ldr	r3, [pc, #752]	; (8008548 <_dtoa_r+0x648>)
 8008258:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800825c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008260:	f7f8 fafc 	bl	800085c <__aeabi_ddiv>
 8008264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008268:	f007 070f 	and.w	r7, r7, #15
 800826c:	2503      	movs	r5, #3
 800826e:	4eb6      	ldr	r6, [pc, #728]	; (8008548 <_dtoa_r+0x648>)
 8008270:	b957      	cbnz	r7, 8008288 <_dtoa_r+0x388>
 8008272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008276:	ec53 2b18 	vmov	r2, r3, d8
 800827a:	f7f8 faef 	bl	800085c <__aeabi_ddiv>
 800827e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008282:	e029      	b.n	80082d8 <_dtoa_r+0x3d8>
 8008284:	2502      	movs	r5, #2
 8008286:	e7f2      	b.n	800826e <_dtoa_r+0x36e>
 8008288:	07f9      	lsls	r1, r7, #31
 800828a:	d508      	bpl.n	800829e <_dtoa_r+0x39e>
 800828c:	ec51 0b18 	vmov	r0, r1, d8
 8008290:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008294:	f7f8 f9b8 	bl	8000608 <__aeabi_dmul>
 8008298:	ec41 0b18 	vmov	d8, r0, r1
 800829c:	3501      	adds	r5, #1
 800829e:	107f      	asrs	r7, r7, #1
 80082a0:	3608      	adds	r6, #8
 80082a2:	e7e5      	b.n	8008270 <_dtoa_r+0x370>
 80082a4:	f000 80a6 	beq.w	80083f4 <_dtoa_r+0x4f4>
 80082a8:	f1ca 0600 	rsb	r6, sl, #0
 80082ac:	4ba5      	ldr	r3, [pc, #660]	; (8008544 <_dtoa_r+0x644>)
 80082ae:	4fa6      	ldr	r7, [pc, #664]	; (8008548 <_dtoa_r+0x648>)
 80082b0:	f006 020f 	and.w	r2, r6, #15
 80082b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082c0:	f7f8 f9a2 	bl	8000608 <__aeabi_dmul>
 80082c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c8:	1136      	asrs	r6, r6, #4
 80082ca:	2300      	movs	r3, #0
 80082cc:	2502      	movs	r5, #2
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	f040 8085 	bne.w	80083de <_dtoa_r+0x4de>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1d2      	bne.n	800827e <_dtoa_r+0x37e>
 80082d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 808c 	beq.w	80083f8 <_dtoa_r+0x4f8>
 80082e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082e4:	4b99      	ldr	r3, [pc, #612]	; (800854c <_dtoa_r+0x64c>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 fbfe 	bl	8000aec <__aeabi_dcmplt>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f000 8081 	beq.w	80083f8 <_dtoa_r+0x4f8>
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d07d      	beq.n	80083f8 <_dtoa_r+0x4f8>
 80082fc:	f1b9 0f00 	cmp.w	r9, #0
 8008300:	dd3c      	ble.n	800837c <_dtoa_r+0x47c>
 8008302:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008306:	9307      	str	r3, [sp, #28]
 8008308:	2200      	movs	r2, #0
 800830a:	4b91      	ldr	r3, [pc, #580]	; (8008550 <_dtoa_r+0x650>)
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f8 f97a 	bl	8000608 <__aeabi_dmul>
 8008314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008318:	3501      	adds	r5, #1
 800831a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800831e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008322:	4628      	mov	r0, r5
 8008324:	f7f8 f906 	bl	8000534 <__aeabi_i2d>
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	4b88      	ldr	r3, [pc, #544]	; (8008554 <_dtoa_r+0x654>)
 8008332:	2200      	movs	r2, #0
 8008334:	f7f7 ffb2 	bl	800029c <__adddf3>
 8008338:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800833c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008340:	9303      	str	r3, [sp, #12]
 8008342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008344:	2b00      	cmp	r3, #0
 8008346:	d15c      	bne.n	8008402 <_dtoa_r+0x502>
 8008348:	4b83      	ldr	r3, [pc, #524]	; (8008558 <_dtoa_r+0x658>)
 800834a:	2200      	movs	r2, #0
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f7 ffa2 	bl	8000298 <__aeabi_dsub>
 8008354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008358:	4606      	mov	r6, r0
 800835a:	460f      	mov	r7, r1
 800835c:	f7f8 fbe4 	bl	8000b28 <__aeabi_dcmpgt>
 8008360:	2800      	cmp	r0, #0
 8008362:	f040 8296 	bne.w	8008892 <_dtoa_r+0x992>
 8008366:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800836a:	4630      	mov	r0, r6
 800836c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008370:	4639      	mov	r1, r7
 8008372:	f7f8 fbbb 	bl	8000aec <__aeabi_dcmplt>
 8008376:	2800      	cmp	r0, #0
 8008378:	f040 8288 	bne.w	800888c <_dtoa_r+0x98c>
 800837c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008380:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008386:	2b00      	cmp	r3, #0
 8008388:	f2c0 8158 	blt.w	800863c <_dtoa_r+0x73c>
 800838c:	f1ba 0f0e 	cmp.w	sl, #14
 8008390:	f300 8154 	bgt.w	800863c <_dtoa_r+0x73c>
 8008394:	4b6b      	ldr	r3, [pc, #428]	; (8008544 <_dtoa_r+0x644>)
 8008396:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800839a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800839e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f280 80e3 	bge.w	800856c <_dtoa_r+0x66c>
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f300 80df 	bgt.w	800856c <_dtoa_r+0x66c>
 80083ae:	f040 826d 	bne.w	800888c <_dtoa_r+0x98c>
 80083b2:	4b69      	ldr	r3, [pc, #420]	; (8008558 <_dtoa_r+0x658>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	f7f8 f925 	bl	8000608 <__aeabi_dmul>
 80083be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c2:	f7f8 fba7 	bl	8000b14 <__aeabi_dcmpge>
 80083c6:	9e01      	ldr	r6, [sp, #4]
 80083c8:	4637      	mov	r7, r6
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f040 8243 	bne.w	8008856 <_dtoa_r+0x956>
 80083d0:	9d00      	ldr	r5, [sp, #0]
 80083d2:	2331      	movs	r3, #49	; 0x31
 80083d4:	f805 3b01 	strb.w	r3, [r5], #1
 80083d8:	f10a 0a01 	add.w	sl, sl, #1
 80083dc:	e23f      	b.n	800885e <_dtoa_r+0x95e>
 80083de:	07f2      	lsls	r2, r6, #31
 80083e0:	d505      	bpl.n	80083ee <_dtoa_r+0x4ee>
 80083e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e6:	f7f8 f90f 	bl	8000608 <__aeabi_dmul>
 80083ea:	3501      	adds	r5, #1
 80083ec:	2301      	movs	r3, #1
 80083ee:	1076      	asrs	r6, r6, #1
 80083f0:	3708      	adds	r7, #8
 80083f2:	e76c      	b.n	80082ce <_dtoa_r+0x3ce>
 80083f4:	2502      	movs	r5, #2
 80083f6:	e76f      	b.n	80082d8 <_dtoa_r+0x3d8>
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80083fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008400:	e78d      	b.n	800831e <_dtoa_r+0x41e>
 8008402:	9900      	ldr	r1, [sp, #0]
 8008404:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008408:	4b4e      	ldr	r3, [pc, #312]	; (8008544 <_dtoa_r+0x644>)
 800840a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800840e:	4401      	add	r1, r0
 8008410:	9102      	str	r1, [sp, #8]
 8008412:	9908      	ldr	r1, [sp, #32]
 8008414:	eeb0 8a47 	vmov.f32	s16, s14
 8008418:	eef0 8a67 	vmov.f32	s17, s15
 800841c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008420:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008424:	2900      	cmp	r1, #0
 8008426:	d045      	beq.n	80084b4 <_dtoa_r+0x5b4>
 8008428:	494c      	ldr	r1, [pc, #304]	; (800855c <_dtoa_r+0x65c>)
 800842a:	2000      	movs	r0, #0
 800842c:	f7f8 fa16 	bl	800085c <__aeabi_ddiv>
 8008430:	ec53 2b18 	vmov	r2, r3, d8
 8008434:	f7f7 ff30 	bl	8000298 <__aeabi_dsub>
 8008438:	9d00      	ldr	r5, [sp, #0]
 800843a:	ec41 0b18 	vmov	d8, r0, r1
 800843e:	4639      	mov	r1, r7
 8008440:	4630      	mov	r0, r6
 8008442:	f7f8 fb91 	bl	8000b68 <__aeabi_d2iz>
 8008446:	900c      	str	r0, [sp, #48]	; 0x30
 8008448:	f7f8 f874 	bl	8000534 <__aeabi_i2d>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	f7f7 ff20 	bl	8000298 <__aeabi_dsub>
 8008458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800845a:	3330      	adds	r3, #48	; 0x30
 800845c:	f805 3b01 	strb.w	r3, [r5], #1
 8008460:	ec53 2b18 	vmov	r2, r3, d8
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	f7f8 fb40 	bl	8000aec <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	d165      	bne.n	800853c <_dtoa_r+0x63c>
 8008470:	4632      	mov	r2, r6
 8008472:	463b      	mov	r3, r7
 8008474:	4935      	ldr	r1, [pc, #212]	; (800854c <_dtoa_r+0x64c>)
 8008476:	2000      	movs	r0, #0
 8008478:	f7f7 ff0e 	bl	8000298 <__aeabi_dsub>
 800847c:	ec53 2b18 	vmov	r2, r3, d8
 8008480:	f7f8 fb34 	bl	8000aec <__aeabi_dcmplt>
 8008484:	2800      	cmp	r0, #0
 8008486:	f040 80b9 	bne.w	80085fc <_dtoa_r+0x6fc>
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	429d      	cmp	r5, r3
 800848e:	f43f af75 	beq.w	800837c <_dtoa_r+0x47c>
 8008492:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <_dtoa_r+0x650>)
 8008494:	ec51 0b18 	vmov	r0, r1, d8
 8008498:	2200      	movs	r2, #0
 800849a:	f7f8 f8b5 	bl	8000608 <__aeabi_dmul>
 800849e:	4b2c      	ldr	r3, [pc, #176]	; (8008550 <_dtoa_r+0x650>)
 80084a0:	ec41 0b18 	vmov	d8, r0, r1
 80084a4:	2200      	movs	r2, #0
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f8 f8ad 	bl	8000608 <__aeabi_dmul>
 80084ae:	4606      	mov	r6, r0
 80084b0:	460f      	mov	r7, r1
 80084b2:	e7c4      	b.n	800843e <_dtoa_r+0x53e>
 80084b4:	ec51 0b17 	vmov	r0, r1, d7
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	9b02      	ldr	r3, [sp, #8]
 80084be:	9d00      	ldr	r5, [sp, #0]
 80084c0:	930c      	str	r3, [sp, #48]	; 0x30
 80084c2:	ec41 0b18 	vmov	d8, r0, r1
 80084c6:	4639      	mov	r1, r7
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7f8 fb4d 	bl	8000b68 <__aeabi_d2iz>
 80084ce:	9011      	str	r0, [sp, #68]	; 0x44
 80084d0:	f7f8 f830 	bl	8000534 <__aeabi_i2d>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f7 fedc 	bl	8000298 <__aeabi_dsub>
 80084e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084e2:	3330      	adds	r3, #48	; 0x30
 80084e4:	f805 3b01 	strb.w	r3, [r5], #1
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	429d      	cmp	r5, r3
 80084ec:	4606      	mov	r6, r0
 80084ee:	460f      	mov	r7, r1
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	d134      	bne.n	8008560 <_dtoa_r+0x660>
 80084f6:	4b19      	ldr	r3, [pc, #100]	; (800855c <_dtoa_r+0x65c>)
 80084f8:	ec51 0b18 	vmov	r0, r1, d8
 80084fc:	f7f7 fece 	bl	800029c <__adddf3>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	f7f8 fb0e 	bl	8000b28 <__aeabi_dcmpgt>
 800850c:	2800      	cmp	r0, #0
 800850e:	d175      	bne.n	80085fc <_dtoa_r+0x6fc>
 8008510:	ec53 2b18 	vmov	r2, r3, d8
 8008514:	4911      	ldr	r1, [pc, #68]	; (800855c <_dtoa_r+0x65c>)
 8008516:	2000      	movs	r0, #0
 8008518:	f7f7 febe 	bl	8000298 <__aeabi_dsub>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f8 fae2 	bl	8000aec <__aeabi_dcmplt>
 8008528:	2800      	cmp	r0, #0
 800852a:	f43f af27 	beq.w	800837c <_dtoa_r+0x47c>
 800852e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008530:	1e6b      	subs	r3, r5, #1
 8008532:	930c      	str	r3, [sp, #48]	; 0x30
 8008534:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008538:	2b30      	cmp	r3, #48	; 0x30
 800853a:	d0f8      	beq.n	800852e <_dtoa_r+0x62e>
 800853c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008540:	e04a      	b.n	80085d8 <_dtoa_r+0x6d8>
 8008542:	bf00      	nop
 8008544:	0800a408 	.word	0x0800a408
 8008548:	0800a3e0 	.word	0x0800a3e0
 800854c:	3ff00000 	.word	0x3ff00000
 8008550:	40240000 	.word	0x40240000
 8008554:	401c0000 	.word	0x401c0000
 8008558:	40140000 	.word	0x40140000
 800855c:	3fe00000 	.word	0x3fe00000
 8008560:	4baf      	ldr	r3, [pc, #700]	; (8008820 <_dtoa_r+0x920>)
 8008562:	f7f8 f851 	bl	8000608 <__aeabi_dmul>
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	e7ac      	b.n	80084c6 <_dtoa_r+0x5c6>
 800856c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008570:	9d00      	ldr	r5, [sp, #0]
 8008572:	4642      	mov	r2, r8
 8008574:	464b      	mov	r3, r9
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f8 f96f 	bl	800085c <__aeabi_ddiv>
 800857e:	f7f8 faf3 	bl	8000b68 <__aeabi_d2iz>
 8008582:	9002      	str	r0, [sp, #8]
 8008584:	f7f7 ffd6 	bl	8000534 <__aeabi_i2d>
 8008588:	4642      	mov	r2, r8
 800858a:	464b      	mov	r3, r9
 800858c:	f7f8 f83c 	bl	8000608 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4630      	mov	r0, r6
 8008596:	4639      	mov	r1, r7
 8008598:	f7f7 fe7e 	bl	8000298 <__aeabi_dsub>
 800859c:	9e02      	ldr	r6, [sp, #8]
 800859e:	9f01      	ldr	r7, [sp, #4]
 80085a0:	3630      	adds	r6, #48	; 0x30
 80085a2:	f805 6b01 	strb.w	r6, [r5], #1
 80085a6:	9e00      	ldr	r6, [sp, #0]
 80085a8:	1bae      	subs	r6, r5, r6
 80085aa:	42b7      	cmp	r7, r6
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	d137      	bne.n	8008622 <_dtoa_r+0x722>
 80085b2:	f7f7 fe73 	bl	800029c <__adddf3>
 80085b6:	4642      	mov	r2, r8
 80085b8:	464b      	mov	r3, r9
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	f7f8 fab3 	bl	8000b28 <__aeabi_dcmpgt>
 80085c2:	b9c8      	cbnz	r0, 80085f8 <_dtoa_r+0x6f8>
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80085d0:	b110      	cbz	r0, 80085d8 <_dtoa_r+0x6d8>
 80085d2:	9b02      	ldr	r3, [sp, #8]
 80085d4:	07d9      	lsls	r1, r3, #31
 80085d6:	d40f      	bmi.n	80085f8 <_dtoa_r+0x6f8>
 80085d8:	4620      	mov	r0, r4
 80085da:	4659      	mov	r1, fp
 80085dc:	f000 fad6 	bl	8008b8c <_Bfree>
 80085e0:	2300      	movs	r3, #0
 80085e2:	702b      	strb	r3, [r5, #0]
 80085e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e6:	f10a 0001 	add.w	r0, sl, #1
 80085ea:	6018      	str	r0, [r3, #0]
 80085ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f43f acd8 	beq.w	8007fa4 <_dtoa_r+0xa4>
 80085f4:	601d      	str	r5, [r3, #0]
 80085f6:	e4d5      	b.n	8007fa4 <_dtoa_r+0xa4>
 80085f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80085fc:	462b      	mov	r3, r5
 80085fe:	461d      	mov	r5, r3
 8008600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008604:	2a39      	cmp	r2, #57	; 0x39
 8008606:	d108      	bne.n	800861a <_dtoa_r+0x71a>
 8008608:	9a00      	ldr	r2, [sp, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d1f7      	bne.n	80085fe <_dtoa_r+0x6fe>
 800860e:	9a07      	ldr	r2, [sp, #28]
 8008610:	9900      	ldr	r1, [sp, #0]
 8008612:	3201      	adds	r2, #1
 8008614:	9207      	str	r2, [sp, #28]
 8008616:	2230      	movs	r2, #48	; 0x30
 8008618:	700a      	strb	r2, [r1, #0]
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	3201      	adds	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	e78c      	b.n	800853c <_dtoa_r+0x63c>
 8008622:	4b7f      	ldr	r3, [pc, #508]	; (8008820 <_dtoa_r+0x920>)
 8008624:	2200      	movs	r2, #0
 8008626:	f7f7 ffef 	bl	8000608 <__aeabi_dmul>
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	4606      	mov	r6, r0
 8008630:	460f      	mov	r7, r1
 8008632:	f7f8 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008636:	2800      	cmp	r0, #0
 8008638:	d09b      	beq.n	8008572 <_dtoa_r+0x672>
 800863a:	e7cd      	b.n	80085d8 <_dtoa_r+0x6d8>
 800863c:	9a08      	ldr	r2, [sp, #32]
 800863e:	2a00      	cmp	r2, #0
 8008640:	f000 80c4 	beq.w	80087cc <_dtoa_r+0x8cc>
 8008644:	9a05      	ldr	r2, [sp, #20]
 8008646:	2a01      	cmp	r2, #1
 8008648:	f300 80a8 	bgt.w	800879c <_dtoa_r+0x89c>
 800864c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800864e:	2a00      	cmp	r2, #0
 8008650:	f000 80a0 	beq.w	8008794 <_dtoa_r+0x894>
 8008654:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008658:	9e06      	ldr	r6, [sp, #24]
 800865a:	4645      	mov	r5, r8
 800865c:	9a04      	ldr	r2, [sp, #16]
 800865e:	2101      	movs	r1, #1
 8008660:	441a      	add	r2, r3
 8008662:	4620      	mov	r0, r4
 8008664:	4498      	add	r8, r3
 8008666:	9204      	str	r2, [sp, #16]
 8008668:	f000 fb4c 	bl	8008d04 <__i2b>
 800866c:	4607      	mov	r7, r0
 800866e:	2d00      	cmp	r5, #0
 8008670:	dd0b      	ble.n	800868a <_dtoa_r+0x78a>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd08      	ble.n	800868a <_dtoa_r+0x78a>
 8008678:	42ab      	cmp	r3, r5
 800867a:	9a04      	ldr	r2, [sp, #16]
 800867c:	bfa8      	it	ge
 800867e:	462b      	movge	r3, r5
 8008680:	eba8 0803 	sub.w	r8, r8, r3
 8008684:	1aed      	subs	r5, r5, r3
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	9b06      	ldr	r3, [sp, #24]
 800868c:	b1fb      	cbz	r3, 80086ce <_dtoa_r+0x7ce>
 800868e:	9b08      	ldr	r3, [sp, #32]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 809f 	beq.w	80087d4 <_dtoa_r+0x8d4>
 8008696:	2e00      	cmp	r6, #0
 8008698:	dd11      	ble.n	80086be <_dtoa_r+0x7be>
 800869a:	4639      	mov	r1, r7
 800869c:	4632      	mov	r2, r6
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fbec 	bl	8008e7c <__pow5mult>
 80086a4:	465a      	mov	r2, fp
 80086a6:	4601      	mov	r1, r0
 80086a8:	4607      	mov	r7, r0
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 fb40 	bl	8008d30 <__multiply>
 80086b0:	4659      	mov	r1, fp
 80086b2:	9007      	str	r0, [sp, #28]
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 fa69 	bl	8008b8c <_Bfree>
 80086ba:	9b07      	ldr	r3, [sp, #28]
 80086bc:	469b      	mov	fp, r3
 80086be:	9b06      	ldr	r3, [sp, #24]
 80086c0:	1b9a      	subs	r2, r3, r6
 80086c2:	d004      	beq.n	80086ce <_dtoa_r+0x7ce>
 80086c4:	4659      	mov	r1, fp
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fbd8 	bl	8008e7c <__pow5mult>
 80086cc:	4683      	mov	fp, r0
 80086ce:	2101      	movs	r1, #1
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fb17 	bl	8008d04 <__i2b>
 80086d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d8:	2b00      	cmp	r3, #0
 80086da:	4606      	mov	r6, r0
 80086dc:	dd7c      	ble.n	80087d8 <_dtoa_r+0x8d8>
 80086de:	461a      	mov	r2, r3
 80086e0:	4601      	mov	r1, r0
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fbca 	bl	8008e7c <__pow5mult>
 80086e8:	9b05      	ldr	r3, [sp, #20]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	4606      	mov	r6, r0
 80086ee:	dd76      	ble.n	80087de <_dtoa_r+0x8de>
 80086f0:	2300      	movs	r3, #0
 80086f2:	9306      	str	r3, [sp, #24]
 80086f4:	6933      	ldr	r3, [r6, #16]
 80086f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086fa:	6918      	ldr	r0, [r3, #16]
 80086fc:	f000 fab2 	bl	8008c64 <__hi0bits>
 8008700:	f1c0 0020 	rsb	r0, r0, #32
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	4418      	add	r0, r3
 8008708:	f010 001f 	ands.w	r0, r0, #31
 800870c:	f000 8086 	beq.w	800881c <_dtoa_r+0x91c>
 8008710:	f1c0 0320 	rsb	r3, r0, #32
 8008714:	2b04      	cmp	r3, #4
 8008716:	dd7f      	ble.n	8008818 <_dtoa_r+0x918>
 8008718:	f1c0 001c 	rsb	r0, r0, #28
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	4403      	add	r3, r0
 8008720:	4480      	add	r8, r0
 8008722:	4405      	add	r5, r0
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	f1b8 0f00 	cmp.w	r8, #0
 800872a:	dd05      	ble.n	8008738 <_dtoa_r+0x838>
 800872c:	4659      	mov	r1, fp
 800872e:	4642      	mov	r2, r8
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fbfd 	bl	8008f30 <__lshift>
 8008736:	4683      	mov	fp, r0
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dd05      	ble.n	800874a <_dtoa_r+0x84a>
 800873e:	4631      	mov	r1, r6
 8008740:	461a      	mov	r2, r3
 8008742:	4620      	mov	r0, r4
 8008744:	f000 fbf4 	bl	8008f30 <__lshift>
 8008748:	4606      	mov	r6, r0
 800874a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	d069      	beq.n	8008824 <_dtoa_r+0x924>
 8008750:	4631      	mov	r1, r6
 8008752:	4658      	mov	r0, fp
 8008754:	f000 fc58 	bl	8009008 <__mcmp>
 8008758:	2800      	cmp	r0, #0
 800875a:	da63      	bge.n	8008824 <_dtoa_r+0x924>
 800875c:	2300      	movs	r3, #0
 800875e:	4659      	mov	r1, fp
 8008760:	220a      	movs	r2, #10
 8008762:	4620      	mov	r0, r4
 8008764:	f000 fa34 	bl	8008bd0 <__multadd>
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800876e:	4683      	mov	fp, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 818f 	beq.w	8008a94 <_dtoa_r+0xb94>
 8008776:	4639      	mov	r1, r7
 8008778:	2300      	movs	r3, #0
 800877a:	220a      	movs	r2, #10
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fa27 	bl	8008bd0 <__multadd>
 8008782:	f1b9 0f00 	cmp.w	r9, #0
 8008786:	4607      	mov	r7, r0
 8008788:	f300 808e 	bgt.w	80088a8 <_dtoa_r+0x9a8>
 800878c:	9b05      	ldr	r3, [sp, #20]
 800878e:	2b02      	cmp	r3, #2
 8008790:	dc50      	bgt.n	8008834 <_dtoa_r+0x934>
 8008792:	e089      	b.n	80088a8 <_dtoa_r+0x9a8>
 8008794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800879a:	e75d      	b.n	8008658 <_dtoa_r+0x758>
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	1e5e      	subs	r6, r3, #1
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	42b3      	cmp	r3, r6
 80087a4:	bfbf      	itttt	lt
 80087a6:	9b06      	ldrlt	r3, [sp, #24]
 80087a8:	9606      	strlt	r6, [sp, #24]
 80087aa:	1af2      	sublt	r2, r6, r3
 80087ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80087ae:	bfb6      	itet	lt
 80087b0:	189b      	addlt	r3, r3, r2
 80087b2:	1b9e      	subge	r6, r3, r6
 80087b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80087b6:	9b01      	ldr	r3, [sp, #4]
 80087b8:	bfb8      	it	lt
 80087ba:	2600      	movlt	r6, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfb5      	itete	lt
 80087c0:	eba8 0503 	sublt.w	r5, r8, r3
 80087c4:	9b01      	ldrge	r3, [sp, #4]
 80087c6:	2300      	movlt	r3, #0
 80087c8:	4645      	movge	r5, r8
 80087ca:	e747      	b.n	800865c <_dtoa_r+0x75c>
 80087cc:	9e06      	ldr	r6, [sp, #24]
 80087ce:	9f08      	ldr	r7, [sp, #32]
 80087d0:	4645      	mov	r5, r8
 80087d2:	e74c      	b.n	800866e <_dtoa_r+0x76e>
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	e775      	b.n	80086c4 <_dtoa_r+0x7c4>
 80087d8:	9b05      	ldr	r3, [sp, #20]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	dc18      	bgt.n	8008810 <_dtoa_r+0x910>
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	b9b3      	cbnz	r3, 8008810 <_dtoa_r+0x910>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087e8:	b9a3      	cbnz	r3, 8008814 <_dtoa_r+0x914>
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	0d1b      	lsrs	r3, r3, #20
 80087f2:	051b      	lsls	r3, r3, #20
 80087f4:	b12b      	cbz	r3, 8008802 <_dtoa_r+0x902>
 80087f6:	9b04      	ldr	r3, [sp, #16]
 80087f8:	3301      	adds	r3, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	f108 0801 	add.w	r8, r8, #1
 8008800:	2301      	movs	r3, #1
 8008802:	9306      	str	r3, [sp, #24]
 8008804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008806:	2b00      	cmp	r3, #0
 8008808:	f47f af74 	bne.w	80086f4 <_dtoa_r+0x7f4>
 800880c:	2001      	movs	r0, #1
 800880e:	e779      	b.n	8008704 <_dtoa_r+0x804>
 8008810:	2300      	movs	r3, #0
 8008812:	e7f6      	b.n	8008802 <_dtoa_r+0x902>
 8008814:	9b02      	ldr	r3, [sp, #8]
 8008816:	e7f4      	b.n	8008802 <_dtoa_r+0x902>
 8008818:	d085      	beq.n	8008726 <_dtoa_r+0x826>
 800881a:	4618      	mov	r0, r3
 800881c:	301c      	adds	r0, #28
 800881e:	e77d      	b.n	800871c <_dtoa_r+0x81c>
 8008820:	40240000 	.word	0x40240000
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	dc38      	bgt.n	800889c <_dtoa_r+0x99c>
 800882a:	9b05      	ldr	r3, [sp, #20]
 800882c:	2b02      	cmp	r3, #2
 800882e:	dd35      	ble.n	800889c <_dtoa_r+0x99c>
 8008830:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008834:	f1b9 0f00 	cmp.w	r9, #0
 8008838:	d10d      	bne.n	8008856 <_dtoa_r+0x956>
 800883a:	4631      	mov	r1, r6
 800883c:	464b      	mov	r3, r9
 800883e:	2205      	movs	r2, #5
 8008840:	4620      	mov	r0, r4
 8008842:	f000 f9c5 	bl	8008bd0 <__multadd>
 8008846:	4601      	mov	r1, r0
 8008848:	4606      	mov	r6, r0
 800884a:	4658      	mov	r0, fp
 800884c:	f000 fbdc 	bl	8009008 <__mcmp>
 8008850:	2800      	cmp	r0, #0
 8008852:	f73f adbd 	bgt.w	80083d0 <_dtoa_r+0x4d0>
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	9d00      	ldr	r5, [sp, #0]
 800885a:	ea6f 0a03 	mvn.w	sl, r3
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	4631      	mov	r1, r6
 8008864:	4620      	mov	r0, r4
 8008866:	f000 f991 	bl	8008b8c <_Bfree>
 800886a:	2f00      	cmp	r7, #0
 800886c:	f43f aeb4 	beq.w	80085d8 <_dtoa_r+0x6d8>
 8008870:	f1b8 0f00 	cmp.w	r8, #0
 8008874:	d005      	beq.n	8008882 <_dtoa_r+0x982>
 8008876:	45b8      	cmp	r8, r7
 8008878:	d003      	beq.n	8008882 <_dtoa_r+0x982>
 800887a:	4641      	mov	r1, r8
 800887c:	4620      	mov	r0, r4
 800887e:	f000 f985 	bl	8008b8c <_Bfree>
 8008882:	4639      	mov	r1, r7
 8008884:	4620      	mov	r0, r4
 8008886:	f000 f981 	bl	8008b8c <_Bfree>
 800888a:	e6a5      	b.n	80085d8 <_dtoa_r+0x6d8>
 800888c:	2600      	movs	r6, #0
 800888e:	4637      	mov	r7, r6
 8008890:	e7e1      	b.n	8008856 <_dtoa_r+0x956>
 8008892:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008894:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008898:	4637      	mov	r7, r6
 800889a:	e599      	b.n	80083d0 <_dtoa_r+0x4d0>
 800889c:	9b08      	ldr	r3, [sp, #32]
 800889e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 80fd 	beq.w	8008aa2 <_dtoa_r+0xba2>
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	dd05      	ble.n	80088b8 <_dtoa_r+0x9b8>
 80088ac:	4639      	mov	r1, r7
 80088ae:	462a      	mov	r2, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fb3d 	bl	8008f30 <__lshift>
 80088b6:	4607      	mov	r7, r0
 80088b8:	9b06      	ldr	r3, [sp, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d05c      	beq.n	8008978 <_dtoa_r+0xa78>
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 f923 	bl	8008b0c <_Balloc>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <_dtoa_r+0x9d6>
 80088ca:	4b80      	ldr	r3, [pc, #512]	; (8008acc <_dtoa_r+0xbcc>)
 80088cc:	4602      	mov	r2, r0
 80088ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088d2:	f7ff bb2e 	b.w	8007f32 <_dtoa_r+0x32>
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	3202      	adds	r2, #2
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	f107 010c 	add.w	r1, r7, #12
 80088e0:	300c      	adds	r0, #12
 80088e2:	f000 f905 	bl	8008af0 <memcpy>
 80088e6:	2201      	movs	r2, #1
 80088e8:	4629      	mov	r1, r5
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fb20 	bl	8008f30 <__lshift>
 80088f0:	9b00      	ldr	r3, [sp, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	9b00      	ldr	r3, [sp, #0]
 80088f8:	444b      	add	r3, r9
 80088fa:	9307      	str	r3, [sp, #28]
 80088fc:	9b02      	ldr	r3, [sp, #8]
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	46b8      	mov	r8, r7
 8008904:	9306      	str	r3, [sp, #24]
 8008906:	4607      	mov	r7, r0
 8008908:	9b01      	ldr	r3, [sp, #4]
 800890a:	4631      	mov	r1, r6
 800890c:	3b01      	subs	r3, #1
 800890e:	4658      	mov	r0, fp
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	f7ff fa69 	bl	8007de8 <quorem>
 8008916:	4603      	mov	r3, r0
 8008918:	3330      	adds	r3, #48	; 0x30
 800891a:	9004      	str	r0, [sp, #16]
 800891c:	4641      	mov	r1, r8
 800891e:	4658      	mov	r0, fp
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	f000 fb71 	bl	8009008 <__mcmp>
 8008926:	463a      	mov	r2, r7
 8008928:	4681      	mov	r9, r0
 800892a:	4631      	mov	r1, r6
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fb87 	bl	8009040 <__mdiff>
 8008932:	68c2      	ldr	r2, [r0, #12]
 8008934:	9b08      	ldr	r3, [sp, #32]
 8008936:	4605      	mov	r5, r0
 8008938:	bb02      	cbnz	r2, 800897c <_dtoa_r+0xa7c>
 800893a:	4601      	mov	r1, r0
 800893c:	4658      	mov	r0, fp
 800893e:	f000 fb63 	bl	8009008 <__mcmp>
 8008942:	9b08      	ldr	r3, [sp, #32]
 8008944:	4602      	mov	r2, r0
 8008946:	4629      	mov	r1, r5
 8008948:	4620      	mov	r0, r4
 800894a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800894e:	f000 f91d 	bl	8008b8c <_Bfree>
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008956:	9d01      	ldr	r5, [sp, #4]
 8008958:	ea43 0102 	orr.w	r1, r3, r2
 800895c:	9b06      	ldr	r3, [sp, #24]
 800895e:	430b      	orrs	r3, r1
 8008960:	9b08      	ldr	r3, [sp, #32]
 8008962:	d10d      	bne.n	8008980 <_dtoa_r+0xa80>
 8008964:	2b39      	cmp	r3, #57	; 0x39
 8008966:	d029      	beq.n	80089bc <_dtoa_r+0xabc>
 8008968:	f1b9 0f00 	cmp.w	r9, #0
 800896c:	dd01      	ble.n	8008972 <_dtoa_r+0xa72>
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	3331      	adds	r3, #49	; 0x31
 8008972:	9a02      	ldr	r2, [sp, #8]
 8008974:	7013      	strb	r3, [r2, #0]
 8008976:	e774      	b.n	8008862 <_dtoa_r+0x962>
 8008978:	4638      	mov	r0, r7
 800897a:	e7b9      	b.n	80088f0 <_dtoa_r+0x9f0>
 800897c:	2201      	movs	r2, #1
 800897e:	e7e2      	b.n	8008946 <_dtoa_r+0xa46>
 8008980:	f1b9 0f00 	cmp.w	r9, #0
 8008984:	db06      	blt.n	8008994 <_dtoa_r+0xa94>
 8008986:	9905      	ldr	r1, [sp, #20]
 8008988:	ea41 0909 	orr.w	r9, r1, r9
 800898c:	9906      	ldr	r1, [sp, #24]
 800898e:	ea59 0101 	orrs.w	r1, r9, r1
 8008992:	d120      	bne.n	80089d6 <_dtoa_r+0xad6>
 8008994:	2a00      	cmp	r2, #0
 8008996:	ddec      	ble.n	8008972 <_dtoa_r+0xa72>
 8008998:	4659      	mov	r1, fp
 800899a:	2201      	movs	r2, #1
 800899c:	4620      	mov	r0, r4
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	f000 fac6 	bl	8008f30 <__lshift>
 80089a4:	4631      	mov	r1, r6
 80089a6:	4683      	mov	fp, r0
 80089a8:	f000 fb2e 	bl	8009008 <__mcmp>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	9b01      	ldr	r3, [sp, #4]
 80089b0:	dc02      	bgt.n	80089b8 <_dtoa_r+0xab8>
 80089b2:	d1de      	bne.n	8008972 <_dtoa_r+0xa72>
 80089b4:	07da      	lsls	r2, r3, #31
 80089b6:	d5dc      	bpl.n	8008972 <_dtoa_r+0xa72>
 80089b8:	2b39      	cmp	r3, #57	; 0x39
 80089ba:	d1d8      	bne.n	800896e <_dtoa_r+0xa6e>
 80089bc:	9a02      	ldr	r2, [sp, #8]
 80089be:	2339      	movs	r3, #57	; 0x39
 80089c0:	7013      	strb	r3, [r2, #0]
 80089c2:	462b      	mov	r3, r5
 80089c4:	461d      	mov	r5, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089cc:	2a39      	cmp	r2, #57	; 0x39
 80089ce:	d050      	beq.n	8008a72 <_dtoa_r+0xb72>
 80089d0:	3201      	adds	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	e745      	b.n	8008862 <_dtoa_r+0x962>
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	dd03      	ble.n	80089e2 <_dtoa_r+0xae2>
 80089da:	2b39      	cmp	r3, #57	; 0x39
 80089dc:	d0ee      	beq.n	80089bc <_dtoa_r+0xabc>
 80089de:	3301      	adds	r3, #1
 80089e0:	e7c7      	b.n	8008972 <_dtoa_r+0xa72>
 80089e2:	9a01      	ldr	r2, [sp, #4]
 80089e4:	9907      	ldr	r1, [sp, #28]
 80089e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089ea:	428a      	cmp	r2, r1
 80089ec:	d02a      	beq.n	8008a44 <_dtoa_r+0xb44>
 80089ee:	4659      	mov	r1, fp
 80089f0:	2300      	movs	r3, #0
 80089f2:	220a      	movs	r2, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 f8eb 	bl	8008bd0 <__multadd>
 80089fa:	45b8      	cmp	r8, r7
 80089fc:	4683      	mov	fp, r0
 80089fe:	f04f 0300 	mov.w	r3, #0
 8008a02:	f04f 020a 	mov.w	r2, #10
 8008a06:	4641      	mov	r1, r8
 8008a08:	4620      	mov	r0, r4
 8008a0a:	d107      	bne.n	8008a1c <_dtoa_r+0xb1c>
 8008a0c:	f000 f8e0 	bl	8008bd0 <__multadd>
 8008a10:	4680      	mov	r8, r0
 8008a12:	4607      	mov	r7, r0
 8008a14:	9b01      	ldr	r3, [sp, #4]
 8008a16:	3301      	adds	r3, #1
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	e775      	b.n	8008908 <_dtoa_r+0xa08>
 8008a1c:	f000 f8d8 	bl	8008bd0 <__multadd>
 8008a20:	4639      	mov	r1, r7
 8008a22:	4680      	mov	r8, r0
 8008a24:	2300      	movs	r3, #0
 8008a26:	220a      	movs	r2, #10
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 f8d1 	bl	8008bd0 <__multadd>
 8008a2e:	4607      	mov	r7, r0
 8008a30:	e7f0      	b.n	8008a14 <_dtoa_r+0xb14>
 8008a32:	f1b9 0f00 	cmp.w	r9, #0
 8008a36:	9a00      	ldr	r2, [sp, #0]
 8008a38:	bfcc      	ite	gt
 8008a3a:	464d      	movgt	r5, r9
 8008a3c:	2501      	movle	r5, #1
 8008a3e:	4415      	add	r5, r2
 8008a40:	f04f 0800 	mov.w	r8, #0
 8008a44:	4659      	mov	r1, fp
 8008a46:	2201      	movs	r2, #1
 8008a48:	4620      	mov	r0, r4
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	f000 fa70 	bl	8008f30 <__lshift>
 8008a50:	4631      	mov	r1, r6
 8008a52:	4683      	mov	fp, r0
 8008a54:	f000 fad8 	bl	8009008 <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	dcb2      	bgt.n	80089c2 <_dtoa_r+0xac2>
 8008a5c:	d102      	bne.n	8008a64 <_dtoa_r+0xb64>
 8008a5e:	9b01      	ldr	r3, [sp, #4]
 8008a60:	07db      	lsls	r3, r3, #31
 8008a62:	d4ae      	bmi.n	80089c2 <_dtoa_r+0xac2>
 8008a64:	462b      	mov	r3, r5
 8008a66:	461d      	mov	r5, r3
 8008a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a6c:	2a30      	cmp	r2, #48	; 0x30
 8008a6e:	d0fa      	beq.n	8008a66 <_dtoa_r+0xb66>
 8008a70:	e6f7      	b.n	8008862 <_dtoa_r+0x962>
 8008a72:	9a00      	ldr	r2, [sp, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d1a5      	bne.n	80089c4 <_dtoa_r+0xac4>
 8008a78:	f10a 0a01 	add.w	sl, sl, #1
 8008a7c:	2331      	movs	r3, #49	; 0x31
 8008a7e:	e779      	b.n	8008974 <_dtoa_r+0xa74>
 8008a80:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <_dtoa_r+0xbd0>)
 8008a82:	f7ff baaf 	b.w	8007fe4 <_dtoa_r+0xe4>
 8008a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f47f aa86 	bne.w	8007f9a <_dtoa_r+0x9a>
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <_dtoa_r+0xbd4>)
 8008a90:	f7ff baa8 	b.w	8007fe4 <_dtoa_r+0xe4>
 8008a94:	f1b9 0f00 	cmp.w	r9, #0
 8008a98:	dc03      	bgt.n	8008aa2 <_dtoa_r+0xba2>
 8008a9a:	9b05      	ldr	r3, [sp, #20]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	f73f aec9 	bgt.w	8008834 <_dtoa_r+0x934>
 8008aa2:	9d00      	ldr	r5, [sp, #0]
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4658      	mov	r0, fp
 8008aa8:	f7ff f99e 	bl	8007de8 <quorem>
 8008aac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8008ab4:	9a00      	ldr	r2, [sp, #0]
 8008ab6:	1aaa      	subs	r2, r5, r2
 8008ab8:	4591      	cmp	r9, r2
 8008aba:	ddba      	ble.n	8008a32 <_dtoa_r+0xb32>
 8008abc:	4659      	mov	r1, fp
 8008abe:	2300      	movs	r3, #0
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 f884 	bl	8008bd0 <__multadd>
 8008ac8:	4683      	mov	fp, r0
 8008aca:	e7eb      	b.n	8008aa4 <_dtoa_r+0xba4>
 8008acc:	0800a36b 	.word	0x0800a36b
 8008ad0:	0800a2c4 	.word	0x0800a2c4
 8008ad4:	0800a2e8 	.word	0x0800a2e8

08008ad8 <_localeconv_r>:
 8008ad8:	4800      	ldr	r0, [pc, #0]	; (8008adc <_localeconv_r+0x4>)
 8008ada:	4770      	bx	lr
 8008adc:	200001a8 	.word	0x200001a8

08008ae0 <malloc>:
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <malloc+0xc>)
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	f000 bbef 	b.w	80092c8 <_malloc_r>
 8008aea:	bf00      	nop
 8008aec:	20000054 	.word	0x20000054

08008af0 <memcpy>:
 8008af0:	440a      	add	r2, r1
 8008af2:	4291      	cmp	r1, r2
 8008af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008af8:	d100      	bne.n	8008afc <memcpy+0xc>
 8008afa:	4770      	bx	lr
 8008afc:	b510      	push	{r4, lr}
 8008afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b06:	4291      	cmp	r1, r2
 8008b08:	d1f9      	bne.n	8008afe <memcpy+0xe>
 8008b0a:	bd10      	pop	{r4, pc}

08008b0c <_Balloc>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	b976      	cbnz	r6, 8008b34 <_Balloc+0x28>
 8008b16:	2010      	movs	r0, #16
 8008b18:	f7ff ffe2 	bl	8008ae0 <malloc>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	6260      	str	r0, [r4, #36]	; 0x24
 8008b20:	b920      	cbnz	r0, 8008b2c <_Balloc+0x20>
 8008b22:	4b18      	ldr	r3, [pc, #96]	; (8008b84 <_Balloc+0x78>)
 8008b24:	4818      	ldr	r0, [pc, #96]	; (8008b88 <_Balloc+0x7c>)
 8008b26:	2166      	movs	r1, #102	; 0x66
 8008b28:	f000 fd94 	bl	8009654 <__assert_func>
 8008b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b30:	6006      	str	r6, [r0, #0]
 8008b32:	60c6      	str	r6, [r0, #12]
 8008b34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b36:	68f3      	ldr	r3, [r6, #12]
 8008b38:	b183      	cbz	r3, 8008b5c <_Balloc+0x50>
 8008b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b42:	b9b8      	cbnz	r0, 8008b74 <_Balloc+0x68>
 8008b44:	2101      	movs	r1, #1
 8008b46:	fa01 f605 	lsl.w	r6, r1, r5
 8008b4a:	1d72      	adds	r2, r6, #5
 8008b4c:	0092      	lsls	r2, r2, #2
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 fb5a 	bl	8009208 <_calloc_r>
 8008b54:	b160      	cbz	r0, 8008b70 <_Balloc+0x64>
 8008b56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b5a:	e00e      	b.n	8008b7a <_Balloc+0x6e>
 8008b5c:	2221      	movs	r2, #33	; 0x21
 8008b5e:	2104      	movs	r1, #4
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fb51 	bl	8009208 <_calloc_r>
 8008b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b68:	60f0      	str	r0, [r6, #12]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e4      	bne.n	8008b3a <_Balloc+0x2e>
 8008b70:	2000      	movs	r0, #0
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	6802      	ldr	r2, [r0, #0]
 8008b76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b80:	e7f7      	b.n	8008b72 <_Balloc+0x66>
 8008b82:	bf00      	nop
 8008b84:	0800a2f5 	.word	0x0800a2f5
 8008b88:	0800a37c 	.word	0x0800a37c

08008b8c <_Bfree>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b90:	4605      	mov	r5, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	b976      	cbnz	r6, 8008bb4 <_Bfree+0x28>
 8008b96:	2010      	movs	r0, #16
 8008b98:	f7ff ffa2 	bl	8008ae0 <malloc>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	6268      	str	r0, [r5, #36]	; 0x24
 8008ba0:	b920      	cbnz	r0, 8008bac <_Bfree+0x20>
 8008ba2:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <_Bfree+0x3c>)
 8008ba4:	4809      	ldr	r0, [pc, #36]	; (8008bcc <_Bfree+0x40>)
 8008ba6:	218a      	movs	r1, #138	; 0x8a
 8008ba8:	f000 fd54 	bl	8009654 <__assert_func>
 8008bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bb0:	6006      	str	r6, [r0, #0]
 8008bb2:	60c6      	str	r6, [r0, #12]
 8008bb4:	b13c      	cbz	r4, 8008bc6 <_Bfree+0x3a>
 8008bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bb8:	6862      	ldr	r2, [r4, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bc0:	6021      	str	r1, [r4, #0]
 8008bc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	0800a2f5 	.word	0x0800a2f5
 8008bcc:	0800a37c 	.word	0x0800a37c

08008bd0 <__multadd>:
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	690e      	ldr	r6, [r1, #16]
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	4698      	mov	r8, r3
 8008bda:	460c      	mov	r4, r1
 8008bdc:	f101 0014 	add.w	r0, r1, #20
 8008be0:	2300      	movs	r3, #0
 8008be2:	6805      	ldr	r5, [r0, #0]
 8008be4:	b2a9      	uxth	r1, r5
 8008be6:	fb02 8101 	mla	r1, r2, r1, r8
 8008bea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008bee:	0c2d      	lsrs	r5, r5, #16
 8008bf0:	fb02 c505 	mla	r5, r2, r5, ip
 8008bf4:	b289      	uxth	r1, r1
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008bfc:	429e      	cmp	r6, r3
 8008bfe:	f840 1b04 	str.w	r1, [r0], #4
 8008c02:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c06:	dcec      	bgt.n	8008be2 <__multadd+0x12>
 8008c08:	f1b8 0f00 	cmp.w	r8, #0
 8008c0c:	d022      	beq.n	8008c54 <__multadd+0x84>
 8008c0e:	68a3      	ldr	r3, [r4, #8]
 8008c10:	42b3      	cmp	r3, r6
 8008c12:	dc19      	bgt.n	8008c48 <__multadd+0x78>
 8008c14:	6861      	ldr	r1, [r4, #4]
 8008c16:	4638      	mov	r0, r7
 8008c18:	3101      	adds	r1, #1
 8008c1a:	f7ff ff77 	bl	8008b0c <_Balloc>
 8008c1e:	4605      	mov	r5, r0
 8008c20:	b928      	cbnz	r0, 8008c2e <__multadd+0x5e>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <__multadd+0x8c>)
 8008c26:	480e      	ldr	r0, [pc, #56]	; (8008c60 <__multadd+0x90>)
 8008c28:	21b5      	movs	r1, #181	; 0xb5
 8008c2a:	f000 fd13 	bl	8009654 <__assert_func>
 8008c2e:	6922      	ldr	r2, [r4, #16]
 8008c30:	3202      	adds	r2, #2
 8008c32:	f104 010c 	add.w	r1, r4, #12
 8008c36:	0092      	lsls	r2, r2, #2
 8008c38:	300c      	adds	r0, #12
 8008c3a:	f7ff ff59 	bl	8008af0 <memcpy>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4638      	mov	r0, r7
 8008c42:	f7ff ffa3 	bl	8008b8c <_Bfree>
 8008c46:	462c      	mov	r4, r5
 8008c48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008c4c:	3601      	adds	r6, #1
 8008c4e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008c52:	6126      	str	r6, [r4, #16]
 8008c54:	4620      	mov	r0, r4
 8008c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c5a:	bf00      	nop
 8008c5c:	0800a36b 	.word	0x0800a36b
 8008c60:	0800a37c 	.word	0x0800a37c

08008c64 <__hi0bits>:
 8008c64:	0c03      	lsrs	r3, r0, #16
 8008c66:	041b      	lsls	r3, r3, #16
 8008c68:	b9d3      	cbnz	r3, 8008ca0 <__hi0bits+0x3c>
 8008c6a:	0400      	lsls	r0, r0, #16
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c72:	bf04      	itt	eq
 8008c74:	0200      	lsleq	r0, r0, #8
 8008c76:	3308      	addeq	r3, #8
 8008c78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c7c:	bf04      	itt	eq
 8008c7e:	0100      	lsleq	r0, r0, #4
 8008c80:	3304      	addeq	r3, #4
 8008c82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c86:	bf04      	itt	eq
 8008c88:	0080      	lsleq	r0, r0, #2
 8008c8a:	3302      	addeq	r3, #2
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	db05      	blt.n	8008c9c <__hi0bits+0x38>
 8008c90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c94:	f103 0301 	add.w	r3, r3, #1
 8008c98:	bf08      	it	eq
 8008c9a:	2320      	moveq	r3, #32
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	4770      	bx	lr
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e7e4      	b.n	8008c6e <__hi0bits+0xa>

08008ca4 <__lo0bits>:
 8008ca4:	6803      	ldr	r3, [r0, #0]
 8008ca6:	f013 0207 	ands.w	r2, r3, #7
 8008caa:	4601      	mov	r1, r0
 8008cac:	d00b      	beq.n	8008cc6 <__lo0bits+0x22>
 8008cae:	07da      	lsls	r2, r3, #31
 8008cb0:	d424      	bmi.n	8008cfc <__lo0bits+0x58>
 8008cb2:	0798      	lsls	r0, r3, #30
 8008cb4:	bf49      	itett	mi
 8008cb6:	085b      	lsrmi	r3, r3, #1
 8008cb8:	089b      	lsrpl	r3, r3, #2
 8008cba:	2001      	movmi	r0, #1
 8008cbc:	600b      	strmi	r3, [r1, #0]
 8008cbe:	bf5c      	itt	pl
 8008cc0:	600b      	strpl	r3, [r1, #0]
 8008cc2:	2002      	movpl	r0, #2
 8008cc4:	4770      	bx	lr
 8008cc6:	b298      	uxth	r0, r3
 8008cc8:	b9b0      	cbnz	r0, 8008cf8 <__lo0bits+0x54>
 8008cca:	0c1b      	lsrs	r3, r3, #16
 8008ccc:	2010      	movs	r0, #16
 8008cce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cd2:	bf04      	itt	eq
 8008cd4:	0a1b      	lsreq	r3, r3, #8
 8008cd6:	3008      	addeq	r0, #8
 8008cd8:	071a      	lsls	r2, r3, #28
 8008cda:	bf04      	itt	eq
 8008cdc:	091b      	lsreq	r3, r3, #4
 8008cde:	3004      	addeq	r0, #4
 8008ce0:	079a      	lsls	r2, r3, #30
 8008ce2:	bf04      	itt	eq
 8008ce4:	089b      	lsreq	r3, r3, #2
 8008ce6:	3002      	addeq	r0, #2
 8008ce8:	07da      	lsls	r2, r3, #31
 8008cea:	d403      	bmi.n	8008cf4 <__lo0bits+0x50>
 8008cec:	085b      	lsrs	r3, r3, #1
 8008cee:	f100 0001 	add.w	r0, r0, #1
 8008cf2:	d005      	beq.n	8008d00 <__lo0bits+0x5c>
 8008cf4:	600b      	str	r3, [r1, #0]
 8008cf6:	4770      	bx	lr
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	e7e8      	b.n	8008cce <__lo0bits+0x2a>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	4770      	bx	lr
 8008d00:	2020      	movs	r0, #32
 8008d02:	4770      	bx	lr

08008d04 <__i2b>:
 8008d04:	b510      	push	{r4, lr}
 8008d06:	460c      	mov	r4, r1
 8008d08:	2101      	movs	r1, #1
 8008d0a:	f7ff feff 	bl	8008b0c <_Balloc>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	b928      	cbnz	r0, 8008d1e <__i2b+0x1a>
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <__i2b+0x24>)
 8008d14:	4805      	ldr	r0, [pc, #20]	; (8008d2c <__i2b+0x28>)
 8008d16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d1a:	f000 fc9b 	bl	8009654 <__assert_func>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	6144      	str	r4, [r0, #20]
 8008d22:	6103      	str	r3, [r0, #16]
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	bf00      	nop
 8008d28:	0800a36b 	.word	0x0800a36b
 8008d2c:	0800a37c 	.word	0x0800a37c

08008d30 <__multiply>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	4614      	mov	r4, r2
 8008d36:	690a      	ldr	r2, [r1, #16]
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	bfb8      	it	lt
 8008d3e:	460b      	movlt	r3, r1
 8008d40:	460d      	mov	r5, r1
 8008d42:	bfbc      	itt	lt
 8008d44:	4625      	movlt	r5, r4
 8008d46:	461c      	movlt	r4, r3
 8008d48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008d4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d50:	68ab      	ldr	r3, [r5, #8]
 8008d52:	6869      	ldr	r1, [r5, #4]
 8008d54:	eb0a 0709 	add.w	r7, sl, r9
 8008d58:	42bb      	cmp	r3, r7
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	bfb8      	it	lt
 8008d5e:	3101      	addlt	r1, #1
 8008d60:	f7ff fed4 	bl	8008b0c <_Balloc>
 8008d64:	b930      	cbnz	r0, 8008d74 <__multiply+0x44>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b42      	ldr	r3, [pc, #264]	; (8008e74 <__multiply+0x144>)
 8008d6a:	4843      	ldr	r0, [pc, #268]	; (8008e78 <__multiply+0x148>)
 8008d6c:	f240 115d 	movw	r1, #349	; 0x15d
 8008d70:	f000 fc70 	bl	8009654 <__assert_func>
 8008d74:	f100 0614 	add.w	r6, r0, #20
 8008d78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d7c:	4633      	mov	r3, r6
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4543      	cmp	r3, r8
 8008d82:	d31e      	bcc.n	8008dc2 <__multiply+0x92>
 8008d84:	f105 0c14 	add.w	ip, r5, #20
 8008d88:	f104 0314 	add.w	r3, r4, #20
 8008d8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d94:	9202      	str	r2, [sp, #8]
 8008d96:	ebac 0205 	sub.w	r2, ip, r5
 8008d9a:	3a15      	subs	r2, #21
 8008d9c:	f022 0203 	bic.w	r2, r2, #3
 8008da0:	3204      	adds	r2, #4
 8008da2:	f105 0115 	add.w	r1, r5, #21
 8008da6:	458c      	cmp	ip, r1
 8008da8:	bf38      	it	cc
 8008daa:	2204      	movcc	r2, #4
 8008dac:	9201      	str	r2, [sp, #4]
 8008dae:	9a02      	ldr	r2, [sp, #8]
 8008db0:	9303      	str	r3, [sp, #12]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d808      	bhi.n	8008dc8 <__multiply+0x98>
 8008db6:	2f00      	cmp	r7, #0
 8008db8:	dc55      	bgt.n	8008e66 <__multiply+0x136>
 8008dba:	6107      	str	r7, [r0, #16]
 8008dbc:	b005      	add	sp, #20
 8008dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc2:	f843 2b04 	str.w	r2, [r3], #4
 8008dc6:	e7db      	b.n	8008d80 <__multiply+0x50>
 8008dc8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008dcc:	f1ba 0f00 	cmp.w	sl, #0
 8008dd0:	d020      	beq.n	8008e14 <__multiply+0xe4>
 8008dd2:	f105 0e14 	add.w	lr, r5, #20
 8008dd6:	46b1      	mov	r9, r6
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008dde:	f8d9 b000 	ldr.w	fp, [r9]
 8008de2:	b2a1      	uxth	r1, r4
 8008de4:	fa1f fb8b 	uxth.w	fp, fp
 8008de8:	fb0a b101 	mla	r1, sl, r1, fp
 8008dec:	4411      	add	r1, r2
 8008dee:	f8d9 2000 	ldr.w	r2, [r9]
 8008df2:	0c24      	lsrs	r4, r4, #16
 8008df4:	0c12      	lsrs	r2, r2, #16
 8008df6:	fb0a 2404 	mla	r4, sl, r4, r2
 8008dfa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008dfe:	b289      	uxth	r1, r1
 8008e00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e04:	45f4      	cmp	ip, lr
 8008e06:	f849 1b04 	str.w	r1, [r9], #4
 8008e0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008e0e:	d8e4      	bhi.n	8008dda <__multiply+0xaa>
 8008e10:	9901      	ldr	r1, [sp, #4]
 8008e12:	5072      	str	r2, [r6, r1]
 8008e14:	9a03      	ldr	r2, [sp, #12]
 8008e16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	f1b9 0f00 	cmp.w	r9, #0
 8008e20:	d01f      	beq.n	8008e62 <__multiply+0x132>
 8008e22:	6834      	ldr	r4, [r6, #0]
 8008e24:	f105 0114 	add.w	r1, r5, #20
 8008e28:	46b6      	mov	lr, r6
 8008e2a:	f04f 0a00 	mov.w	sl, #0
 8008e2e:	880a      	ldrh	r2, [r1, #0]
 8008e30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008e34:	fb09 b202 	mla	r2, r9, r2, fp
 8008e38:	4492      	add	sl, r2
 8008e3a:	b2a4      	uxth	r4, r4
 8008e3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008e40:	f84e 4b04 	str.w	r4, [lr], #4
 8008e44:	f851 4b04 	ldr.w	r4, [r1], #4
 8008e48:	f8be 2000 	ldrh.w	r2, [lr]
 8008e4c:	0c24      	lsrs	r4, r4, #16
 8008e4e:	fb09 2404 	mla	r4, r9, r4, r2
 8008e52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008e56:	458c      	cmp	ip, r1
 8008e58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e5c:	d8e7      	bhi.n	8008e2e <__multiply+0xfe>
 8008e5e:	9a01      	ldr	r2, [sp, #4]
 8008e60:	50b4      	str	r4, [r6, r2]
 8008e62:	3604      	adds	r6, #4
 8008e64:	e7a3      	b.n	8008dae <__multiply+0x7e>
 8008e66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1a5      	bne.n	8008dba <__multiply+0x8a>
 8008e6e:	3f01      	subs	r7, #1
 8008e70:	e7a1      	b.n	8008db6 <__multiply+0x86>
 8008e72:	bf00      	nop
 8008e74:	0800a36b 	.word	0x0800a36b
 8008e78:	0800a37c 	.word	0x0800a37c

08008e7c <__pow5mult>:
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	4615      	mov	r5, r2
 8008e82:	f012 0203 	ands.w	r2, r2, #3
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	d007      	beq.n	8008e9c <__pow5mult+0x20>
 8008e8c:	4c25      	ldr	r4, [pc, #148]	; (8008f24 <__pow5mult+0xa8>)
 8008e8e:	3a01      	subs	r2, #1
 8008e90:	2300      	movs	r3, #0
 8008e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e96:	f7ff fe9b 	bl	8008bd0 <__multadd>
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	10ad      	asrs	r5, r5, #2
 8008e9e:	d03d      	beq.n	8008f1c <__pow5mult+0xa0>
 8008ea0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ea2:	b97c      	cbnz	r4, 8008ec4 <__pow5mult+0x48>
 8008ea4:	2010      	movs	r0, #16
 8008ea6:	f7ff fe1b 	bl	8008ae0 <malloc>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	6270      	str	r0, [r6, #36]	; 0x24
 8008eae:	b928      	cbnz	r0, 8008ebc <__pow5mult+0x40>
 8008eb0:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <__pow5mult+0xac>)
 8008eb2:	481e      	ldr	r0, [pc, #120]	; (8008f2c <__pow5mult+0xb0>)
 8008eb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008eb8:	f000 fbcc 	bl	8009654 <__assert_func>
 8008ebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ec0:	6004      	str	r4, [r0, #0]
 8008ec2:	60c4      	str	r4, [r0, #12]
 8008ec4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ecc:	b94c      	cbnz	r4, 8008ee2 <__pow5mult+0x66>
 8008ece:	f240 2171 	movw	r1, #625	; 0x271
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ff16 	bl	8008d04 <__i2b>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ede:	4604      	mov	r4, r0
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	07eb      	lsls	r3, r5, #31
 8008ee8:	d50a      	bpl.n	8008f00 <__pow5mult+0x84>
 8008eea:	4639      	mov	r1, r7
 8008eec:	4622      	mov	r2, r4
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7ff ff1e 	bl	8008d30 <__multiply>
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff fe47 	bl	8008b8c <_Bfree>
 8008efe:	4647      	mov	r7, r8
 8008f00:	106d      	asrs	r5, r5, #1
 8008f02:	d00b      	beq.n	8008f1c <__pow5mult+0xa0>
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	b938      	cbnz	r0, 8008f18 <__pow5mult+0x9c>
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff ff0f 	bl	8008d30 <__multiply>
 8008f12:	6020      	str	r0, [r4, #0]
 8008f14:	f8c0 9000 	str.w	r9, [r0]
 8008f18:	4604      	mov	r4, r0
 8008f1a:	e7e4      	b.n	8008ee6 <__pow5mult+0x6a>
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f22:	bf00      	nop
 8008f24:	0800a4d0 	.word	0x0800a4d0
 8008f28:	0800a2f5 	.word	0x0800a2f5
 8008f2c:	0800a37c 	.word	0x0800a37c

08008f30 <__lshift>:
 8008f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f34:	460c      	mov	r4, r1
 8008f36:	6849      	ldr	r1, [r1, #4]
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f3e:	68a3      	ldr	r3, [r4, #8]
 8008f40:	4607      	mov	r7, r0
 8008f42:	4691      	mov	r9, r2
 8008f44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f48:	f108 0601 	add.w	r6, r8, #1
 8008f4c:	42b3      	cmp	r3, r6
 8008f4e:	db0b      	blt.n	8008f68 <__lshift+0x38>
 8008f50:	4638      	mov	r0, r7
 8008f52:	f7ff fddb 	bl	8008b0c <_Balloc>
 8008f56:	4605      	mov	r5, r0
 8008f58:	b948      	cbnz	r0, 8008f6e <__lshift+0x3e>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <__lshift+0xd0>)
 8008f5e:	4829      	ldr	r0, [pc, #164]	; (8009004 <__lshift+0xd4>)
 8008f60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f64:	f000 fb76 	bl	8009654 <__assert_func>
 8008f68:	3101      	adds	r1, #1
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	e7ee      	b.n	8008f4c <__lshift+0x1c>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f100 0114 	add.w	r1, r0, #20
 8008f74:	f100 0210 	add.w	r2, r0, #16
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4553      	cmp	r3, sl
 8008f7c:	db33      	blt.n	8008fe6 <__lshift+0xb6>
 8008f7e:	6920      	ldr	r0, [r4, #16]
 8008f80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f84:	f104 0314 	add.w	r3, r4, #20
 8008f88:	f019 091f 	ands.w	r9, r9, #31
 8008f8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f94:	d02b      	beq.n	8008fee <__lshift+0xbe>
 8008f96:	f1c9 0e20 	rsb	lr, r9, #32
 8008f9a:	468a      	mov	sl, r1
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	fa00 f009 	lsl.w	r0, r0, r9
 8008fa4:	4302      	orrs	r2, r0
 8008fa6:	f84a 2b04 	str.w	r2, [sl], #4
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	459c      	cmp	ip, r3
 8008fb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008fb4:	d8f3      	bhi.n	8008f9e <__lshift+0x6e>
 8008fb6:	ebac 0304 	sub.w	r3, ip, r4
 8008fba:	3b15      	subs	r3, #21
 8008fbc:	f023 0303 	bic.w	r3, r3, #3
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	f104 0015 	add.w	r0, r4, #21
 8008fc6:	4584      	cmp	ip, r0
 8008fc8:	bf38      	it	cc
 8008fca:	2304      	movcc	r3, #4
 8008fcc:	50ca      	str	r2, [r1, r3]
 8008fce:	b10a      	cbz	r2, 8008fd4 <__lshift+0xa4>
 8008fd0:	f108 0602 	add.w	r6, r8, #2
 8008fd4:	3e01      	subs	r6, #1
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	612e      	str	r6, [r5, #16]
 8008fda:	4621      	mov	r1, r4
 8008fdc:	f7ff fdd6 	bl	8008b8c <_Bfree>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fea:	3301      	adds	r3, #1
 8008fec:	e7c5      	b.n	8008f7a <__lshift+0x4a>
 8008fee:	3904      	subs	r1, #4
 8008ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ff8:	459c      	cmp	ip, r3
 8008ffa:	d8f9      	bhi.n	8008ff0 <__lshift+0xc0>
 8008ffc:	e7ea      	b.n	8008fd4 <__lshift+0xa4>
 8008ffe:	bf00      	nop
 8009000:	0800a36b 	.word	0x0800a36b
 8009004:	0800a37c 	.word	0x0800a37c

08009008 <__mcmp>:
 8009008:	b530      	push	{r4, r5, lr}
 800900a:	6902      	ldr	r2, [r0, #16]
 800900c:	690c      	ldr	r4, [r1, #16]
 800900e:	1b12      	subs	r2, r2, r4
 8009010:	d10e      	bne.n	8009030 <__mcmp+0x28>
 8009012:	f100 0314 	add.w	r3, r0, #20
 8009016:	3114      	adds	r1, #20
 8009018:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800901c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009020:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009024:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009028:	42a5      	cmp	r5, r4
 800902a:	d003      	beq.n	8009034 <__mcmp+0x2c>
 800902c:	d305      	bcc.n	800903a <__mcmp+0x32>
 800902e:	2201      	movs	r2, #1
 8009030:	4610      	mov	r0, r2
 8009032:	bd30      	pop	{r4, r5, pc}
 8009034:	4283      	cmp	r3, r0
 8009036:	d3f3      	bcc.n	8009020 <__mcmp+0x18>
 8009038:	e7fa      	b.n	8009030 <__mcmp+0x28>
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	e7f7      	b.n	8009030 <__mcmp+0x28>

08009040 <__mdiff>:
 8009040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	460c      	mov	r4, r1
 8009046:	4606      	mov	r6, r0
 8009048:	4611      	mov	r1, r2
 800904a:	4620      	mov	r0, r4
 800904c:	4617      	mov	r7, r2
 800904e:	f7ff ffdb 	bl	8009008 <__mcmp>
 8009052:	1e05      	subs	r5, r0, #0
 8009054:	d110      	bne.n	8009078 <__mdiff+0x38>
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff fd57 	bl	8008b0c <_Balloc>
 800905e:	b930      	cbnz	r0, 800906e <__mdiff+0x2e>
 8009060:	4b39      	ldr	r3, [pc, #228]	; (8009148 <__mdiff+0x108>)
 8009062:	4602      	mov	r2, r0
 8009064:	f240 2132 	movw	r1, #562	; 0x232
 8009068:	4838      	ldr	r0, [pc, #224]	; (800914c <__mdiff+0x10c>)
 800906a:	f000 faf3 	bl	8009654 <__assert_func>
 800906e:	2301      	movs	r3, #1
 8009070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	bfa4      	itt	ge
 800907a:	463b      	movge	r3, r7
 800907c:	4627      	movge	r7, r4
 800907e:	4630      	mov	r0, r6
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	bfa6      	itte	ge
 8009084:	461c      	movge	r4, r3
 8009086:	2500      	movge	r5, #0
 8009088:	2501      	movlt	r5, #1
 800908a:	f7ff fd3f 	bl	8008b0c <_Balloc>
 800908e:	b920      	cbnz	r0, 800909a <__mdiff+0x5a>
 8009090:	4b2d      	ldr	r3, [pc, #180]	; (8009148 <__mdiff+0x108>)
 8009092:	4602      	mov	r2, r0
 8009094:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009098:	e7e6      	b.n	8009068 <__mdiff+0x28>
 800909a:	693e      	ldr	r6, [r7, #16]
 800909c:	60c5      	str	r5, [r0, #12]
 800909e:	6925      	ldr	r5, [r4, #16]
 80090a0:	f107 0114 	add.w	r1, r7, #20
 80090a4:	f104 0914 	add.w	r9, r4, #20
 80090a8:	f100 0e14 	add.w	lr, r0, #20
 80090ac:	f107 0210 	add.w	r2, r7, #16
 80090b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80090b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80090b8:	46f2      	mov	sl, lr
 80090ba:	2700      	movs	r7, #0
 80090bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80090c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80090c4:	fa1f f883 	uxth.w	r8, r3
 80090c8:	fa17 f78b 	uxtah	r7, r7, fp
 80090cc:	0c1b      	lsrs	r3, r3, #16
 80090ce:	eba7 0808 	sub.w	r8, r7, r8
 80090d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090da:	fa1f f888 	uxth.w	r8, r8
 80090de:	141f      	asrs	r7, r3, #16
 80090e0:	454d      	cmp	r5, r9
 80090e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090e6:	f84a 3b04 	str.w	r3, [sl], #4
 80090ea:	d8e7      	bhi.n	80090bc <__mdiff+0x7c>
 80090ec:	1b2b      	subs	r3, r5, r4
 80090ee:	3b15      	subs	r3, #21
 80090f0:	f023 0303 	bic.w	r3, r3, #3
 80090f4:	3304      	adds	r3, #4
 80090f6:	3415      	adds	r4, #21
 80090f8:	42a5      	cmp	r5, r4
 80090fa:	bf38      	it	cc
 80090fc:	2304      	movcc	r3, #4
 80090fe:	4419      	add	r1, r3
 8009100:	4473      	add	r3, lr
 8009102:	469e      	mov	lr, r3
 8009104:	460d      	mov	r5, r1
 8009106:	4565      	cmp	r5, ip
 8009108:	d30e      	bcc.n	8009128 <__mdiff+0xe8>
 800910a:	f10c 0203 	add.w	r2, ip, #3
 800910e:	1a52      	subs	r2, r2, r1
 8009110:	f022 0203 	bic.w	r2, r2, #3
 8009114:	3903      	subs	r1, #3
 8009116:	458c      	cmp	ip, r1
 8009118:	bf38      	it	cc
 800911a:	2200      	movcc	r2, #0
 800911c:	441a      	add	r2, r3
 800911e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009122:	b17b      	cbz	r3, 8009144 <__mdiff+0x104>
 8009124:	6106      	str	r6, [r0, #16]
 8009126:	e7a5      	b.n	8009074 <__mdiff+0x34>
 8009128:	f855 8b04 	ldr.w	r8, [r5], #4
 800912c:	fa17 f488 	uxtah	r4, r7, r8
 8009130:	1422      	asrs	r2, r4, #16
 8009132:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009136:	b2a4      	uxth	r4, r4
 8009138:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800913c:	f84e 4b04 	str.w	r4, [lr], #4
 8009140:	1417      	asrs	r7, r2, #16
 8009142:	e7e0      	b.n	8009106 <__mdiff+0xc6>
 8009144:	3e01      	subs	r6, #1
 8009146:	e7ea      	b.n	800911e <__mdiff+0xde>
 8009148:	0800a36b 	.word	0x0800a36b
 800914c:	0800a37c 	.word	0x0800a37c

08009150 <__d2b>:
 8009150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009154:	4689      	mov	r9, r1
 8009156:	2101      	movs	r1, #1
 8009158:	ec57 6b10 	vmov	r6, r7, d0
 800915c:	4690      	mov	r8, r2
 800915e:	f7ff fcd5 	bl	8008b0c <_Balloc>
 8009162:	4604      	mov	r4, r0
 8009164:	b930      	cbnz	r0, 8009174 <__d2b+0x24>
 8009166:	4602      	mov	r2, r0
 8009168:	4b25      	ldr	r3, [pc, #148]	; (8009200 <__d2b+0xb0>)
 800916a:	4826      	ldr	r0, [pc, #152]	; (8009204 <__d2b+0xb4>)
 800916c:	f240 310a 	movw	r1, #778	; 0x30a
 8009170:	f000 fa70 	bl	8009654 <__assert_func>
 8009174:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800917c:	bb35      	cbnz	r5, 80091cc <__d2b+0x7c>
 800917e:	2e00      	cmp	r6, #0
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	d028      	beq.n	80091d6 <__d2b+0x86>
 8009184:	4668      	mov	r0, sp
 8009186:	9600      	str	r6, [sp, #0]
 8009188:	f7ff fd8c 	bl	8008ca4 <__lo0bits>
 800918c:	9900      	ldr	r1, [sp, #0]
 800918e:	b300      	cbz	r0, 80091d2 <__d2b+0x82>
 8009190:	9a01      	ldr	r2, [sp, #4]
 8009192:	f1c0 0320 	rsb	r3, r0, #32
 8009196:	fa02 f303 	lsl.w	r3, r2, r3
 800919a:	430b      	orrs	r3, r1
 800919c:	40c2      	lsrs	r2, r0
 800919e:	6163      	str	r3, [r4, #20]
 80091a0:	9201      	str	r2, [sp, #4]
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	61a3      	str	r3, [r4, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bf14      	ite	ne
 80091aa:	2202      	movne	r2, #2
 80091ac:	2201      	moveq	r2, #1
 80091ae:	6122      	str	r2, [r4, #16]
 80091b0:	b1d5      	cbz	r5, 80091e8 <__d2b+0x98>
 80091b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091b6:	4405      	add	r5, r0
 80091b8:	f8c9 5000 	str.w	r5, [r9]
 80091bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091c0:	f8c8 0000 	str.w	r0, [r8]
 80091c4:	4620      	mov	r0, r4
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091d0:	e7d5      	b.n	800917e <__d2b+0x2e>
 80091d2:	6161      	str	r1, [r4, #20]
 80091d4:	e7e5      	b.n	80091a2 <__d2b+0x52>
 80091d6:	a801      	add	r0, sp, #4
 80091d8:	f7ff fd64 	bl	8008ca4 <__lo0bits>
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	6163      	str	r3, [r4, #20]
 80091e0:	2201      	movs	r2, #1
 80091e2:	6122      	str	r2, [r4, #16]
 80091e4:	3020      	adds	r0, #32
 80091e6:	e7e3      	b.n	80091b0 <__d2b+0x60>
 80091e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091f0:	f8c9 0000 	str.w	r0, [r9]
 80091f4:	6918      	ldr	r0, [r3, #16]
 80091f6:	f7ff fd35 	bl	8008c64 <__hi0bits>
 80091fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091fe:	e7df      	b.n	80091c0 <__d2b+0x70>
 8009200:	0800a36b 	.word	0x0800a36b
 8009204:	0800a37c 	.word	0x0800a37c

08009208 <_calloc_r>:
 8009208:	b513      	push	{r0, r1, r4, lr}
 800920a:	434a      	muls	r2, r1
 800920c:	4611      	mov	r1, r2
 800920e:	9201      	str	r2, [sp, #4]
 8009210:	f000 f85a 	bl	80092c8 <_malloc_r>
 8009214:	4604      	mov	r4, r0
 8009216:	b118      	cbz	r0, 8009220 <_calloc_r+0x18>
 8009218:	9a01      	ldr	r2, [sp, #4]
 800921a:	2100      	movs	r1, #0
 800921c:	f7fe f952 	bl	80074c4 <memset>
 8009220:	4620      	mov	r0, r4
 8009222:	b002      	add	sp, #8
 8009224:	bd10      	pop	{r4, pc}
	...

08009228 <_free_r>:
 8009228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800922a:	2900      	cmp	r1, #0
 800922c:	d048      	beq.n	80092c0 <_free_r+0x98>
 800922e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009232:	9001      	str	r0, [sp, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f1a1 0404 	sub.w	r4, r1, #4
 800923a:	bfb8      	it	lt
 800923c:	18e4      	addlt	r4, r4, r3
 800923e:	f000 fa65 	bl	800970c <__malloc_lock>
 8009242:	4a20      	ldr	r2, [pc, #128]	; (80092c4 <_free_r+0x9c>)
 8009244:	9801      	ldr	r0, [sp, #4]
 8009246:	6813      	ldr	r3, [r2, #0]
 8009248:	4615      	mov	r5, r2
 800924a:	b933      	cbnz	r3, 800925a <_free_r+0x32>
 800924c:	6063      	str	r3, [r4, #4]
 800924e:	6014      	str	r4, [r2, #0]
 8009250:	b003      	add	sp, #12
 8009252:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009256:	f000 ba5f 	b.w	8009718 <__malloc_unlock>
 800925a:	42a3      	cmp	r3, r4
 800925c:	d90b      	bls.n	8009276 <_free_r+0x4e>
 800925e:	6821      	ldr	r1, [r4, #0]
 8009260:	1862      	adds	r2, r4, r1
 8009262:	4293      	cmp	r3, r2
 8009264:	bf04      	itt	eq
 8009266:	681a      	ldreq	r2, [r3, #0]
 8009268:	685b      	ldreq	r3, [r3, #4]
 800926a:	6063      	str	r3, [r4, #4]
 800926c:	bf04      	itt	eq
 800926e:	1852      	addeq	r2, r2, r1
 8009270:	6022      	streq	r2, [r4, #0]
 8009272:	602c      	str	r4, [r5, #0]
 8009274:	e7ec      	b.n	8009250 <_free_r+0x28>
 8009276:	461a      	mov	r2, r3
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	b10b      	cbz	r3, 8009280 <_free_r+0x58>
 800927c:	42a3      	cmp	r3, r4
 800927e:	d9fa      	bls.n	8009276 <_free_r+0x4e>
 8009280:	6811      	ldr	r1, [r2, #0]
 8009282:	1855      	adds	r5, r2, r1
 8009284:	42a5      	cmp	r5, r4
 8009286:	d10b      	bne.n	80092a0 <_free_r+0x78>
 8009288:	6824      	ldr	r4, [r4, #0]
 800928a:	4421      	add	r1, r4
 800928c:	1854      	adds	r4, r2, r1
 800928e:	42a3      	cmp	r3, r4
 8009290:	6011      	str	r1, [r2, #0]
 8009292:	d1dd      	bne.n	8009250 <_free_r+0x28>
 8009294:	681c      	ldr	r4, [r3, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	6053      	str	r3, [r2, #4]
 800929a:	4421      	add	r1, r4
 800929c:	6011      	str	r1, [r2, #0]
 800929e:	e7d7      	b.n	8009250 <_free_r+0x28>
 80092a0:	d902      	bls.n	80092a8 <_free_r+0x80>
 80092a2:	230c      	movs	r3, #12
 80092a4:	6003      	str	r3, [r0, #0]
 80092a6:	e7d3      	b.n	8009250 <_free_r+0x28>
 80092a8:	6825      	ldr	r5, [r4, #0]
 80092aa:	1961      	adds	r1, r4, r5
 80092ac:	428b      	cmp	r3, r1
 80092ae:	bf04      	itt	eq
 80092b0:	6819      	ldreq	r1, [r3, #0]
 80092b2:	685b      	ldreq	r3, [r3, #4]
 80092b4:	6063      	str	r3, [r4, #4]
 80092b6:	bf04      	itt	eq
 80092b8:	1949      	addeq	r1, r1, r5
 80092ba:	6021      	streq	r1, [r4, #0]
 80092bc:	6054      	str	r4, [r2, #4]
 80092be:	e7c7      	b.n	8009250 <_free_r+0x28>
 80092c0:	b003      	add	sp, #12
 80092c2:	bd30      	pop	{r4, r5, pc}
 80092c4:	20000268 	.word	0x20000268

080092c8 <_malloc_r>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	1ccd      	adds	r5, r1, #3
 80092cc:	f025 0503 	bic.w	r5, r5, #3
 80092d0:	3508      	adds	r5, #8
 80092d2:	2d0c      	cmp	r5, #12
 80092d4:	bf38      	it	cc
 80092d6:	250c      	movcc	r5, #12
 80092d8:	2d00      	cmp	r5, #0
 80092da:	4606      	mov	r6, r0
 80092dc:	db01      	blt.n	80092e2 <_malloc_r+0x1a>
 80092de:	42a9      	cmp	r1, r5
 80092e0:	d903      	bls.n	80092ea <_malloc_r+0x22>
 80092e2:	230c      	movs	r3, #12
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	2000      	movs	r0, #0
 80092e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ea:	f000 fa0f 	bl	800970c <__malloc_lock>
 80092ee:	4921      	ldr	r1, [pc, #132]	; (8009374 <_malloc_r+0xac>)
 80092f0:	680a      	ldr	r2, [r1, #0]
 80092f2:	4614      	mov	r4, r2
 80092f4:	b99c      	cbnz	r4, 800931e <_malloc_r+0x56>
 80092f6:	4f20      	ldr	r7, [pc, #128]	; (8009378 <_malloc_r+0xb0>)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	b923      	cbnz	r3, 8009306 <_malloc_r+0x3e>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 f998 	bl	8009634 <_sbrk_r>
 8009304:	6038      	str	r0, [r7, #0]
 8009306:	4629      	mov	r1, r5
 8009308:	4630      	mov	r0, r6
 800930a:	f000 f993 	bl	8009634 <_sbrk_r>
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	d123      	bne.n	800935a <_malloc_r+0x92>
 8009312:	230c      	movs	r3, #12
 8009314:	6033      	str	r3, [r6, #0]
 8009316:	4630      	mov	r0, r6
 8009318:	f000 f9fe 	bl	8009718 <__malloc_unlock>
 800931c:	e7e3      	b.n	80092e6 <_malloc_r+0x1e>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	1b5b      	subs	r3, r3, r5
 8009322:	d417      	bmi.n	8009354 <_malloc_r+0x8c>
 8009324:	2b0b      	cmp	r3, #11
 8009326:	d903      	bls.n	8009330 <_malloc_r+0x68>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	441c      	add	r4, r3
 800932c:	6025      	str	r5, [r4, #0]
 800932e:	e004      	b.n	800933a <_malloc_r+0x72>
 8009330:	6863      	ldr	r3, [r4, #4]
 8009332:	42a2      	cmp	r2, r4
 8009334:	bf0c      	ite	eq
 8009336:	600b      	streq	r3, [r1, #0]
 8009338:	6053      	strne	r3, [r2, #4]
 800933a:	4630      	mov	r0, r6
 800933c:	f000 f9ec 	bl	8009718 <__malloc_unlock>
 8009340:	f104 000b 	add.w	r0, r4, #11
 8009344:	1d23      	adds	r3, r4, #4
 8009346:	f020 0007 	bic.w	r0, r0, #7
 800934a:	1ac2      	subs	r2, r0, r3
 800934c:	d0cc      	beq.n	80092e8 <_malloc_r+0x20>
 800934e:	1a1b      	subs	r3, r3, r0
 8009350:	50a3      	str	r3, [r4, r2]
 8009352:	e7c9      	b.n	80092e8 <_malloc_r+0x20>
 8009354:	4622      	mov	r2, r4
 8009356:	6864      	ldr	r4, [r4, #4]
 8009358:	e7cc      	b.n	80092f4 <_malloc_r+0x2c>
 800935a:	1cc4      	adds	r4, r0, #3
 800935c:	f024 0403 	bic.w	r4, r4, #3
 8009360:	42a0      	cmp	r0, r4
 8009362:	d0e3      	beq.n	800932c <_malloc_r+0x64>
 8009364:	1a21      	subs	r1, r4, r0
 8009366:	4630      	mov	r0, r6
 8009368:	f000 f964 	bl	8009634 <_sbrk_r>
 800936c:	3001      	adds	r0, #1
 800936e:	d1dd      	bne.n	800932c <_malloc_r+0x64>
 8009370:	e7cf      	b.n	8009312 <_malloc_r+0x4a>
 8009372:	bf00      	nop
 8009374:	20000268 	.word	0x20000268
 8009378:	2000026c 	.word	0x2000026c

0800937c <__ssputs_r>:
 800937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	688e      	ldr	r6, [r1, #8]
 8009382:	429e      	cmp	r6, r3
 8009384:	4682      	mov	sl, r0
 8009386:	460c      	mov	r4, r1
 8009388:	4690      	mov	r8, r2
 800938a:	461f      	mov	r7, r3
 800938c:	d838      	bhi.n	8009400 <__ssputs_r+0x84>
 800938e:	898a      	ldrh	r2, [r1, #12]
 8009390:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009394:	d032      	beq.n	80093fc <__ssputs_r+0x80>
 8009396:	6825      	ldr	r5, [r4, #0]
 8009398:	6909      	ldr	r1, [r1, #16]
 800939a:	eba5 0901 	sub.w	r9, r5, r1
 800939e:	6965      	ldr	r5, [r4, #20]
 80093a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093a8:	3301      	adds	r3, #1
 80093aa:	444b      	add	r3, r9
 80093ac:	106d      	asrs	r5, r5, #1
 80093ae:	429d      	cmp	r5, r3
 80093b0:	bf38      	it	cc
 80093b2:	461d      	movcc	r5, r3
 80093b4:	0553      	lsls	r3, r2, #21
 80093b6:	d531      	bpl.n	800941c <__ssputs_r+0xa0>
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7ff ff85 	bl	80092c8 <_malloc_r>
 80093be:	4606      	mov	r6, r0
 80093c0:	b950      	cbnz	r0, 80093d8 <__ssputs_r+0x5c>
 80093c2:	230c      	movs	r3, #12
 80093c4:	f8ca 3000 	str.w	r3, [sl]
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d8:	6921      	ldr	r1, [r4, #16]
 80093da:	464a      	mov	r2, r9
 80093dc:	f7ff fb88 	bl	8008af0 <memcpy>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	6126      	str	r6, [r4, #16]
 80093ee:	6165      	str	r5, [r4, #20]
 80093f0:	444e      	add	r6, r9
 80093f2:	eba5 0509 	sub.w	r5, r5, r9
 80093f6:	6026      	str	r6, [r4, #0]
 80093f8:	60a5      	str	r5, [r4, #8]
 80093fa:	463e      	mov	r6, r7
 80093fc:	42be      	cmp	r6, r7
 80093fe:	d900      	bls.n	8009402 <__ssputs_r+0x86>
 8009400:	463e      	mov	r6, r7
 8009402:	4632      	mov	r2, r6
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	4641      	mov	r1, r8
 8009408:	f000 f966 	bl	80096d8 <memmove>
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	6822      	ldr	r2, [r4, #0]
 8009410:	1b9b      	subs	r3, r3, r6
 8009412:	4432      	add	r2, r6
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	6022      	str	r2, [r4, #0]
 8009418:	2000      	movs	r0, #0
 800941a:	e7db      	b.n	80093d4 <__ssputs_r+0x58>
 800941c:	462a      	mov	r2, r5
 800941e:	f000 f981 	bl	8009724 <_realloc_r>
 8009422:	4606      	mov	r6, r0
 8009424:	2800      	cmp	r0, #0
 8009426:	d1e1      	bne.n	80093ec <__ssputs_r+0x70>
 8009428:	6921      	ldr	r1, [r4, #16]
 800942a:	4650      	mov	r0, sl
 800942c:	f7ff fefc 	bl	8009228 <_free_r>
 8009430:	e7c7      	b.n	80093c2 <__ssputs_r+0x46>
	...

08009434 <_svfiprintf_r>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	4698      	mov	r8, r3
 800943a:	898b      	ldrh	r3, [r1, #12]
 800943c:	061b      	lsls	r3, r3, #24
 800943e:	b09d      	sub	sp, #116	; 0x74
 8009440:	4607      	mov	r7, r0
 8009442:	460d      	mov	r5, r1
 8009444:	4614      	mov	r4, r2
 8009446:	d50e      	bpl.n	8009466 <_svfiprintf_r+0x32>
 8009448:	690b      	ldr	r3, [r1, #16]
 800944a:	b963      	cbnz	r3, 8009466 <_svfiprintf_r+0x32>
 800944c:	2140      	movs	r1, #64	; 0x40
 800944e:	f7ff ff3b 	bl	80092c8 <_malloc_r>
 8009452:	6028      	str	r0, [r5, #0]
 8009454:	6128      	str	r0, [r5, #16]
 8009456:	b920      	cbnz	r0, 8009462 <_svfiprintf_r+0x2e>
 8009458:	230c      	movs	r3, #12
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	f04f 30ff 	mov.w	r0, #4294967295
 8009460:	e0d1      	b.n	8009606 <_svfiprintf_r+0x1d2>
 8009462:	2340      	movs	r3, #64	; 0x40
 8009464:	616b      	str	r3, [r5, #20]
 8009466:	2300      	movs	r3, #0
 8009468:	9309      	str	r3, [sp, #36]	; 0x24
 800946a:	2320      	movs	r3, #32
 800946c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009470:	f8cd 800c 	str.w	r8, [sp, #12]
 8009474:	2330      	movs	r3, #48	; 0x30
 8009476:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009620 <_svfiprintf_r+0x1ec>
 800947a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800947e:	f04f 0901 	mov.w	r9, #1
 8009482:	4623      	mov	r3, r4
 8009484:	469a      	mov	sl, r3
 8009486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800948a:	b10a      	cbz	r2, 8009490 <_svfiprintf_r+0x5c>
 800948c:	2a25      	cmp	r2, #37	; 0x25
 800948e:	d1f9      	bne.n	8009484 <_svfiprintf_r+0x50>
 8009490:	ebba 0b04 	subs.w	fp, sl, r4
 8009494:	d00b      	beq.n	80094ae <_svfiprintf_r+0x7a>
 8009496:	465b      	mov	r3, fp
 8009498:	4622      	mov	r2, r4
 800949a:	4629      	mov	r1, r5
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff ff6d 	bl	800937c <__ssputs_r>
 80094a2:	3001      	adds	r0, #1
 80094a4:	f000 80aa 	beq.w	80095fc <_svfiprintf_r+0x1c8>
 80094a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094aa:	445a      	add	r2, fp
 80094ac:	9209      	str	r2, [sp, #36]	; 0x24
 80094ae:	f89a 3000 	ldrb.w	r3, [sl]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 80a2 	beq.w	80095fc <_svfiprintf_r+0x1c8>
 80094b8:	2300      	movs	r3, #0
 80094ba:	f04f 32ff 	mov.w	r2, #4294967295
 80094be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c2:	f10a 0a01 	add.w	sl, sl, #1
 80094c6:	9304      	str	r3, [sp, #16]
 80094c8:	9307      	str	r3, [sp, #28]
 80094ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094ce:	931a      	str	r3, [sp, #104]	; 0x68
 80094d0:	4654      	mov	r4, sl
 80094d2:	2205      	movs	r2, #5
 80094d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d8:	4851      	ldr	r0, [pc, #324]	; (8009620 <_svfiprintf_r+0x1ec>)
 80094da:	f7f6 fe89 	bl	80001f0 <memchr>
 80094de:	9a04      	ldr	r2, [sp, #16]
 80094e0:	b9d8      	cbnz	r0, 800951a <_svfiprintf_r+0xe6>
 80094e2:	06d0      	lsls	r0, r2, #27
 80094e4:	bf44      	itt	mi
 80094e6:	2320      	movmi	r3, #32
 80094e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ec:	0711      	lsls	r1, r2, #28
 80094ee:	bf44      	itt	mi
 80094f0:	232b      	movmi	r3, #43	; 0x2b
 80094f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f6:	f89a 3000 	ldrb.w	r3, [sl]
 80094fa:	2b2a      	cmp	r3, #42	; 0x2a
 80094fc:	d015      	beq.n	800952a <_svfiprintf_r+0xf6>
 80094fe:	9a07      	ldr	r2, [sp, #28]
 8009500:	4654      	mov	r4, sl
 8009502:	2000      	movs	r0, #0
 8009504:	f04f 0c0a 	mov.w	ip, #10
 8009508:	4621      	mov	r1, r4
 800950a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800950e:	3b30      	subs	r3, #48	; 0x30
 8009510:	2b09      	cmp	r3, #9
 8009512:	d94e      	bls.n	80095b2 <_svfiprintf_r+0x17e>
 8009514:	b1b0      	cbz	r0, 8009544 <_svfiprintf_r+0x110>
 8009516:	9207      	str	r2, [sp, #28]
 8009518:	e014      	b.n	8009544 <_svfiprintf_r+0x110>
 800951a:	eba0 0308 	sub.w	r3, r0, r8
 800951e:	fa09 f303 	lsl.w	r3, r9, r3
 8009522:	4313      	orrs	r3, r2
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	46a2      	mov	sl, r4
 8009528:	e7d2      	b.n	80094d0 <_svfiprintf_r+0x9c>
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	1d19      	adds	r1, r3, #4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	9103      	str	r1, [sp, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	bfbb      	ittet	lt
 8009536:	425b      	neglt	r3, r3
 8009538:	f042 0202 	orrlt.w	r2, r2, #2
 800953c:	9307      	strge	r3, [sp, #28]
 800953e:	9307      	strlt	r3, [sp, #28]
 8009540:	bfb8      	it	lt
 8009542:	9204      	strlt	r2, [sp, #16]
 8009544:	7823      	ldrb	r3, [r4, #0]
 8009546:	2b2e      	cmp	r3, #46	; 0x2e
 8009548:	d10c      	bne.n	8009564 <_svfiprintf_r+0x130>
 800954a:	7863      	ldrb	r3, [r4, #1]
 800954c:	2b2a      	cmp	r3, #42	; 0x2a
 800954e:	d135      	bne.n	80095bc <_svfiprintf_r+0x188>
 8009550:	9b03      	ldr	r3, [sp, #12]
 8009552:	1d1a      	adds	r2, r3, #4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	9203      	str	r2, [sp, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	bfb8      	it	lt
 800955c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009560:	3402      	adds	r4, #2
 8009562:	9305      	str	r3, [sp, #20]
 8009564:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009630 <_svfiprintf_r+0x1fc>
 8009568:	7821      	ldrb	r1, [r4, #0]
 800956a:	2203      	movs	r2, #3
 800956c:	4650      	mov	r0, sl
 800956e:	f7f6 fe3f 	bl	80001f0 <memchr>
 8009572:	b140      	cbz	r0, 8009586 <_svfiprintf_r+0x152>
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	eba0 000a 	sub.w	r0, r0, sl
 800957a:	fa03 f000 	lsl.w	r0, r3, r0
 800957e:	9b04      	ldr	r3, [sp, #16]
 8009580:	4303      	orrs	r3, r0
 8009582:	3401      	adds	r4, #1
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958a:	4826      	ldr	r0, [pc, #152]	; (8009624 <_svfiprintf_r+0x1f0>)
 800958c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009590:	2206      	movs	r2, #6
 8009592:	f7f6 fe2d 	bl	80001f0 <memchr>
 8009596:	2800      	cmp	r0, #0
 8009598:	d038      	beq.n	800960c <_svfiprintf_r+0x1d8>
 800959a:	4b23      	ldr	r3, [pc, #140]	; (8009628 <_svfiprintf_r+0x1f4>)
 800959c:	bb1b      	cbnz	r3, 80095e6 <_svfiprintf_r+0x1b2>
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	3307      	adds	r3, #7
 80095a2:	f023 0307 	bic.w	r3, r3, #7
 80095a6:	3308      	adds	r3, #8
 80095a8:	9303      	str	r3, [sp, #12]
 80095aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ac:	4433      	add	r3, r6
 80095ae:	9309      	str	r3, [sp, #36]	; 0x24
 80095b0:	e767      	b.n	8009482 <_svfiprintf_r+0x4e>
 80095b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80095b6:	460c      	mov	r4, r1
 80095b8:	2001      	movs	r0, #1
 80095ba:	e7a5      	b.n	8009508 <_svfiprintf_r+0xd4>
 80095bc:	2300      	movs	r3, #0
 80095be:	3401      	adds	r4, #1
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	4619      	mov	r1, r3
 80095c4:	f04f 0c0a 	mov.w	ip, #10
 80095c8:	4620      	mov	r0, r4
 80095ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ce:	3a30      	subs	r2, #48	; 0x30
 80095d0:	2a09      	cmp	r2, #9
 80095d2:	d903      	bls.n	80095dc <_svfiprintf_r+0x1a8>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0c5      	beq.n	8009564 <_svfiprintf_r+0x130>
 80095d8:	9105      	str	r1, [sp, #20]
 80095da:	e7c3      	b.n	8009564 <_svfiprintf_r+0x130>
 80095dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80095e0:	4604      	mov	r4, r0
 80095e2:	2301      	movs	r3, #1
 80095e4:	e7f0      	b.n	80095c8 <_svfiprintf_r+0x194>
 80095e6:	ab03      	add	r3, sp, #12
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	462a      	mov	r2, r5
 80095ec:	4b0f      	ldr	r3, [pc, #60]	; (800962c <_svfiprintf_r+0x1f8>)
 80095ee:	a904      	add	r1, sp, #16
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7fe f80f 	bl	8007614 <_printf_float>
 80095f6:	1c42      	adds	r2, r0, #1
 80095f8:	4606      	mov	r6, r0
 80095fa:	d1d6      	bne.n	80095aa <_svfiprintf_r+0x176>
 80095fc:	89ab      	ldrh	r3, [r5, #12]
 80095fe:	065b      	lsls	r3, r3, #25
 8009600:	f53f af2c 	bmi.w	800945c <_svfiprintf_r+0x28>
 8009604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009606:	b01d      	add	sp, #116	; 0x74
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	ab03      	add	r3, sp, #12
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	462a      	mov	r2, r5
 8009612:	4b06      	ldr	r3, [pc, #24]	; (800962c <_svfiprintf_r+0x1f8>)
 8009614:	a904      	add	r1, sp, #16
 8009616:	4638      	mov	r0, r7
 8009618:	f7fe faa0 	bl	8007b5c <_printf_i>
 800961c:	e7eb      	b.n	80095f6 <_svfiprintf_r+0x1c2>
 800961e:	bf00      	nop
 8009620:	0800a4dc 	.word	0x0800a4dc
 8009624:	0800a4e6 	.word	0x0800a4e6
 8009628:	08007615 	.word	0x08007615
 800962c:	0800937d 	.word	0x0800937d
 8009630:	0800a4e2 	.word	0x0800a4e2

08009634 <_sbrk_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d06      	ldr	r5, [pc, #24]	; (8009650 <_sbrk_r+0x1c>)
 8009638:	2300      	movs	r3, #0
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f8 fe3a 	bl	80022b8 <_sbrk>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_sbrk_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_sbrk_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	20000674 	.word	0x20000674

08009654 <__assert_func>:
 8009654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009656:	4614      	mov	r4, r2
 8009658:	461a      	mov	r2, r3
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <__assert_func+0x2c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4605      	mov	r5, r0
 8009660:	68d8      	ldr	r0, [r3, #12]
 8009662:	b14c      	cbz	r4, 8009678 <__assert_func+0x24>
 8009664:	4b07      	ldr	r3, [pc, #28]	; (8009684 <__assert_func+0x30>)
 8009666:	9100      	str	r1, [sp, #0]
 8009668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800966c:	4906      	ldr	r1, [pc, #24]	; (8009688 <__assert_func+0x34>)
 800966e:	462b      	mov	r3, r5
 8009670:	f000 f80e 	bl	8009690 <fiprintf>
 8009674:	f000 faa4 	bl	8009bc0 <abort>
 8009678:	4b04      	ldr	r3, [pc, #16]	; (800968c <__assert_func+0x38>)
 800967a:	461c      	mov	r4, r3
 800967c:	e7f3      	b.n	8009666 <__assert_func+0x12>
 800967e:	bf00      	nop
 8009680:	20000054 	.word	0x20000054
 8009684:	0800a4ed 	.word	0x0800a4ed
 8009688:	0800a4fa 	.word	0x0800a4fa
 800968c:	0800a528 	.word	0x0800a528

08009690 <fiprintf>:
 8009690:	b40e      	push	{r1, r2, r3}
 8009692:	b503      	push	{r0, r1, lr}
 8009694:	4601      	mov	r1, r0
 8009696:	ab03      	add	r3, sp, #12
 8009698:	4805      	ldr	r0, [pc, #20]	; (80096b0 <fiprintf+0x20>)
 800969a:	f853 2b04 	ldr.w	r2, [r3], #4
 800969e:	6800      	ldr	r0, [r0, #0]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	f000 f88f 	bl	80097c4 <_vfiprintf_r>
 80096a6:	b002      	add	sp, #8
 80096a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ac:	b003      	add	sp, #12
 80096ae:	4770      	bx	lr
 80096b0:	20000054 	.word	0x20000054

080096b4 <__ascii_mbtowc>:
 80096b4:	b082      	sub	sp, #8
 80096b6:	b901      	cbnz	r1, 80096ba <__ascii_mbtowc+0x6>
 80096b8:	a901      	add	r1, sp, #4
 80096ba:	b142      	cbz	r2, 80096ce <__ascii_mbtowc+0x1a>
 80096bc:	b14b      	cbz	r3, 80096d2 <__ascii_mbtowc+0x1e>
 80096be:	7813      	ldrb	r3, [r2, #0]
 80096c0:	600b      	str	r3, [r1, #0]
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	1e10      	subs	r0, r2, #0
 80096c6:	bf18      	it	ne
 80096c8:	2001      	movne	r0, #1
 80096ca:	b002      	add	sp, #8
 80096cc:	4770      	bx	lr
 80096ce:	4610      	mov	r0, r2
 80096d0:	e7fb      	b.n	80096ca <__ascii_mbtowc+0x16>
 80096d2:	f06f 0001 	mvn.w	r0, #1
 80096d6:	e7f8      	b.n	80096ca <__ascii_mbtowc+0x16>

080096d8 <memmove>:
 80096d8:	4288      	cmp	r0, r1
 80096da:	b510      	push	{r4, lr}
 80096dc:	eb01 0402 	add.w	r4, r1, r2
 80096e0:	d902      	bls.n	80096e8 <memmove+0x10>
 80096e2:	4284      	cmp	r4, r0
 80096e4:	4623      	mov	r3, r4
 80096e6:	d807      	bhi.n	80096f8 <memmove+0x20>
 80096e8:	1e43      	subs	r3, r0, #1
 80096ea:	42a1      	cmp	r1, r4
 80096ec:	d008      	beq.n	8009700 <memmove+0x28>
 80096ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096f6:	e7f8      	b.n	80096ea <memmove+0x12>
 80096f8:	4402      	add	r2, r0
 80096fa:	4601      	mov	r1, r0
 80096fc:	428a      	cmp	r2, r1
 80096fe:	d100      	bne.n	8009702 <memmove+0x2a>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970a:	e7f7      	b.n	80096fc <memmove+0x24>

0800970c <__malloc_lock>:
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <__malloc_lock+0x8>)
 800970e:	f000 bc17 	b.w	8009f40 <__retarget_lock_acquire_recursive>
 8009712:	bf00      	nop
 8009714:	2000067c 	.word	0x2000067c

08009718 <__malloc_unlock>:
 8009718:	4801      	ldr	r0, [pc, #4]	; (8009720 <__malloc_unlock+0x8>)
 800971a:	f000 bc12 	b.w	8009f42 <__retarget_lock_release_recursive>
 800971e:	bf00      	nop
 8009720:	2000067c 	.word	0x2000067c

08009724 <_realloc_r>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	4607      	mov	r7, r0
 8009728:	4614      	mov	r4, r2
 800972a:	460e      	mov	r6, r1
 800972c:	b921      	cbnz	r1, 8009738 <_realloc_r+0x14>
 800972e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009732:	4611      	mov	r1, r2
 8009734:	f7ff bdc8 	b.w	80092c8 <_malloc_r>
 8009738:	b922      	cbnz	r2, 8009744 <_realloc_r+0x20>
 800973a:	f7ff fd75 	bl	8009228 <_free_r>
 800973e:	4625      	mov	r5, r4
 8009740:	4628      	mov	r0, r5
 8009742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009744:	f000 fc62 	bl	800a00c <_malloc_usable_size_r>
 8009748:	42a0      	cmp	r0, r4
 800974a:	d20f      	bcs.n	800976c <_realloc_r+0x48>
 800974c:	4621      	mov	r1, r4
 800974e:	4638      	mov	r0, r7
 8009750:	f7ff fdba 	bl	80092c8 <_malloc_r>
 8009754:	4605      	mov	r5, r0
 8009756:	2800      	cmp	r0, #0
 8009758:	d0f2      	beq.n	8009740 <_realloc_r+0x1c>
 800975a:	4631      	mov	r1, r6
 800975c:	4622      	mov	r2, r4
 800975e:	f7ff f9c7 	bl	8008af0 <memcpy>
 8009762:	4631      	mov	r1, r6
 8009764:	4638      	mov	r0, r7
 8009766:	f7ff fd5f 	bl	8009228 <_free_r>
 800976a:	e7e9      	b.n	8009740 <_realloc_r+0x1c>
 800976c:	4635      	mov	r5, r6
 800976e:	e7e7      	b.n	8009740 <_realloc_r+0x1c>

08009770 <__sfputc_r>:
 8009770:	6893      	ldr	r3, [r2, #8]
 8009772:	3b01      	subs	r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	b410      	push	{r4}
 8009778:	6093      	str	r3, [r2, #8]
 800977a:	da08      	bge.n	800978e <__sfputc_r+0x1e>
 800977c:	6994      	ldr	r4, [r2, #24]
 800977e:	42a3      	cmp	r3, r4
 8009780:	db01      	blt.n	8009786 <__sfputc_r+0x16>
 8009782:	290a      	cmp	r1, #10
 8009784:	d103      	bne.n	800978e <__sfputc_r+0x1e>
 8009786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800978a:	f000 b94b 	b.w	8009a24 <__swbuf_r>
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	1c58      	adds	r0, r3, #1
 8009792:	6010      	str	r0, [r2, #0]
 8009794:	7019      	strb	r1, [r3, #0]
 8009796:	4608      	mov	r0, r1
 8009798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979c:	4770      	bx	lr

0800979e <__sfputs_r>:
 800979e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a0:	4606      	mov	r6, r0
 80097a2:	460f      	mov	r7, r1
 80097a4:	4614      	mov	r4, r2
 80097a6:	18d5      	adds	r5, r2, r3
 80097a8:	42ac      	cmp	r4, r5
 80097aa:	d101      	bne.n	80097b0 <__sfputs_r+0x12>
 80097ac:	2000      	movs	r0, #0
 80097ae:	e007      	b.n	80097c0 <__sfputs_r+0x22>
 80097b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b4:	463a      	mov	r2, r7
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff ffda 	bl	8009770 <__sfputc_r>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d1f3      	bne.n	80097a8 <__sfputs_r+0xa>
 80097c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097c4 <_vfiprintf_r>:
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	460d      	mov	r5, r1
 80097ca:	b09d      	sub	sp, #116	; 0x74
 80097cc:	4614      	mov	r4, r2
 80097ce:	4698      	mov	r8, r3
 80097d0:	4606      	mov	r6, r0
 80097d2:	b118      	cbz	r0, 80097dc <_vfiprintf_r+0x18>
 80097d4:	6983      	ldr	r3, [r0, #24]
 80097d6:	b90b      	cbnz	r3, 80097dc <_vfiprintf_r+0x18>
 80097d8:	f000 fb14 	bl	8009e04 <__sinit>
 80097dc:	4b89      	ldr	r3, [pc, #548]	; (8009a04 <_vfiprintf_r+0x240>)
 80097de:	429d      	cmp	r5, r3
 80097e0:	d11b      	bne.n	800981a <_vfiprintf_r+0x56>
 80097e2:	6875      	ldr	r5, [r6, #4]
 80097e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097e6:	07d9      	lsls	r1, r3, #31
 80097e8:	d405      	bmi.n	80097f6 <_vfiprintf_r+0x32>
 80097ea:	89ab      	ldrh	r3, [r5, #12]
 80097ec:	059a      	lsls	r2, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_vfiprintf_r+0x32>
 80097f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097f2:	f000 fba5 	bl	8009f40 <__retarget_lock_acquire_recursive>
 80097f6:	89ab      	ldrh	r3, [r5, #12]
 80097f8:	071b      	lsls	r3, r3, #28
 80097fa:	d501      	bpl.n	8009800 <_vfiprintf_r+0x3c>
 80097fc:	692b      	ldr	r3, [r5, #16]
 80097fe:	b9eb      	cbnz	r3, 800983c <_vfiprintf_r+0x78>
 8009800:	4629      	mov	r1, r5
 8009802:	4630      	mov	r0, r6
 8009804:	f000 f96e 	bl	8009ae4 <__swsetup_r>
 8009808:	b1c0      	cbz	r0, 800983c <_vfiprintf_r+0x78>
 800980a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800980c:	07dc      	lsls	r4, r3, #31
 800980e:	d50e      	bpl.n	800982e <_vfiprintf_r+0x6a>
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	b01d      	add	sp, #116	; 0x74
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	4b7b      	ldr	r3, [pc, #492]	; (8009a08 <_vfiprintf_r+0x244>)
 800981c:	429d      	cmp	r5, r3
 800981e:	d101      	bne.n	8009824 <_vfiprintf_r+0x60>
 8009820:	68b5      	ldr	r5, [r6, #8]
 8009822:	e7df      	b.n	80097e4 <_vfiprintf_r+0x20>
 8009824:	4b79      	ldr	r3, [pc, #484]	; (8009a0c <_vfiprintf_r+0x248>)
 8009826:	429d      	cmp	r5, r3
 8009828:	bf08      	it	eq
 800982a:	68f5      	ldreq	r5, [r6, #12]
 800982c:	e7da      	b.n	80097e4 <_vfiprintf_r+0x20>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	0598      	lsls	r0, r3, #22
 8009832:	d4ed      	bmi.n	8009810 <_vfiprintf_r+0x4c>
 8009834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009836:	f000 fb84 	bl	8009f42 <__retarget_lock_release_recursive>
 800983a:	e7e9      	b.n	8009810 <_vfiprintf_r+0x4c>
 800983c:	2300      	movs	r3, #0
 800983e:	9309      	str	r3, [sp, #36]	; 0x24
 8009840:	2320      	movs	r3, #32
 8009842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009846:	f8cd 800c 	str.w	r8, [sp, #12]
 800984a:	2330      	movs	r3, #48	; 0x30
 800984c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a10 <_vfiprintf_r+0x24c>
 8009850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009854:	f04f 0901 	mov.w	r9, #1
 8009858:	4623      	mov	r3, r4
 800985a:	469a      	mov	sl, r3
 800985c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009860:	b10a      	cbz	r2, 8009866 <_vfiprintf_r+0xa2>
 8009862:	2a25      	cmp	r2, #37	; 0x25
 8009864:	d1f9      	bne.n	800985a <_vfiprintf_r+0x96>
 8009866:	ebba 0b04 	subs.w	fp, sl, r4
 800986a:	d00b      	beq.n	8009884 <_vfiprintf_r+0xc0>
 800986c:	465b      	mov	r3, fp
 800986e:	4622      	mov	r2, r4
 8009870:	4629      	mov	r1, r5
 8009872:	4630      	mov	r0, r6
 8009874:	f7ff ff93 	bl	800979e <__sfputs_r>
 8009878:	3001      	adds	r0, #1
 800987a:	f000 80aa 	beq.w	80099d2 <_vfiprintf_r+0x20e>
 800987e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009880:	445a      	add	r2, fp
 8009882:	9209      	str	r2, [sp, #36]	; 0x24
 8009884:	f89a 3000 	ldrb.w	r3, [sl]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 80a2 	beq.w	80099d2 <_vfiprintf_r+0x20e>
 800988e:	2300      	movs	r3, #0
 8009890:	f04f 32ff 	mov.w	r2, #4294967295
 8009894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009898:	f10a 0a01 	add.w	sl, sl, #1
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	9307      	str	r3, [sp, #28]
 80098a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a4:	931a      	str	r3, [sp, #104]	; 0x68
 80098a6:	4654      	mov	r4, sl
 80098a8:	2205      	movs	r2, #5
 80098aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ae:	4858      	ldr	r0, [pc, #352]	; (8009a10 <_vfiprintf_r+0x24c>)
 80098b0:	f7f6 fc9e 	bl	80001f0 <memchr>
 80098b4:	9a04      	ldr	r2, [sp, #16]
 80098b6:	b9d8      	cbnz	r0, 80098f0 <_vfiprintf_r+0x12c>
 80098b8:	06d1      	lsls	r1, r2, #27
 80098ba:	bf44      	itt	mi
 80098bc:	2320      	movmi	r3, #32
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c2:	0713      	lsls	r3, r2, #28
 80098c4:	bf44      	itt	mi
 80098c6:	232b      	movmi	r3, #43	; 0x2b
 80098c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098cc:	f89a 3000 	ldrb.w	r3, [sl]
 80098d0:	2b2a      	cmp	r3, #42	; 0x2a
 80098d2:	d015      	beq.n	8009900 <_vfiprintf_r+0x13c>
 80098d4:	9a07      	ldr	r2, [sp, #28]
 80098d6:	4654      	mov	r4, sl
 80098d8:	2000      	movs	r0, #0
 80098da:	f04f 0c0a 	mov.w	ip, #10
 80098de:	4621      	mov	r1, r4
 80098e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e4:	3b30      	subs	r3, #48	; 0x30
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d94e      	bls.n	8009988 <_vfiprintf_r+0x1c4>
 80098ea:	b1b0      	cbz	r0, 800991a <_vfiprintf_r+0x156>
 80098ec:	9207      	str	r2, [sp, #28]
 80098ee:	e014      	b.n	800991a <_vfiprintf_r+0x156>
 80098f0:	eba0 0308 	sub.w	r3, r0, r8
 80098f4:	fa09 f303 	lsl.w	r3, r9, r3
 80098f8:	4313      	orrs	r3, r2
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	46a2      	mov	sl, r4
 80098fe:	e7d2      	b.n	80098a6 <_vfiprintf_r+0xe2>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	1d19      	adds	r1, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	9103      	str	r1, [sp, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbb      	ittet	lt
 800990c:	425b      	neglt	r3, r3
 800990e:	f042 0202 	orrlt.w	r2, r2, #2
 8009912:	9307      	strge	r3, [sp, #28]
 8009914:	9307      	strlt	r3, [sp, #28]
 8009916:	bfb8      	it	lt
 8009918:	9204      	strlt	r2, [sp, #16]
 800991a:	7823      	ldrb	r3, [r4, #0]
 800991c:	2b2e      	cmp	r3, #46	; 0x2e
 800991e:	d10c      	bne.n	800993a <_vfiprintf_r+0x176>
 8009920:	7863      	ldrb	r3, [r4, #1]
 8009922:	2b2a      	cmp	r3, #42	; 0x2a
 8009924:	d135      	bne.n	8009992 <_vfiprintf_r+0x1ce>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	9203      	str	r2, [sp, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	bfb8      	it	lt
 8009932:	f04f 33ff 	movlt.w	r3, #4294967295
 8009936:	3402      	adds	r4, #2
 8009938:	9305      	str	r3, [sp, #20]
 800993a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a20 <_vfiprintf_r+0x25c>
 800993e:	7821      	ldrb	r1, [r4, #0]
 8009940:	2203      	movs	r2, #3
 8009942:	4650      	mov	r0, sl
 8009944:	f7f6 fc54 	bl	80001f0 <memchr>
 8009948:	b140      	cbz	r0, 800995c <_vfiprintf_r+0x198>
 800994a:	2340      	movs	r3, #64	; 0x40
 800994c:	eba0 000a 	sub.w	r0, r0, sl
 8009950:	fa03 f000 	lsl.w	r0, r3, r0
 8009954:	9b04      	ldr	r3, [sp, #16]
 8009956:	4303      	orrs	r3, r0
 8009958:	3401      	adds	r4, #1
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	482c      	ldr	r0, [pc, #176]	; (8009a14 <_vfiprintf_r+0x250>)
 8009962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009966:	2206      	movs	r2, #6
 8009968:	f7f6 fc42 	bl	80001f0 <memchr>
 800996c:	2800      	cmp	r0, #0
 800996e:	d03f      	beq.n	80099f0 <_vfiprintf_r+0x22c>
 8009970:	4b29      	ldr	r3, [pc, #164]	; (8009a18 <_vfiprintf_r+0x254>)
 8009972:	bb1b      	cbnz	r3, 80099bc <_vfiprintf_r+0x1f8>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	3307      	adds	r3, #7
 8009978:	f023 0307 	bic.w	r3, r3, #7
 800997c:	3308      	adds	r3, #8
 800997e:	9303      	str	r3, [sp, #12]
 8009980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009982:	443b      	add	r3, r7
 8009984:	9309      	str	r3, [sp, #36]	; 0x24
 8009986:	e767      	b.n	8009858 <_vfiprintf_r+0x94>
 8009988:	fb0c 3202 	mla	r2, ip, r2, r3
 800998c:	460c      	mov	r4, r1
 800998e:	2001      	movs	r0, #1
 8009990:	e7a5      	b.n	80098de <_vfiprintf_r+0x11a>
 8009992:	2300      	movs	r3, #0
 8009994:	3401      	adds	r4, #1
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	4619      	mov	r1, r3
 800999a:	f04f 0c0a 	mov.w	ip, #10
 800999e:	4620      	mov	r0, r4
 80099a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a4:	3a30      	subs	r2, #48	; 0x30
 80099a6:	2a09      	cmp	r2, #9
 80099a8:	d903      	bls.n	80099b2 <_vfiprintf_r+0x1ee>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c5      	beq.n	800993a <_vfiprintf_r+0x176>
 80099ae:	9105      	str	r1, [sp, #20]
 80099b0:	e7c3      	b.n	800993a <_vfiprintf_r+0x176>
 80099b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b6:	4604      	mov	r4, r0
 80099b8:	2301      	movs	r3, #1
 80099ba:	e7f0      	b.n	800999e <_vfiprintf_r+0x1da>
 80099bc:	ab03      	add	r3, sp, #12
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	462a      	mov	r2, r5
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <_vfiprintf_r+0x258>)
 80099c4:	a904      	add	r1, sp, #16
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7fd fe24 	bl	8007614 <_printf_float>
 80099cc:	4607      	mov	r7, r0
 80099ce:	1c78      	adds	r0, r7, #1
 80099d0:	d1d6      	bne.n	8009980 <_vfiprintf_r+0x1bc>
 80099d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099d4:	07d9      	lsls	r1, r3, #31
 80099d6:	d405      	bmi.n	80099e4 <_vfiprintf_r+0x220>
 80099d8:	89ab      	ldrh	r3, [r5, #12]
 80099da:	059a      	lsls	r2, r3, #22
 80099dc:	d402      	bmi.n	80099e4 <_vfiprintf_r+0x220>
 80099de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099e0:	f000 faaf 	bl	8009f42 <__retarget_lock_release_recursive>
 80099e4:	89ab      	ldrh	r3, [r5, #12]
 80099e6:	065b      	lsls	r3, r3, #25
 80099e8:	f53f af12 	bmi.w	8009810 <_vfiprintf_r+0x4c>
 80099ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ee:	e711      	b.n	8009814 <_vfiprintf_r+0x50>
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	462a      	mov	r2, r5
 80099f6:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <_vfiprintf_r+0x258>)
 80099f8:	a904      	add	r1, sp, #16
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7fe f8ae 	bl	8007b5c <_printf_i>
 8009a00:	e7e4      	b.n	80099cc <_vfiprintf_r+0x208>
 8009a02:	bf00      	nop
 8009a04:	0800a654 	.word	0x0800a654
 8009a08:	0800a674 	.word	0x0800a674
 8009a0c:	0800a634 	.word	0x0800a634
 8009a10:	0800a4dc 	.word	0x0800a4dc
 8009a14:	0800a4e6 	.word	0x0800a4e6
 8009a18:	08007615 	.word	0x08007615
 8009a1c:	0800979f 	.word	0x0800979f
 8009a20:	0800a4e2 	.word	0x0800a4e2

08009a24 <__swbuf_r>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	460e      	mov	r6, r1
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	b118      	cbz	r0, 8009a36 <__swbuf_r+0x12>
 8009a2e:	6983      	ldr	r3, [r0, #24]
 8009a30:	b90b      	cbnz	r3, 8009a36 <__swbuf_r+0x12>
 8009a32:	f000 f9e7 	bl	8009e04 <__sinit>
 8009a36:	4b21      	ldr	r3, [pc, #132]	; (8009abc <__swbuf_r+0x98>)
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	d12b      	bne.n	8009a94 <__swbuf_r+0x70>
 8009a3c:	686c      	ldr	r4, [r5, #4]
 8009a3e:	69a3      	ldr	r3, [r4, #24]
 8009a40:	60a3      	str	r3, [r4, #8]
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	071a      	lsls	r2, r3, #28
 8009a46:	d52f      	bpl.n	8009aa8 <__swbuf_r+0x84>
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	b36b      	cbz	r3, 8009aa8 <__swbuf_r+0x84>
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	6820      	ldr	r0, [r4, #0]
 8009a50:	1ac0      	subs	r0, r0, r3
 8009a52:	6963      	ldr	r3, [r4, #20]
 8009a54:	b2f6      	uxtb	r6, r6
 8009a56:	4283      	cmp	r3, r0
 8009a58:	4637      	mov	r7, r6
 8009a5a:	dc04      	bgt.n	8009a66 <__swbuf_r+0x42>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f93c 	bl	8009cdc <_fflush_r>
 8009a64:	bb30      	cbnz	r0, 8009ab4 <__swbuf_r+0x90>
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	60a3      	str	r3, [r4, #8]
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	6022      	str	r2, [r4, #0]
 8009a72:	701e      	strb	r6, [r3, #0]
 8009a74:	6963      	ldr	r3, [r4, #20]
 8009a76:	3001      	adds	r0, #1
 8009a78:	4283      	cmp	r3, r0
 8009a7a:	d004      	beq.n	8009a86 <__swbuf_r+0x62>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	07db      	lsls	r3, r3, #31
 8009a80:	d506      	bpl.n	8009a90 <__swbuf_r+0x6c>
 8009a82:	2e0a      	cmp	r6, #10
 8009a84:	d104      	bne.n	8009a90 <__swbuf_r+0x6c>
 8009a86:	4621      	mov	r1, r4
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 f927 	bl	8009cdc <_fflush_r>
 8009a8e:	b988      	cbnz	r0, 8009ab4 <__swbuf_r+0x90>
 8009a90:	4638      	mov	r0, r7
 8009a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a94:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <__swbuf_r+0x9c>)
 8009a96:	429c      	cmp	r4, r3
 8009a98:	d101      	bne.n	8009a9e <__swbuf_r+0x7a>
 8009a9a:	68ac      	ldr	r4, [r5, #8]
 8009a9c:	e7cf      	b.n	8009a3e <__swbuf_r+0x1a>
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <__swbuf_r+0xa0>)
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	bf08      	it	eq
 8009aa4:	68ec      	ldreq	r4, [r5, #12]
 8009aa6:	e7ca      	b.n	8009a3e <__swbuf_r+0x1a>
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f81a 	bl	8009ae4 <__swsetup_r>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0cb      	beq.n	8009a4c <__swbuf_r+0x28>
 8009ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ab8:	e7ea      	b.n	8009a90 <__swbuf_r+0x6c>
 8009aba:	bf00      	nop
 8009abc:	0800a654 	.word	0x0800a654
 8009ac0:	0800a674 	.word	0x0800a674
 8009ac4:	0800a634 	.word	0x0800a634

08009ac8 <__ascii_wctomb>:
 8009ac8:	b149      	cbz	r1, 8009ade <__ascii_wctomb+0x16>
 8009aca:	2aff      	cmp	r2, #255	; 0xff
 8009acc:	bf85      	ittet	hi
 8009ace:	238a      	movhi	r3, #138	; 0x8a
 8009ad0:	6003      	strhi	r3, [r0, #0]
 8009ad2:	700a      	strbls	r2, [r1, #0]
 8009ad4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ad8:	bf98      	it	ls
 8009ada:	2001      	movls	r0, #1
 8009adc:	4770      	bx	lr
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4770      	bx	lr
	...

08009ae4 <__swsetup_r>:
 8009ae4:	4b32      	ldr	r3, [pc, #200]	; (8009bb0 <__swsetup_r+0xcc>)
 8009ae6:	b570      	push	{r4, r5, r6, lr}
 8009ae8:	681d      	ldr	r5, [r3, #0]
 8009aea:	4606      	mov	r6, r0
 8009aec:	460c      	mov	r4, r1
 8009aee:	b125      	cbz	r5, 8009afa <__swsetup_r+0x16>
 8009af0:	69ab      	ldr	r3, [r5, #24]
 8009af2:	b913      	cbnz	r3, 8009afa <__swsetup_r+0x16>
 8009af4:	4628      	mov	r0, r5
 8009af6:	f000 f985 	bl	8009e04 <__sinit>
 8009afa:	4b2e      	ldr	r3, [pc, #184]	; (8009bb4 <__swsetup_r+0xd0>)
 8009afc:	429c      	cmp	r4, r3
 8009afe:	d10f      	bne.n	8009b20 <__swsetup_r+0x3c>
 8009b00:	686c      	ldr	r4, [r5, #4]
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b08:	0719      	lsls	r1, r3, #28
 8009b0a:	d42c      	bmi.n	8009b66 <__swsetup_r+0x82>
 8009b0c:	06dd      	lsls	r5, r3, #27
 8009b0e:	d411      	bmi.n	8009b34 <__swsetup_r+0x50>
 8009b10:	2309      	movs	r3, #9
 8009b12:	6033      	str	r3, [r6, #0]
 8009b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	e03e      	b.n	8009b9e <__swsetup_r+0xba>
 8009b20:	4b25      	ldr	r3, [pc, #148]	; (8009bb8 <__swsetup_r+0xd4>)
 8009b22:	429c      	cmp	r4, r3
 8009b24:	d101      	bne.n	8009b2a <__swsetup_r+0x46>
 8009b26:	68ac      	ldr	r4, [r5, #8]
 8009b28:	e7eb      	b.n	8009b02 <__swsetup_r+0x1e>
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <__swsetup_r+0xd8>)
 8009b2c:	429c      	cmp	r4, r3
 8009b2e:	bf08      	it	eq
 8009b30:	68ec      	ldreq	r4, [r5, #12]
 8009b32:	e7e6      	b.n	8009b02 <__swsetup_r+0x1e>
 8009b34:	0758      	lsls	r0, r3, #29
 8009b36:	d512      	bpl.n	8009b5e <__swsetup_r+0x7a>
 8009b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b3a:	b141      	cbz	r1, 8009b4e <__swsetup_r+0x6a>
 8009b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b40:	4299      	cmp	r1, r3
 8009b42:	d002      	beq.n	8009b4a <__swsetup_r+0x66>
 8009b44:	4630      	mov	r0, r6
 8009b46:	f7ff fb6f 	bl	8009228 <_free_r>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	2300      	movs	r3, #0
 8009b58:	6063      	str	r3, [r4, #4]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f043 0308 	orr.w	r3, r3, #8
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	b94b      	cbnz	r3, 8009b7e <__swsetup_r+0x9a>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b74:	d003      	beq.n	8009b7e <__swsetup_r+0x9a>
 8009b76:	4621      	mov	r1, r4
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f000 fa07 	bl	8009f8c <__smakebuf_r>
 8009b7e:	89a0      	ldrh	r0, [r4, #12]
 8009b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b84:	f010 0301 	ands.w	r3, r0, #1
 8009b88:	d00a      	beq.n	8009ba0 <__swsetup_r+0xbc>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60a3      	str	r3, [r4, #8]
 8009b8e:	6963      	ldr	r3, [r4, #20]
 8009b90:	425b      	negs	r3, r3
 8009b92:	61a3      	str	r3, [r4, #24]
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	b943      	cbnz	r3, 8009baa <__swsetup_r+0xc6>
 8009b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b9c:	d1ba      	bne.n	8009b14 <__swsetup_r+0x30>
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	0781      	lsls	r1, r0, #30
 8009ba2:	bf58      	it	pl
 8009ba4:	6963      	ldrpl	r3, [r4, #20]
 8009ba6:	60a3      	str	r3, [r4, #8]
 8009ba8:	e7f4      	b.n	8009b94 <__swsetup_r+0xb0>
 8009baa:	2000      	movs	r0, #0
 8009bac:	e7f7      	b.n	8009b9e <__swsetup_r+0xba>
 8009bae:	bf00      	nop
 8009bb0:	20000054 	.word	0x20000054
 8009bb4:	0800a654 	.word	0x0800a654
 8009bb8:	0800a674 	.word	0x0800a674
 8009bbc:	0800a634 	.word	0x0800a634

08009bc0 <abort>:
 8009bc0:	b508      	push	{r3, lr}
 8009bc2:	2006      	movs	r0, #6
 8009bc4:	f000 fa52 	bl	800a06c <raise>
 8009bc8:	2001      	movs	r0, #1
 8009bca:	f7f8 fafd 	bl	80021c8 <_exit>
	...

08009bd0 <__sflush_r>:
 8009bd0:	898a      	ldrh	r2, [r1, #12]
 8009bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	0710      	lsls	r0, r2, #28
 8009bda:	460c      	mov	r4, r1
 8009bdc:	d458      	bmi.n	8009c90 <__sflush_r+0xc0>
 8009bde:	684b      	ldr	r3, [r1, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dc05      	bgt.n	8009bf0 <__sflush_r+0x20>
 8009be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dc02      	bgt.n	8009bf0 <__sflush_r+0x20>
 8009bea:	2000      	movs	r0, #0
 8009bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bf2:	2e00      	cmp	r6, #0
 8009bf4:	d0f9      	beq.n	8009bea <__sflush_r+0x1a>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bfc:	682f      	ldr	r7, [r5, #0]
 8009bfe:	602b      	str	r3, [r5, #0]
 8009c00:	d032      	beq.n	8009c68 <__sflush_r+0x98>
 8009c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	075a      	lsls	r2, r3, #29
 8009c08:	d505      	bpl.n	8009c16 <__sflush_r+0x46>
 8009c0a:	6863      	ldr	r3, [r4, #4]
 8009c0c:	1ac0      	subs	r0, r0, r3
 8009c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c10:	b10b      	cbz	r3, 8009c16 <__sflush_r+0x46>
 8009c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c14:	1ac0      	subs	r0, r0, r3
 8009c16:	2300      	movs	r3, #0
 8009c18:	4602      	mov	r2, r0
 8009c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c1c:	6a21      	ldr	r1, [r4, #32]
 8009c1e:	4628      	mov	r0, r5
 8009c20:	47b0      	blx	r6
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	d106      	bne.n	8009c36 <__sflush_r+0x66>
 8009c28:	6829      	ldr	r1, [r5, #0]
 8009c2a:	291d      	cmp	r1, #29
 8009c2c:	d82c      	bhi.n	8009c88 <__sflush_r+0xb8>
 8009c2e:	4a2a      	ldr	r2, [pc, #168]	; (8009cd8 <__sflush_r+0x108>)
 8009c30:	40ca      	lsrs	r2, r1
 8009c32:	07d6      	lsls	r6, r2, #31
 8009c34:	d528      	bpl.n	8009c88 <__sflush_r+0xb8>
 8009c36:	2200      	movs	r2, #0
 8009c38:	6062      	str	r2, [r4, #4]
 8009c3a:	04d9      	lsls	r1, r3, #19
 8009c3c:	6922      	ldr	r2, [r4, #16]
 8009c3e:	6022      	str	r2, [r4, #0]
 8009c40:	d504      	bpl.n	8009c4c <__sflush_r+0x7c>
 8009c42:	1c42      	adds	r2, r0, #1
 8009c44:	d101      	bne.n	8009c4a <__sflush_r+0x7a>
 8009c46:	682b      	ldr	r3, [r5, #0]
 8009c48:	b903      	cbnz	r3, 8009c4c <__sflush_r+0x7c>
 8009c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8009c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c4e:	602f      	str	r7, [r5, #0]
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d0ca      	beq.n	8009bea <__sflush_r+0x1a>
 8009c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	d002      	beq.n	8009c62 <__sflush_r+0x92>
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f7ff fae3 	bl	8009228 <_free_r>
 8009c62:	2000      	movs	r0, #0
 8009c64:	6360      	str	r0, [r4, #52]	; 0x34
 8009c66:	e7c1      	b.n	8009bec <__sflush_r+0x1c>
 8009c68:	6a21      	ldr	r1, [r4, #32]
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b0      	blx	r6
 8009c70:	1c41      	adds	r1, r0, #1
 8009c72:	d1c7      	bne.n	8009c04 <__sflush_r+0x34>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0c4      	beq.n	8009c04 <__sflush_r+0x34>
 8009c7a:	2b1d      	cmp	r3, #29
 8009c7c:	d001      	beq.n	8009c82 <__sflush_r+0xb2>
 8009c7e:	2b16      	cmp	r3, #22
 8009c80:	d101      	bne.n	8009c86 <__sflush_r+0xb6>
 8009c82:	602f      	str	r7, [r5, #0]
 8009c84:	e7b1      	b.n	8009bea <__sflush_r+0x1a>
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	e7ad      	b.n	8009bec <__sflush_r+0x1c>
 8009c90:	690f      	ldr	r7, [r1, #16]
 8009c92:	2f00      	cmp	r7, #0
 8009c94:	d0a9      	beq.n	8009bea <__sflush_r+0x1a>
 8009c96:	0793      	lsls	r3, r2, #30
 8009c98:	680e      	ldr	r6, [r1, #0]
 8009c9a:	bf08      	it	eq
 8009c9c:	694b      	ldreq	r3, [r1, #20]
 8009c9e:	600f      	str	r7, [r1, #0]
 8009ca0:	bf18      	it	ne
 8009ca2:	2300      	movne	r3, #0
 8009ca4:	eba6 0807 	sub.w	r8, r6, r7
 8009ca8:	608b      	str	r3, [r1, #8]
 8009caa:	f1b8 0f00 	cmp.w	r8, #0
 8009cae:	dd9c      	ble.n	8009bea <__sflush_r+0x1a>
 8009cb0:	6a21      	ldr	r1, [r4, #32]
 8009cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cb4:	4643      	mov	r3, r8
 8009cb6:	463a      	mov	r2, r7
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b0      	blx	r6
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	dc06      	bgt.n	8009cce <__sflush_r+0xfe>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc6:	81a3      	strh	r3, [r4, #12]
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e78e      	b.n	8009bec <__sflush_r+0x1c>
 8009cce:	4407      	add	r7, r0
 8009cd0:	eba8 0800 	sub.w	r8, r8, r0
 8009cd4:	e7e9      	b.n	8009caa <__sflush_r+0xda>
 8009cd6:	bf00      	nop
 8009cd8:	20400001 	.word	0x20400001

08009cdc <_fflush_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	690b      	ldr	r3, [r1, #16]
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	b913      	cbnz	r3, 8009cec <_fflush_r+0x10>
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	4628      	mov	r0, r5
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	b118      	cbz	r0, 8009cf6 <_fflush_r+0x1a>
 8009cee:	6983      	ldr	r3, [r0, #24]
 8009cf0:	b90b      	cbnz	r3, 8009cf6 <_fflush_r+0x1a>
 8009cf2:	f000 f887 	bl	8009e04 <__sinit>
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <_fflush_r+0x6c>)
 8009cf8:	429c      	cmp	r4, r3
 8009cfa:	d11b      	bne.n	8009d34 <_fflush_r+0x58>
 8009cfc:	686c      	ldr	r4, [r5, #4]
 8009cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0ef      	beq.n	8009ce6 <_fflush_r+0xa>
 8009d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d08:	07d0      	lsls	r0, r2, #31
 8009d0a:	d404      	bmi.n	8009d16 <_fflush_r+0x3a>
 8009d0c:	0599      	lsls	r1, r3, #22
 8009d0e:	d402      	bmi.n	8009d16 <_fflush_r+0x3a>
 8009d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d12:	f000 f915 	bl	8009f40 <__retarget_lock_acquire_recursive>
 8009d16:	4628      	mov	r0, r5
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f7ff ff59 	bl	8009bd0 <__sflush_r>
 8009d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d20:	07da      	lsls	r2, r3, #31
 8009d22:	4605      	mov	r5, r0
 8009d24:	d4e0      	bmi.n	8009ce8 <_fflush_r+0xc>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	059b      	lsls	r3, r3, #22
 8009d2a:	d4dd      	bmi.n	8009ce8 <_fflush_r+0xc>
 8009d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d2e:	f000 f908 	bl	8009f42 <__retarget_lock_release_recursive>
 8009d32:	e7d9      	b.n	8009ce8 <_fflush_r+0xc>
 8009d34:	4b05      	ldr	r3, [pc, #20]	; (8009d4c <_fflush_r+0x70>)
 8009d36:	429c      	cmp	r4, r3
 8009d38:	d101      	bne.n	8009d3e <_fflush_r+0x62>
 8009d3a:	68ac      	ldr	r4, [r5, #8]
 8009d3c:	e7df      	b.n	8009cfe <_fflush_r+0x22>
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <_fflush_r+0x74>)
 8009d40:	429c      	cmp	r4, r3
 8009d42:	bf08      	it	eq
 8009d44:	68ec      	ldreq	r4, [r5, #12]
 8009d46:	e7da      	b.n	8009cfe <_fflush_r+0x22>
 8009d48:	0800a654 	.word	0x0800a654
 8009d4c:	0800a674 	.word	0x0800a674
 8009d50:	0800a634 	.word	0x0800a634

08009d54 <std>:
 8009d54:	2300      	movs	r3, #0
 8009d56:	b510      	push	{r4, lr}
 8009d58:	4604      	mov	r4, r0
 8009d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d62:	6083      	str	r3, [r0, #8]
 8009d64:	8181      	strh	r1, [r0, #12]
 8009d66:	6643      	str	r3, [r0, #100]	; 0x64
 8009d68:	81c2      	strh	r2, [r0, #14]
 8009d6a:	6183      	str	r3, [r0, #24]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	2208      	movs	r2, #8
 8009d70:	305c      	adds	r0, #92	; 0x5c
 8009d72:	f7fd fba7 	bl	80074c4 <memset>
 8009d76:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <std+0x38>)
 8009d78:	6263      	str	r3, [r4, #36]	; 0x24
 8009d7a:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <std+0x3c>)
 8009d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <std+0x40>)
 8009d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <std+0x44>)
 8009d84:	6224      	str	r4, [r4, #32]
 8009d86:	6323      	str	r3, [r4, #48]	; 0x30
 8009d88:	bd10      	pop	{r4, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0800a0a5 	.word	0x0800a0a5
 8009d90:	0800a0c7 	.word	0x0800a0c7
 8009d94:	0800a0ff 	.word	0x0800a0ff
 8009d98:	0800a123 	.word	0x0800a123

08009d9c <_cleanup_r>:
 8009d9c:	4901      	ldr	r1, [pc, #4]	; (8009da4 <_cleanup_r+0x8>)
 8009d9e:	f000 b8af 	b.w	8009f00 <_fwalk_reent>
 8009da2:	bf00      	nop
 8009da4:	08009cdd 	.word	0x08009cdd

08009da8 <__sfmoreglue>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	1e4a      	subs	r2, r1, #1
 8009dac:	2568      	movs	r5, #104	; 0x68
 8009dae:	4355      	muls	r5, r2
 8009db0:	460e      	mov	r6, r1
 8009db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009db6:	f7ff fa87 	bl	80092c8 <_malloc_r>
 8009dba:	4604      	mov	r4, r0
 8009dbc:	b140      	cbz	r0, 8009dd0 <__sfmoreglue+0x28>
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8009dc4:	300c      	adds	r0, #12
 8009dc6:	60a0      	str	r0, [r4, #8]
 8009dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dcc:	f7fd fb7a 	bl	80074c4 <memset>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}

08009dd4 <__sfp_lock_acquire>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	; (8009ddc <__sfp_lock_acquire+0x8>)
 8009dd6:	f000 b8b3 	b.w	8009f40 <__retarget_lock_acquire_recursive>
 8009dda:	bf00      	nop
 8009ddc:	20000680 	.word	0x20000680

08009de0 <__sfp_lock_release>:
 8009de0:	4801      	ldr	r0, [pc, #4]	; (8009de8 <__sfp_lock_release+0x8>)
 8009de2:	f000 b8ae 	b.w	8009f42 <__retarget_lock_release_recursive>
 8009de6:	bf00      	nop
 8009de8:	20000680 	.word	0x20000680

08009dec <__sinit_lock_acquire>:
 8009dec:	4801      	ldr	r0, [pc, #4]	; (8009df4 <__sinit_lock_acquire+0x8>)
 8009dee:	f000 b8a7 	b.w	8009f40 <__retarget_lock_acquire_recursive>
 8009df2:	bf00      	nop
 8009df4:	2000067b 	.word	0x2000067b

08009df8 <__sinit_lock_release>:
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <__sinit_lock_release+0x8>)
 8009dfa:	f000 b8a2 	b.w	8009f42 <__retarget_lock_release_recursive>
 8009dfe:	bf00      	nop
 8009e00:	2000067b 	.word	0x2000067b

08009e04 <__sinit>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	4604      	mov	r4, r0
 8009e08:	f7ff fff0 	bl	8009dec <__sinit_lock_acquire>
 8009e0c:	69a3      	ldr	r3, [r4, #24]
 8009e0e:	b11b      	cbz	r3, 8009e18 <__sinit+0x14>
 8009e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e14:	f7ff bff0 	b.w	8009df8 <__sinit_lock_release>
 8009e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <__sinit+0x68>)
 8009e20:	4a13      	ldr	r2, [pc, #76]	; (8009e70 <__sinit+0x6c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	bf04      	itt	eq
 8009e2a:	2301      	moveq	r3, #1
 8009e2c:	61a3      	streq	r3, [r4, #24]
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 f820 	bl	8009e74 <__sfp>
 8009e34:	6060      	str	r0, [r4, #4]
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 f81c 	bl	8009e74 <__sfp>
 8009e3c:	60a0      	str	r0, [r4, #8]
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f000 f818 	bl	8009e74 <__sfp>
 8009e44:	2200      	movs	r2, #0
 8009e46:	60e0      	str	r0, [r4, #12]
 8009e48:	2104      	movs	r1, #4
 8009e4a:	6860      	ldr	r0, [r4, #4]
 8009e4c:	f7ff ff82 	bl	8009d54 <std>
 8009e50:	68a0      	ldr	r0, [r4, #8]
 8009e52:	2201      	movs	r2, #1
 8009e54:	2109      	movs	r1, #9
 8009e56:	f7ff ff7d 	bl	8009d54 <std>
 8009e5a:	68e0      	ldr	r0, [r4, #12]
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	2112      	movs	r1, #18
 8009e60:	f7ff ff78 	bl	8009d54 <std>
 8009e64:	2301      	movs	r3, #1
 8009e66:	61a3      	str	r3, [r4, #24]
 8009e68:	e7d2      	b.n	8009e10 <__sinit+0xc>
 8009e6a:	bf00      	nop
 8009e6c:	0800a2b0 	.word	0x0800a2b0
 8009e70:	08009d9d 	.word	0x08009d9d

08009e74 <__sfp>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	4607      	mov	r7, r0
 8009e78:	f7ff ffac 	bl	8009dd4 <__sfp_lock_acquire>
 8009e7c:	4b1e      	ldr	r3, [pc, #120]	; (8009ef8 <__sfp+0x84>)
 8009e7e:	681e      	ldr	r6, [r3, #0]
 8009e80:	69b3      	ldr	r3, [r6, #24]
 8009e82:	b913      	cbnz	r3, 8009e8a <__sfp+0x16>
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7ff ffbd 	bl	8009e04 <__sinit>
 8009e8a:	3648      	adds	r6, #72	; 0x48
 8009e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	d503      	bpl.n	8009e9c <__sfp+0x28>
 8009e94:	6833      	ldr	r3, [r6, #0]
 8009e96:	b30b      	cbz	r3, 8009edc <__sfp+0x68>
 8009e98:	6836      	ldr	r6, [r6, #0]
 8009e9a:	e7f7      	b.n	8009e8c <__sfp+0x18>
 8009e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ea0:	b9d5      	cbnz	r5, 8009ed8 <__sfp+0x64>
 8009ea2:	4b16      	ldr	r3, [pc, #88]	; (8009efc <__sfp+0x88>)
 8009ea4:	60e3      	str	r3, [r4, #12]
 8009ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8009eac:	f000 f847 	bl	8009f3e <__retarget_lock_init_recursive>
 8009eb0:	f7ff ff96 	bl	8009de0 <__sfp_lock_release>
 8009eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ebc:	6025      	str	r5, [r4, #0]
 8009ebe:	61a5      	str	r5, [r4, #24]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ec8:	f7fd fafc 	bl	80074c4 <memset>
 8009ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed8:	3468      	adds	r4, #104	; 0x68
 8009eda:	e7d9      	b.n	8009e90 <__sfp+0x1c>
 8009edc:	2104      	movs	r1, #4
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f7ff ff62 	bl	8009da8 <__sfmoreglue>
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	6030      	str	r0, [r6, #0]
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d1d5      	bne.n	8009e98 <__sfp+0x24>
 8009eec:	f7ff ff78 	bl	8009de0 <__sfp_lock_release>
 8009ef0:	230c      	movs	r3, #12
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	e7ee      	b.n	8009ed4 <__sfp+0x60>
 8009ef6:	bf00      	nop
 8009ef8:	0800a2b0 	.word	0x0800a2b0
 8009efc:	ffff0001 	.word	0xffff0001

08009f00 <_fwalk_reent>:
 8009f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f04:	4606      	mov	r6, r0
 8009f06:	4688      	mov	r8, r1
 8009f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f0c:	2700      	movs	r7, #0
 8009f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f12:	f1b9 0901 	subs.w	r9, r9, #1
 8009f16:	d505      	bpl.n	8009f24 <_fwalk_reent+0x24>
 8009f18:	6824      	ldr	r4, [r4, #0]
 8009f1a:	2c00      	cmp	r4, #0
 8009f1c:	d1f7      	bne.n	8009f0e <_fwalk_reent+0xe>
 8009f1e:	4638      	mov	r0, r7
 8009f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f24:	89ab      	ldrh	r3, [r5, #12]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d907      	bls.n	8009f3a <_fwalk_reent+0x3a>
 8009f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	d003      	beq.n	8009f3a <_fwalk_reent+0x3a>
 8009f32:	4629      	mov	r1, r5
 8009f34:	4630      	mov	r0, r6
 8009f36:	47c0      	blx	r8
 8009f38:	4307      	orrs	r7, r0
 8009f3a:	3568      	adds	r5, #104	; 0x68
 8009f3c:	e7e9      	b.n	8009f12 <_fwalk_reent+0x12>

08009f3e <__retarget_lock_init_recursive>:
 8009f3e:	4770      	bx	lr

08009f40 <__retarget_lock_acquire_recursive>:
 8009f40:	4770      	bx	lr

08009f42 <__retarget_lock_release_recursive>:
 8009f42:	4770      	bx	lr

08009f44 <__swhatbuf_r>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	460e      	mov	r6, r1
 8009f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4c:	2900      	cmp	r1, #0
 8009f4e:	b096      	sub	sp, #88	; 0x58
 8009f50:	4614      	mov	r4, r2
 8009f52:	461d      	mov	r5, r3
 8009f54:	da07      	bge.n	8009f66 <__swhatbuf_r+0x22>
 8009f56:	2300      	movs	r3, #0
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	89b3      	ldrh	r3, [r6, #12]
 8009f5c:	061a      	lsls	r2, r3, #24
 8009f5e:	d410      	bmi.n	8009f82 <__swhatbuf_r+0x3e>
 8009f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f64:	e00e      	b.n	8009f84 <__swhatbuf_r+0x40>
 8009f66:	466a      	mov	r2, sp
 8009f68:	f000 f902 	bl	800a170 <_fstat_r>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	dbf2      	blt.n	8009f56 <__swhatbuf_r+0x12>
 8009f70:	9a01      	ldr	r2, [sp, #4]
 8009f72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f7a:	425a      	negs	r2, r3
 8009f7c:	415a      	adcs	r2, r3
 8009f7e:	602a      	str	r2, [r5, #0]
 8009f80:	e7ee      	b.n	8009f60 <__swhatbuf_r+0x1c>
 8009f82:	2340      	movs	r3, #64	; 0x40
 8009f84:	2000      	movs	r0, #0
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	b016      	add	sp, #88	; 0x58
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}

08009f8c <__smakebuf_r>:
 8009f8c:	898b      	ldrh	r3, [r1, #12]
 8009f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f90:	079d      	lsls	r5, r3, #30
 8009f92:	4606      	mov	r6, r0
 8009f94:	460c      	mov	r4, r1
 8009f96:	d507      	bpl.n	8009fa8 <__smakebuf_r+0x1c>
 8009f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	6163      	str	r3, [r4, #20]
 8009fa4:	b002      	add	sp, #8
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	ab01      	add	r3, sp, #4
 8009faa:	466a      	mov	r2, sp
 8009fac:	f7ff ffca 	bl	8009f44 <__swhatbuf_r>
 8009fb0:	9900      	ldr	r1, [sp, #0]
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff f987 	bl	80092c8 <_malloc_r>
 8009fba:	b948      	cbnz	r0, 8009fd0 <__smakebuf_r+0x44>
 8009fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc0:	059a      	lsls	r2, r3, #22
 8009fc2:	d4ef      	bmi.n	8009fa4 <__smakebuf_r+0x18>
 8009fc4:	f023 0303 	bic.w	r3, r3, #3
 8009fc8:	f043 0302 	orr.w	r3, r3, #2
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	e7e3      	b.n	8009f98 <__smakebuf_r+0xc>
 8009fd0:	4b0d      	ldr	r3, [pc, #52]	; (800a008 <__smakebuf_r+0x7c>)
 8009fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	9b00      	ldr	r3, [sp, #0]
 8009fe0:	6163      	str	r3, [r4, #20]
 8009fe2:	9b01      	ldr	r3, [sp, #4]
 8009fe4:	6120      	str	r0, [r4, #16]
 8009fe6:	b15b      	cbz	r3, 800a000 <__smakebuf_r+0x74>
 8009fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fec:	4630      	mov	r0, r6
 8009fee:	f000 f8d1 	bl	800a194 <_isatty_r>
 8009ff2:	b128      	cbz	r0, 800a000 <__smakebuf_r+0x74>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f023 0303 	bic.w	r3, r3, #3
 8009ffa:	f043 0301 	orr.w	r3, r3, #1
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	89a0      	ldrh	r0, [r4, #12]
 800a002:	4305      	orrs	r5, r0
 800a004:	81a5      	strh	r5, [r4, #12]
 800a006:	e7cd      	b.n	8009fa4 <__smakebuf_r+0x18>
 800a008:	08009d9d 	.word	0x08009d9d

0800a00c <_malloc_usable_size_r>:
 800a00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a010:	1f18      	subs	r0, r3, #4
 800a012:	2b00      	cmp	r3, #0
 800a014:	bfbc      	itt	lt
 800a016:	580b      	ldrlt	r3, [r1, r0]
 800a018:	18c0      	addlt	r0, r0, r3
 800a01a:	4770      	bx	lr

0800a01c <_raise_r>:
 800a01c:	291f      	cmp	r1, #31
 800a01e:	b538      	push	{r3, r4, r5, lr}
 800a020:	4604      	mov	r4, r0
 800a022:	460d      	mov	r5, r1
 800a024:	d904      	bls.n	800a030 <_raise_r+0x14>
 800a026:	2316      	movs	r3, #22
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a032:	b112      	cbz	r2, 800a03a <_raise_r+0x1e>
 800a034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a038:	b94b      	cbnz	r3, 800a04e <_raise_r+0x32>
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 f830 	bl	800a0a0 <_getpid_r>
 800a040:	462a      	mov	r2, r5
 800a042:	4601      	mov	r1, r0
 800a044:	4620      	mov	r0, r4
 800a046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a04a:	f000 b817 	b.w	800a07c <_kill_r>
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d00a      	beq.n	800a068 <_raise_r+0x4c>
 800a052:	1c59      	adds	r1, r3, #1
 800a054:	d103      	bne.n	800a05e <_raise_r+0x42>
 800a056:	2316      	movs	r3, #22
 800a058:	6003      	str	r3, [r0, #0]
 800a05a:	2001      	movs	r0, #1
 800a05c:	e7e7      	b.n	800a02e <_raise_r+0x12>
 800a05e:	2400      	movs	r4, #0
 800a060:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a064:	4628      	mov	r0, r5
 800a066:	4798      	blx	r3
 800a068:	2000      	movs	r0, #0
 800a06a:	e7e0      	b.n	800a02e <_raise_r+0x12>

0800a06c <raise>:
 800a06c:	4b02      	ldr	r3, [pc, #8]	; (800a078 <raise+0xc>)
 800a06e:	4601      	mov	r1, r0
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	f7ff bfd3 	b.w	800a01c <_raise_r>
 800a076:	bf00      	nop
 800a078:	20000054 	.word	0x20000054

0800a07c <_kill_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d07      	ldr	r5, [pc, #28]	; (800a09c <_kill_r+0x20>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	4611      	mov	r1, r2
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	f7f8 f88d 	bl	80021a8 <_kill>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	d102      	bne.n	800a098 <_kill_r+0x1c>
 800a092:	682b      	ldr	r3, [r5, #0]
 800a094:	b103      	cbz	r3, 800a098 <_kill_r+0x1c>
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	bd38      	pop	{r3, r4, r5, pc}
 800a09a:	bf00      	nop
 800a09c:	20000674 	.word	0x20000674

0800a0a0 <_getpid_r>:
 800a0a0:	f7f8 b87a 	b.w	8002198 <_getpid>

0800a0a4 <__sread>:
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ac:	f000 f894 	bl	800a1d8 <_read_r>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	bfab      	itete	ge
 800a0b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0b8:	181b      	addge	r3, r3, r0
 800a0ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0be:	bfac      	ite	ge
 800a0c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0c2:	81a3      	strhlt	r3, [r4, #12]
 800a0c4:	bd10      	pop	{r4, pc}

0800a0c6 <__swrite>:
 800a0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ca:	461f      	mov	r7, r3
 800a0cc:	898b      	ldrh	r3, [r1, #12]
 800a0ce:	05db      	lsls	r3, r3, #23
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	4616      	mov	r6, r2
 800a0d6:	d505      	bpl.n	800a0e4 <__swrite+0x1e>
 800a0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0dc:	2302      	movs	r3, #2
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f000 f868 	bl	800a1b4 <_lseek_r>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0ee:	81a3      	strh	r3, [r4, #12]
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	463b      	mov	r3, r7
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fa:	f000 b817 	b.w	800a12c <_write_r>

0800a0fe <__sseek>:
 800a0fe:	b510      	push	{r4, lr}
 800a100:	460c      	mov	r4, r1
 800a102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a106:	f000 f855 	bl	800a1b4 <_lseek_r>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	bf15      	itete	ne
 800a110:	6560      	strne	r0, [r4, #84]	; 0x54
 800a112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a11a:	81a3      	strheq	r3, [r4, #12]
 800a11c:	bf18      	it	ne
 800a11e:	81a3      	strhne	r3, [r4, #12]
 800a120:	bd10      	pop	{r4, pc}

0800a122 <__sclose>:
 800a122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a126:	f000 b813 	b.w	800a150 <_close_r>
	...

0800a12c <_write_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4d07      	ldr	r5, [pc, #28]	; (800a14c <_write_r+0x20>)
 800a130:	4604      	mov	r4, r0
 800a132:	4608      	mov	r0, r1
 800a134:	4611      	mov	r1, r2
 800a136:	2200      	movs	r2, #0
 800a138:	602a      	str	r2, [r5, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	f7f8 f86b 	bl	8002216 <_write>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_write_r+0x1e>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_write_r+0x1e>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20000674 	.word	0x20000674

0800a150 <_close_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4d06      	ldr	r5, [pc, #24]	; (800a16c <_close_r+0x1c>)
 800a154:	2300      	movs	r3, #0
 800a156:	4604      	mov	r4, r0
 800a158:	4608      	mov	r0, r1
 800a15a:	602b      	str	r3, [r5, #0]
 800a15c:	f7f8 f877 	bl	800224e <_close>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_close_r+0x1a>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	b103      	cbz	r3, 800a16a <_close_r+0x1a>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20000674 	.word	0x20000674

0800a170 <_fstat_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d07      	ldr	r5, [pc, #28]	; (800a190 <_fstat_r+0x20>)
 800a174:	2300      	movs	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	602b      	str	r3, [r5, #0]
 800a17e:	f7f8 f872 	bl	8002266 <_fstat>
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	d102      	bne.n	800a18c <_fstat_r+0x1c>
 800a186:	682b      	ldr	r3, [r5, #0]
 800a188:	b103      	cbz	r3, 800a18c <_fstat_r+0x1c>
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	bd38      	pop	{r3, r4, r5, pc}
 800a18e:	bf00      	nop
 800a190:	20000674 	.word	0x20000674

0800a194 <_isatty_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d06      	ldr	r5, [pc, #24]	; (800a1b0 <_isatty_r+0x1c>)
 800a198:	2300      	movs	r3, #0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4608      	mov	r0, r1
 800a19e:	602b      	str	r3, [r5, #0]
 800a1a0:	f7f8 f871 	bl	8002286 <_isatty>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d102      	bne.n	800a1ae <_isatty_r+0x1a>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	b103      	cbz	r3, 800a1ae <_isatty_r+0x1a>
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	bd38      	pop	{r3, r4, r5, pc}
 800a1b0:	20000674 	.word	0x20000674

0800a1b4 <_lseek_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	; (800a1d4 <_lseek_r+0x20>)
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	4608      	mov	r0, r1
 800a1bc:	4611      	mov	r1, r2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	602a      	str	r2, [r5, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f7f8 f86a 	bl	800229c <_lseek>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_lseek_r+0x1e>
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_lseek_r+0x1e>
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	20000674 	.word	0x20000674

0800a1d8 <_read_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d07      	ldr	r5, [pc, #28]	; (800a1f8 <_read_r+0x20>)
 800a1dc:	4604      	mov	r4, r0
 800a1de:	4608      	mov	r0, r1
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	602a      	str	r2, [r5, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f7f7 fff8 	bl	80021dc <_read>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d102      	bne.n	800a1f6 <_read_r+0x1e>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	b103      	cbz	r3, 800a1f6 <_read_r+0x1e>
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	20000674 	.word	0x20000674

0800a1fc <_init>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	bf00      	nop
 800a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a202:	bc08      	pop	{r3}
 800a204:	469e      	mov	lr, r3
 800a206:	4770      	bx	lr

0800a208 <_fini>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr
