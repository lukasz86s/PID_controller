
PID_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009764  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009908  08009908  00019908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d54  08009d54  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d5c  08009d5c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001ec  08009f50  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08009f50  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172c6  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319d  00000000  00000000  000374e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001088e  00000000  00000000  0003cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000067a6  00000000  00000000  0004d36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00053b14  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005ff4  00000000  00000000  00053b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098ec 	.word	0x080098ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080098ec 	.word	0x080098ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <DWT_Delay_Init>:
 *  Created on: 6 cze 2021
 *      Author: fet
 */
#include "dwt_Delay.h"

uint32_t DWT_Delay_Init(void){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	// disable TRC
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <DWT_Delay_Init+0x58>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <DWT_Delay_Init+0x58>)
 8000f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	60d3      	str	r3, [r2, #12]
	//enable TRC
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <DWT_Delay_Init+0x58>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <DWT_Delay_Init+0x58>)
 8000f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f6a:	60d3      	str	r3, [r2, #12]

	//Disable clock cycle counter
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <DWT_Delay_Init+0x5c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <DWT_Delay_Init+0x5c>)
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]
	// Enable clock cycle counter
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <DWT_Delay_Init+0x5c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <DWT_Delay_Init+0x5c>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6013      	str	r3, [r2, #0]

	// reset the clock cycle counter val
	DWT->CYCCNT = 0;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <DWT_Delay_Init+0x5c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]

	// wait 3 cycles
	__ASM volatile ("NOP");
 8000f8a:	bf00      	nop
	__ASM volatile ("NOP");
 8000f8c:	bf00      	nop
	__ASM volatile ("NOP");
 8000f8e:	bf00      	nop

	// check if clock cycle counter has started
	if(DWT->CYCCNT){
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <DWT_Delay_Init+0x5c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <DWT_Delay_Init+0x4c>
		return 0; // clock started
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e000      	b.n	8000f9e <DWT_Delay_Init+0x4e>
	}
	else
	{
		return 1; // clock not started
 8000f9c:	2301      	movs	r3, #1
	}
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000edf0 	.word	0xe000edf0
 8000fac:	e0001000 	.word	0xe0001000

08000fb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <MX_GPIO_Init+0xd4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <MX_GPIO_Init+0xd4>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_GPIO_Init+0xd4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_GPIO_Init+0xd4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a26      	ldr	r2, [pc, #152]	; (8001084 <MX_GPIO_Init+0xd4>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <MX_GPIO_Init+0xd4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_GPIO_Init+0xd4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <MX_GPIO_Init+0xd4>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_GPIO_Init+0xd4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_GPIO_Init+0xd4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a18      	ldr	r2, [pc, #96]	; (8001084 <MX_GPIO_Init+0xd4>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_GPIO_Init+0xd4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|SERVO_POWER_Pin|vl53l0x_POWER_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f240 6101 	movw	r1, #1537	; 0x601
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <MX_GPIO_Init+0xd8>)
 800103e:	f002 f959 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <MX_GPIO_Init+0xd8>)
 800105a:	f001 ffc7 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SERVO_POWER_Pin|vl53l0x_POWER_Pin;
 800105e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_GPIO_Init+0xd8>)
 8001078:	f001 ffb8 	bl	8002fec <HAL_GPIO_Init>

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400

0800108c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f002 f92d 	bl	8003328 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 fa28 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000220 	.word	0x20000220
 80010e0:	40005400 	.word	0x40005400
 80010e4:	000186a0 	.word	0x000186a0

080010e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001126:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <HAL_I2C_MspInit+0x8c>)
 8001144:	f001 ff52 	bl	8002fec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <DWT_Delay_us_>:

#include "stm32f4xx_hal.h"

uint32_t DWT_Delay_Init(void);

__STATIC_INLINE void DWT_Delay_us_(volatile uint32_t u32_microseconds){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	uint32_t initial_ticks = DWT->CYCCNT;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <DWT_Delay_us_+0x44>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (HAL_RCC_GetHCLKFreq()/ 1000000);
 8001186:	f003 fe75 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 800118a:	4603      	mov	r3, r0
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <DWT_Delay_us_+0x48>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	60bb      	str	r3, [r7, #8]
	u32_microseconds *= ticks;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	607b      	str	r3, [r7, #4]
	while((DWT->CYCCNT - initial_ticks) < u32_microseconds);
 80011a0:	bf00      	nop
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <DWT_Delay_us_+0x44>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad2      	subs	r2, r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3f8      	bcc.n	80011a2 <DWT_Delay_us_+0x2a>

}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e0001000 	.word	0xe0001000
 80011c0:	431bde83 	.word	0x431bde83
 80011c4:	00000000 	.word	0x00000000

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0a0      	sub	sp, #128	; 0x80
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ce:	f001 fd89 	bl	8002ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d2:	f000 f8d9 	bl	8001388 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  DWT_Delay_Init();
 80011d6:	f7ff febb 	bl	8000f50 <DWT_Delay_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f7ff fee9 	bl	8000fb0 <MX_GPIO_Init>
  MX_RTC_Init();
 80011de:	f000 fae3 	bl	80017a8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80011e2:	f000 fded 	bl	8001dc0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80011e6:	f7ff ff51 	bl	800108c <MX_I2C1_Init>
  MX_TIM1_Init();
 80011ea:	f000 fc51 	bl	8001a90 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011ee:	f000 fcf1 	bl	8001bd4 <MX_TIM2_Init>
  MX_TIM10_Init();
 80011f2:	f000 fd3b 	bl	8001c6c <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011f6:	f000 f949 	bl	800148c <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  deviceList_sendToTerminal();
 80011fa:	f000 f95d 	bl	80014b8 <deviceList_sendToTerminal>

  htim1.Instance->CCR1 = 150;
 80011fe:	4b56      	ldr	r3, [pc, #344]	; (8001358 <main+0x190>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2296      	movs	r2, #150	; 0x96
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001206:	2100      	movs	r1, #0
 8001208:	4853      	ldr	r0, [pc, #332]	; (8001358 <main+0x190>)
 800120a:	f004 f961 	bl	80054d0 <HAL_TIM_PWM_Start>
  __HAL_TIM_CLEAR_FLAG(&htim10, TIM_FLAG_UPDATE);
 800120e:	4b53      	ldr	r3, [pc, #332]	; (800135c <main+0x194>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f06f 0201 	mvn.w	r2, #1
 8001216:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim10);
 8001218:	4850      	ldr	r0, [pc, #320]	; (800135c <main+0x194>)
 800121a:	f004 f891 	bl	8005340 <HAL_TIM_Base_Start_IT>
  //todo: nie zgłasza przerwań od przepelnienia channel2

  //HAL_TIM_Base_Start(&htim2);
 // uint32_t counter_val = 0;
  float measured_time_s = 0.0;
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint8_t div_tab[100] = {0};
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2260      	movs	r2, #96	; 0x60
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fcbf 	bl	8006bb4 <memset>
  HAL_UART_Transmit(&huart1, (uint8_t *)"startuje init\n\r", 15, 50);
 8001236:	2332      	movs	r3, #50	; 0x32
 8001238:	220f      	movs	r2, #15
 800123a:	4949      	ldr	r1, [pc, #292]	; (8001360 <main+0x198>)
 800123c:	4849      	ldr	r0, [pc, #292]	; (8001364 <main+0x19c>)
 800123e:	f005 f957 	bl	80064f0 <HAL_UART_Transmit>
  // power on
  HAL_GPIO_WritePin(vl53l0x_POWER_GPIO_Port, vl53l0x_POWER_Pin, RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001248:	4847      	ldr	r0, [pc, #284]	; (8001368 <main+0x1a0>)
 800124a:	f002 f853 	bl	80032f4 <HAL_GPIO_WritePin>
  // wait 30 ms
  DWT_Delay_us_(30000);
 800124e:	f247 5030 	movw	r0, #30000	; 0x7530
 8001252:	f7ff ff91 	bl	8001178 <DWT_Delay_us_>
  // init vl53l0x
  uint8_t init = vl53l0x_Init(0);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 fef2 	bl	8002040 <vl53l0x_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  sprintf((char *)div_tab, "init: %d\n\r", init);
 8001262:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4940      	ldr	r1, [pc, #256]	; (800136c <main+0x1a4>)
 800126a:	4618      	mov	r0, r3
 800126c:	f006 f914 	bl	8007498 <siprintf>
  HAL_UART_Transmit(&huart1, div_tab, 10, 50);
 8001270:	1d39      	adds	r1, r7, #4
 8001272:	2332      	movs	r3, #50	; 0x32
 8001274:	220a      	movs	r2, #10
 8001276:	483b      	ldr	r0, [pc, #236]	; (8001364 <main+0x19c>)
 8001278:	f005 f93a 	bl	80064f0 <HAL_UART_Transmit>
  uint16_t measure_score = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  bool dir = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  float PID = 0.0;
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	673b      	str	r3, [r7, #112]	; 0x70
  //float P, I, D;
  // err value
  float err;
  // target to get in mm
  float target = 120.0;
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <main+0x1a8>)
 8001290:	66fb      	str	r3, [r7, #108]	; 0x6c
  // servo power on
  HAL_GPIO_WritePin(SERVO_POWER_GPIO_Port, SERVO_POWER_Pin, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	4833      	ldr	r0, [pc, #204]	; (8001368 <main+0x1a0>)
 800129a:	f002 f82b 	bl	80032f4 <HAL_GPIO_WritePin>
  // start first measure time
  timeIt_Start_us();
 800129e:	f000 f9b5 	bl	800160c <timeIt_Start_us>
  while (1)
  {

	  measure_score = vl53l0x_ReadRangeSingleMillimeters(0);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f001 fca6 	bl	8002bf4 <vl53l0x_ReadRangeSingleMillimeters>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	  //measure_score += vl53l0x_ReadRangeSingleMillimeters(0);
	  //mean

	  //measure_score /= 2;

	  err = target - measure_score;
 80012ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ba:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80012be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	 // else dir = 1;

	  //if( temp > 100 && dir == 1)htim1.Instance->CCR1 -= 1;
	  //else dir = 0;

	  measured_time_s = (timeIt_GetCounter_us()/1000000.0);
 80012c6:	f000 f9bb 	bl	8001640 <timeIt_GetCounter_us>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f921 	bl	8000514 <__aeabi_ui2d>
 80012d2:	a31f      	add	r3, pc, #124	; (adr r3, 8001350 <main+0x188>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fac0 	bl	800085c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fc68 	bl	8000bb8 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	67fb      	str	r3, [r7, #124]	; 0x7c
	  PID = get_PID(err, measured_time_s, 0.1, 0.2, 0.2);
 80012ec:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8001374 <main+0x1ac>
 80012f0:	eddf 1a20 	vldr	s3, [pc, #128]	; 8001374 <main+0x1ac>
 80012f4:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8001378 <main+0x1b0>
 80012f8:	edd7 0a1f 	vldr	s1, [r7, #124]	; 0x7c
 80012fc:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8001300:	f000 fa1c 	bl	800173c <get_PID>
 8001304:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	  htim1.Instance->CCR1 = 150+(PID/40);
 8001308:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800130c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800137c <main+0x1b4>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001380 <main+0x1b8>
 8001318:	ee77 7a87 	vadd.f32	s15, s15, s14
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <main+0x190>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001324:	ee17 2a90 	vmov	r2, s15
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
	  //DWT_Delay_us_(1000000);

	  timeIt_Start_us();
 800132a:	f000 f96f 	bl	800160c <timeIt_Start_us>
	 // D = derivative(err, measured_time_s, 0.1);

	 // sprintf((char *)div_tab, "P: %f\n\rI: %f\n\rD: %f\n\r", P, I, D);

	  //sprintf((char *)div_tab, "err: %f\n\r ", err);
	  sprintf((char *)div_tab, "err: %f\n\r ", PID);
 800132e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001330:	f7ff f912 	bl	8000558 <__aeabi_f2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	1d38      	adds	r0, r7, #4
 800133a:	4912      	ldr	r1, [pc, #72]	; (8001384 <main+0x1bc>)
 800133c:	f006 f8ac 	bl	8007498 <siprintf>

	  HAL_UART_Transmit(&huart1, div_tab, 60, 20);
 8001340:	1d39      	adds	r1, r7, #4
 8001342:	2314      	movs	r3, #20
 8001344:	223c      	movs	r2, #60	; 0x3c
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <main+0x19c>)
 8001348:	f005 f8d2 	bl	80064f0 <HAL_UART_Transmit>
	  measure_score = vl53l0x_ReadRangeSingleMillimeters(0);
 800134c:	e7a9      	b.n	80012a2 <main+0xda>
 800134e:	bf00      	nop
 8001350:	00000000 	.word	0x00000000
 8001354:	412e8480 	.word	0x412e8480
 8001358:	20000378 	.word	0x20000378
 800135c:	200002c4 	.word	0x200002c4
 8001360:	08009908 	.word	0x08009908
 8001364:	200004e0 	.word	0x200004e0
 8001368:	40020400 	.word	0x40020400
 800136c:	08009918 	.word	0x08009918
 8001370:	42f00000 	.word	0x42f00000
 8001374:	3e4ccccd 	.word	0x3e4ccccd
 8001378:	3dcccccd 	.word	0x3dcccccd
 800137c:	42200000 	.word	0x42200000
 8001380:	43160000 	.word	0x43160000
 8001384:	08009924 	.word	0x08009924

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09a      	sub	sp, #104	; 0x68
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f005 fc0c 	bl	8006bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <SystemClock_Config+0xfc>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <SystemClock_Config+0xfc>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <SystemClock_Config+0xfc>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <SystemClock_Config+0x100>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <SystemClock_Config+0x100>)
 80013e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <SystemClock_Config+0x100>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80013f6:	2305      	movs	r3, #5
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001400:	2301      	movs	r3, #1
 8001402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001404:	2302      	movs	r3, #2
 8001406:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001408:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 800140e:	230c      	movs	r3, #12
 8001410:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001412:	2360      	movs	r3, #96	; 0x60
 8001414:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800141a:	2304      	movs	r3, #4
 800141c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001422:	4618      	mov	r0, r3
 8001424:	f003 f912 	bl	800464c <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800142e:	f000 f87b 	bl	8001528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2302      	movs	r3, #2
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	2103      	movs	r1, #3
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fb74 	bl	8004b3c <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800145a:	f000 f865 	bl	8001528 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001466:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fd35 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001478:	f000 f856 	bl	8001528 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3768      	adds	r7, #104	; 0x68
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2019      	movs	r0, #25
 8001496:	f001 fd72 	bl	8002f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800149a:	2019      	movs	r0, #25
 800149c:	f001 fd8b 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	appendTimeCounter();
 80014ac:	f000 f842 	bl	8001534 <appendTimeCounter>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <deviceList_sendToTerminal>:
	uint8_t count = 0;
	while(div_tab[count++] != 0);
	HAL_UART_Transmit(&huart1, div_tab, count, 50);
}

void deviceList_sendToTerminal(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

	  for(int i = 0 ;i < 128; i++){
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e020      	b.n	8001506 <deviceList_sendToTerminal+0x4e>
		  uint8_t div_tab[10];
		  if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 5) == HAL_OK){
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	b299      	uxth	r1, r3
 80014cc:	2305      	movs	r3, #5
 80014ce:	2202      	movs	r2, #2
 80014d0:	4811      	ldr	r0, [pc, #68]	; (8001518 <deviceList_sendToTerminal+0x60>)
 80014d2:	f002 fbc9 	bl	8003c68 <HAL_I2C_IsDeviceReady>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d111      	bne.n	8001500 <deviceList_sendToTerminal+0x48>
			  sprintf((char *)div_tab, "dev: %d", i);
 80014dc:	463b      	mov	r3, r7
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	490e      	ldr	r1, [pc, #56]	; (800151c <deviceList_sendToTerminal+0x64>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 ffd8 	bl	8007498 <siprintf>
			  HAL_UART_Transmit(&huart1, div_tab, 10, 50);
 80014e8:	4639      	mov	r1, r7
 80014ea:	2332      	movs	r3, #50	; 0x32
 80014ec:	220a      	movs	r2, #10
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <deviceList_sendToTerminal+0x68>)
 80014f0:	f004 fffe 	bl	80064f0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)"\n\r", 3, 50);
 80014f4:	2332      	movs	r3, #50	; 0x32
 80014f6:	2203      	movs	r2, #3
 80014f8:	490a      	ldr	r1, [pc, #40]	; (8001524 <deviceList_sendToTerminal+0x6c>)
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <deviceList_sendToTerminal+0x68>)
 80014fc:	f004 fff8 	bl	80064f0 <HAL_UART_Transmit>
	  for(int i = 0 ;i < 128; i++){
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3301      	adds	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b7f      	cmp	r3, #127	; 0x7f
 800150a:	dddb      	ble.n	80014c4 <deviceList_sendToTerminal+0xc>

		  }

	  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000220 	.word	0x20000220
 800151c:	08009954 	.word	0x08009954
 8001520:	200004e0 	.word	0x200004e0
 8001524:	08009950 	.word	0x08009950

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <appendTimeCounter>:
static volatile uint32_t tim1;
static volatile TimeMesureStatus Status;



void appendTimeCounter(void){
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

	if(Status.t1) tim1++;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <appendTimeCounter+0x28>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <appendTimeCounter+0x1c>
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <appendTimeCounter+0x2c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <appendTimeCounter+0x2c>)
 800154e:	6013      	str	r3, [r2, #0]

		//HAL_GPIO_TogglePin(vl53l0x_POWER_GPIO_Port, vl53l0x_POWER_Pin);
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000020c 	.word	0x2000020c
 8001560:	20000208 	.word	0x20000208

08001564 <startMesure_ms>:
void startMesure_ms(uint8_t nr_tim){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	switch(nr_tim){
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <startMesure_ms+0x16>
 8001574:	2b02      	cmp	r3, #2
 8001576:	d009      	beq.n	800158c <startMesure_ms+0x28>
		break;
	case 2:
		Status.t2 = 1;
		break;
	}
}
 8001578:	e00e      	b.n	8001598 <startMesure_ms+0x34>
		tim1 = 0;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <startMesure_ms+0x40>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
		Status.t1 = 1;
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <startMesure_ms+0x44>)
 8001582:	7813      	ldrb	r3, [r2, #0]
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	7013      	strb	r3, [r2, #0]
		break;
 800158a:	e005      	b.n	8001598 <startMesure_ms+0x34>
		Status.t2 = 1;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <startMesure_ms+0x44>)
 800158e:	7813      	ldrb	r3, [r2, #0]
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	7013      	strb	r3, [r2, #0]
		break;
 8001596:	bf00      	nop
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000208 	.word	0x20000208
 80015a8:	2000020c 	.word	0x2000020c

080015ac <getMesure_ms>:
uint32_t getMesure_ms(uint8_t nr_tim){
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	switch(nr_tim){
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <getMesure_ms+0x16>
	case vl53l0x_tim:
		return tim1;
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <getMesure_ms+0x24>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	e000      	b.n	80015c4 <getMesure_ms+0x18>
	}
	return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20000208 	.word	0x20000208

080015d4 <stopMesure_ms>:
uint32_t stopMesure_ms(uint8_t nr_tim){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	switch(nr_tim){
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d107      	bne.n	80015f4 <stopMesure_ms+0x20>
	case vl53l0x_tim:
		{
		Status.t1 = 0;
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <stopMesure_ms+0x30>)
 80015e6:	7813      	ldrb	r3, [r2, #0]
 80015e8:	f36f 0300 	bfc	r3, #0, #1
 80015ec:	7013      	strb	r3, [r2, #0]
		return tim1;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <stopMesure_ms+0x34>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e000      	b.n	80015f6 <stopMesure_ms+0x22>
		}
	}
	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2000020c 	.word	0x2000020c
 8001608:	20000208 	.word	0x20000208

0800160c <timeIt_Start_us>:

void timeIt_Start_us(void){
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	// reset counter value
	htim2.Instance->CNT = 0;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <timeIt_Start_us+0x30>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
	//set state
	htim2.State = HAL_TIM_STATE_BUSY;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <timeIt_Start_us+0x30>)
 800161a:	2202      	movs	r2, #2
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	//start count
	__HAL_TIM_ENABLE(&htim2);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <timeIt_Start_us+0x30>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <timeIt_Start_us+0x30>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	2000042c 	.word	0x2000042c

08001640 <timeIt_GetCounter_us>:

uint32_t timeIt_GetCounter_us(void){
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	// stop count
	__HAL_TIM_DISABLE(&htim2);
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <timeIt_GetCounter_us+0x4c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	f241 1311 	movw	r3, #4369	; 0x1111
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10f      	bne.n	8001674 <timeIt_GetCounter_us+0x34>
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <timeIt_GetCounter_us+0x4c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	f240 4344 	movw	r3, #1092	; 0x444
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <timeIt_GetCounter_us+0x34>
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <timeIt_GetCounter_us+0x4c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <timeIt_GetCounter_us+0x4c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
	// set status
	htim2.State = HAL_TIM_STATE_READY;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <timeIt_GetCounter_us+0x4c>)
 8001676:	2201      	movs	r2, #1
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	//return counter value
	return htim2.Instance->CNT;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <timeIt_GetCounter_us+0x4c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	2000042c 	.word	0x2000042c

08001690 <proportional>:
 *      Author: fet
 */

#include "my_PID.h"

float proportional(float err, float K){
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	ed87 0a01 	vstr	s0, [r7, #4]
 800169a:	edc7 0a00 	vstr	s1, [r7]
	return (K*err);
 800169e:	ed97 7a00 	vldr	s14, [r7]
 80016a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <integral>:

float integral(float err, float time_s, float K){
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	ed87 0a03 	vstr	s0, [r7, #12]
 80016c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016c6:	ed87 1a01 	vstr	s2, [r7, #4]
	static float sum;
	sum += (err * time_s);
 80016ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <integral+0x4c>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <integral+0x4c>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	return K*sum;
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <integral+0x4c>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15

}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000210 	.word	0x20000210

08001708 <derivative>:
float derivative(float err, float time_s, float K){
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001712:	edc7 0a02 	vstr	s1, [r7, #8]
 8001716:	ed87 1a01 	vstr	s2, [r7, #4]
	return K*(err/time_s);
 800171a:	edd7 6a03 	vldr	s13, [r7, #12]
 800171e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001726:	edd7 7a01 	vldr	s15, [r7, #4]
 800172a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <get_PID>:

float get_PID(float err, float time_s, float Kp , float Ki, float Kd){
 800173c:	b580      	push	{r7, lr}
 800173e:	ed2d 8b02 	vpush	{d8}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a05 	vstr	s0, [r7, #20]
 800174a:	edc7 0a04 	vstr	s1, [r7, #16]
 800174e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001752:	edc7 1a02 	vstr	s3, [r7, #8]
 8001756:	ed87 2a01 	vstr	s4, [r7, #4]
	return (proportional(err, Kp) + integral(err, time_s, Ki) + derivative(err, time_s, Kd));
 800175a:	edd7 0a03 	vldr	s1, [r7, #12]
 800175e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001762:	f7ff ff95 	bl	8001690 <proportional>
 8001766:	eeb0 8a40 	vmov.f32	s16, s0
 800176a:	ed97 1a02 	vldr	s2, [r7, #8]
 800176e:	edd7 0a04 	vldr	s1, [r7, #16]
 8001772:	ed97 0a05 	vldr	s0, [r7, #20]
 8001776:	f7ff ff9f 	bl	80016b8 <integral>
 800177a:	eef0 7a40 	vmov.f32	s15, s0
 800177e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001782:	ed97 1a01 	vldr	s2, [r7, #4]
 8001786:	edd7 0a04 	vldr	s1, [r7, #16]
 800178a:	ed97 0a05 	vldr	s0, [r7, #20]
 800178e:	f7ff ffbb 	bl	8001708 <derivative>
 8001792:	eef0 7a40 	vmov.f32	s15, s0
 8001796:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	ecbd 8b02 	vpop	{d8}
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_RTC_Init+0x44>)
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <MX_RTC_Init+0x48>)
 80017b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_RTC_Init+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_RTC_Init+0x44>)
 80017ba:	227f      	movs	r2, #127	; 0x7f
 80017bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_RTC_Init+0x44>)
 80017c0:	22ff      	movs	r2, #255	; 0xff
 80017c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_RTC_Init+0x44>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_RTC_Init+0x44>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_RTC_Init+0x44>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_RTC_Init+0x44>)
 80017d8:	f003 fc70 	bl	80050bc <HAL_RTC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80017e2:	f7ff fea1 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002a4 	.word	0x200002a4
 80017f0:	40002800 	.word	0x40002800

080017f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_RTC_MspInit+0x24>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d102      	bne.n	800180c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RTC_MspInit+0x28>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40002800 	.word	0x40002800
 800181c:	42470e3c 	.word	0x42470e3c

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_MspInit+0x4c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_MspInit+0x4c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800185e:	2006      	movs	r0, #6
 8001860:	f001 fb82 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f001 fa64 	bl	8002d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80018ca:	f003 feb1 	bl	8005630 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80018ce:	4803      	ldr	r0, [pc, #12]	; (80018dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80018d0:	f003 feae 	bl	8005630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000378 	.word	0x20000378
 80018dc:	200002c4 	.word	0x200002c4

080018e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	return 1;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_kill>:

int _kill(int pid, int sig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018fa:	f005 f931 	bl	8006b60 <__errno>
 80018fe:	4603      	mov	r3, r0
 8001900:	2216      	movs	r2, #22
 8001902:	601a      	str	r2, [r3, #0]
	return -1;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_exit>:

void _exit (int status)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffe7 	bl	80018f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001922:	e7fe      	b.n	8001922 <_exit+0x12>

08001924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
	}

return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
	}
	return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019be:	605a      	str	r2, [r3, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f005 f896 	bl	8006b60 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20020000 	.word	0x20020000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	20000214 	.word	0x20000214
 8001a68:	20000570 	.word	0x20000570

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 f873 	bl	8006bb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001ad0:	4a3f      	ldr	r2, [pc, #252]	; (8001bd0 <MX_TIM1_Init+0x140>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001ae4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001afc:	4833      	ldr	r0, [pc, #204]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001afe:	f003 fbc3 	bl	8005288 <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b08:	f7ff fd0e 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b16:	4619      	mov	r1, r3
 8001b18:	482c      	ldr	r0, [pc, #176]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001b1a:	f003 ff6f 	bl	80059fc <HAL_TIM_ConfigClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b24:	f7ff fd00 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b28:	4828      	ldr	r0, [pc, #160]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001b2a:	f003 fc6b 	bl	8005404 <HAL_TIM_PWM_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b34:	f7ff fcf8 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b44:	4619      	mov	r1, r3
 8001b46:	4821      	ldr	r0, [pc, #132]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001b48:	f004 fb9a 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001b52:	f7ff fce9 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b56:	2360      	movs	r3, #96	; 0x60
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 99;
 8001b5a:	2363      	movs	r3, #99	; 0x63
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	2200      	movs	r2, #0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001b7c:	f003 fe80 	bl	8005880 <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001b86:	f7ff fccf 	bl	8001528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001bae:	f004 fbd5 	bl	800635c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001bb8:	f7ff fcb6 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM1_Init+0x13c>)
 8001bbe:	f000 f8c5 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3758      	adds	r7, #88	; 0x58
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000378 	.word	0x20000378
 8001bd0:	40010000 	.word	0x40010000

08001bd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bfa:	2263      	movs	r2, #99	; 0x63
 8001bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c06:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c1a:	f003 fb35 	bl	8005288 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c24:	f7ff fc80 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c36:	f003 fee1 	bl	80059fc <HAL_TIM_ConfigClockSource>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c40:	f7ff fc72 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c52:	f004 fb15 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f7ff fc64 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000042c 	.word	0x2000042c

08001c6c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_TIM10_Init+0x40>)
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <MX_TIM10_Init+0x44>)
 8001c74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <MX_TIM10_Init+0x40>)
 8001c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c7c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_TIM10_Init+0x40>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_TIM10_Init+0x40>)
 8001c86:	2263      	movs	r2, #99	; 0x63
 8001c88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_TIM10_Init+0x40>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_TIM10_Init+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_TIM10_Init+0x40>)
 8001c98:	f003 faf6 	bl	8005288 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ca2:	f7ff fc41 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200002c4 	.word	0x200002c4
 8001cb0:	40014400 	.word	0x40014400

08001cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_TIM_Base_MspInit+0x8c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001ce2:	e026      	b.n	8001d32 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	e012      	b.n	8001d32 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM10)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_TIM_Base_MspInit+0x94>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10d      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_TIM_Base_MspInit+0x90>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	bf00      	nop
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40014400 	.word	0x40014400

08001d4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_TIM_MspPostInit+0x68>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11e      	bne.n	8001dac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_TIM_MspPostInit+0x6c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_TIM_MspPostInit+0x6c>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_TIM_MspPostInit+0x6c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4619      	mov	r1, r3
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_TIM_MspPostInit+0x70>)
 8001da8:	f001 f920 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_USART1_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df8:	f004 fb20 	bl	800643c <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff fb91 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200004e0 	.word	0x200004e0
 8001e10:	40011000 	.word	0x40011000

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12c      	bne.n	8001e90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_UART_MspInit+0x88>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_UART_MspInit+0x88>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_UART_MspInit+0x88>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_UART_MspInit+0x88>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_UART_MspInit+0x88>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_UART_MspInit+0x88>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e80:	2307      	movs	r3, #7
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e8c:	f001 f8ae 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <startTimeout>:
I2C_HandleTypeDef *i2c_1 = &hi2c1;;
//todo: remove hit2c from func , create file to register sending func
HAL_StatusTypeDef (*VL53L0X_REG_I2C_Mem_Write)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout) = HAL_I2C_Mem_Write;
HAL_StatusTypeDef (*VL53L0X_REG_I2C_Mem_Read)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout) = HAL_I2C_Mem_Read;

void startTimeout(void){ startMesure_ms(vl53l0x_tim);} ;
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fb5b 	bl	8001564 <startMesure_ms>
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <getTimeout>:
uint32_t getTimeout(void){ return getMesure_ms(vl53l0x_tim); };
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fb78 	bl	80015ac <getMesure_ms>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <stopTimeout>:
uint32_t stopTimeout(void){ return stopMesure_ms(vl53l0x_tim); };
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff fb84 	bl	80015d4 <stopMesure_ms>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <vl53l0x_I2C_Write_Reg8>:
static uint16_t encodeTimeout(uint16_t timeout_mclks);
bool setMeasurementTimingBudget(uint32_t budget_us);
/*--------------------------*/


void vl53l0x_I2C_Write_Reg8(uint8_t addr, uint8_t value){
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af04      	add	r7, sp, #16
 8001eda:	4603      	mov	r3, r0
 8001edc:	460a      	mov	r2, r1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_REG_I2C_Mem_Write(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, &value,1 , I2C_TIMEOUT);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <vl53l0x_I2C_Write_Reg8+0x38>)
 8001ee6:	681c      	ldr	r4, [r3, #0]
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <vl53l0x_I2C_Write_Reg8+0x3c>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2332      	movs	r3, #50	; 0x32
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	1dbb      	adds	r3, r7, #6
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	2152      	movs	r1, #82	; 0x52
 8001f00:	47a0      	blx	r4

}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000000c 	.word	0x2000000c
 8001f10:	20000008 	.word	0x20000008

08001f14 <vl53l0x_I2C_Write_Reg16>:
void vl53l0x_I2C_Write_Reg16(uint8_t addr, uint16_t value){
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af04      	add	r7, sp, #16
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	80bb      	strh	r3, [r7, #4]
	uint8_t temp[2];
	temp[0] =(value>>8) & 0xff; //hi byte
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	733b      	strb	r3, [r7, #12]
	temp[1] = value & 0xff;		// lo byte
 8001f2e:	88bb      	ldrh	r3, [r7, #4]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	737b      	strb	r3, [r7, #13]
	VL53L0X_REG_I2C_Mem_Write(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, temp,2 , I2C_TIMEOUT);
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <vl53l0x_I2C_Write_Reg16+0x48>)
 8001f36:	681c      	ldr	r4, [r3, #0]
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <vl53l0x_I2C_Write_Reg16+0x4c>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	2332      	movs	r3, #50	; 0x32
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	2302      	movs	r3, #2
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	2152      	movs	r1, #82	; 0x52
 8001f52:	47a0      	blx	r4

}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd90      	pop	{r4, r7, pc}
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	20000008 	.word	0x20000008

08001f64 <vl53l0x_I2C_Read_Reg8>:
void vl53l0x_I2C_Write_MultiReg(uint8_t addr, uint8_t *pData, uint8_t count){

	VL53L0X_REG_I2C_Mem_Write(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, pData, count, I2C_TIMEOUT);
}

uint8_t vl53l0x_I2C_Read_Reg8(uint8_t addr){
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af04      	add	r7, sp, #16
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, &value  ,1 , I2C_TIMEOUT);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <vl53l0x_I2C_Read_Reg8+0x34>)
 8001f70:	681c      	ldr	r4, [r3, #0]
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <vl53l0x_I2C_Read_Reg8+0x38>)
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	2332      	movs	r3, #50	; 0x32
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	f107 030f 	add.w	r3, r7, #15
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	2152      	movs	r1, #82	; 0x52
 8001f8c:	47a0      	blx	r4
	return value;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd90      	pop	{r4, r7, pc}
 8001f98:	20000010 	.word	0x20000010
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <vl53l0x_I2C_Read_Reg16>:
	uint8_t value;
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, &value  ,1 , timeOut);
	return value;
}

uint16_t vl53l0x_I2C_Read_Reg16(uint8_t addr){
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af04      	add	r7, sp, #16
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	81fb      	strh	r3, [r7, #14]
	uint8_t temp[2] = {0};
 8001fae:	2300      	movs	r3, #0
 8001fb0:	81bb      	strh	r3, [r7, #12]
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, temp  ,2 , I2C_TIMEOUT);
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <vl53l0x_I2C_Read_Reg16+0x58>)
 8001fb4:	681c      	ldr	r4, [r3, #0]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <vl53l0x_I2C_Read_Reg16+0x5c>)
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	2332      	movs	r3, #50	; 0x32
 8001fc0:	9302      	str	r3, [sp, #8]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	2152      	movs	r1, #82	; 0x52
 8001fd0:	47a0      	blx	r4
	value |= (temp[0]<<8);
 8001fd2:	7b3b      	ldrb	r3, [r7, #12]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	81fb      	strh	r3, [r7, #14]
	value |= temp[1];
 8001fe2:	7b7b      	ldrb	r3, [r7, #13]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	89fb      	ldrh	r3, [r7, #14]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	81fb      	strh	r3, [r7, #14]
	return value;
 8001fec:	89fb      	ldrh	r3, [r7, #14]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	20000008 	.word	0x20000008

08002000 <vl53l0x_I2C_Read_MultiReg>:
	value |= (temp[2]<<8);
	value |= temp[3];
	return value;
}
/* reading multiple data*/
void vl53l0x_I2C_Read_MultiReg(uint8_t addr, uint8_t *pData, uint8_t count){
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b087      	sub	sp, #28
 8002004:	af04      	add	r7, sp, #16
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	4613      	mov	r3, r2
 800200e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_REG_I2C_Mem_Read(i2c_1, ADDRESS_DEFAULT_SHIFTED, (uint16_t)(addr), 1, pData ,count , I2C_TIMEOUT);
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <vl53l0x_I2C_Read_MultiReg+0x38>)
 8002012:	681c      	ldr	r4, [r3, #0]
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <vl53l0x_I2C_Read_MultiReg+0x3c>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	b29a      	uxth	r2, r3
 800201c:	79bb      	ldrb	r3, [r7, #6]
 800201e:	b29b      	uxth	r3, r3
 8002020:	2132      	movs	r1, #50	; 0x32
 8002022:	9102      	str	r1, [sp, #8]
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	2152      	movs	r1, #82	; 0x52
 800202e:	47a0      	blx	r4

}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	20000010 	.word	0x20000010
 800203c:	20000008 	.word	0x20000008

08002040 <vl53l0x_Init>:

uint8_t init_stop_var;		// read in intin used when starting measurment
/*public methods*/
bool vl53l0x_Init(bool io_2v8){
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]


	if(io_2v8){
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <vl53l0x_Init+0x26>
		vl53l0x_I2C_Write_Reg8(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
				vl53l0x_I2C_Read_Reg8(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01);
 8002050:	2089      	movs	r0, #137	; 0x89
 8002052:	f7ff ff87 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 8002056:	4603      	mov	r3, r0
		vl53l0x_I2C_Write_Reg8(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4619      	mov	r1, r3
 8002060:	2089      	movs	r0, #137	; 0x89
 8002062:	f7ff ff37 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	}
	// set i2c standart mode
	vl53l0x_I2C_Write_Reg8(0x88, 0x00);
 8002066:	2100      	movs	r1, #0
 8002068:	2088      	movs	r0, #136	; 0x88
 800206a:	f7ff ff33 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 800206e:	2101      	movs	r1, #1
 8002070:	2080      	movs	r0, #128	; 0x80
 8002072:	f7ff ff2f 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002076:	2101      	movs	r1, #1
 8002078:	20ff      	movs	r0, #255	; 0xff
 800207a:	f7ff ff2b 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 800207e:	2100      	movs	r1, #0
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff ff27 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	init_stop_var = vl53l0x_I2C_Read_Reg8(0x091);
 8002086:	2091      	movs	r0, #145	; 0x91
 8002088:	f7ff ff6c 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <vl53l0x_Init+0x144>)
 8002092:	701a      	strb	r2, [r3, #0]

	vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8002094:	2101      	movs	r1, #1
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff ff1c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 800209c:	2100      	movs	r1, #0
 800209e:	20ff      	movs	r0, #255	; 0xff
 80020a0:	f7ff ff18 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 80020a4:	2100      	movs	r1, #0
 80020a6:	2080      	movs	r0, #128	; 0x80
 80020a8:	f7ff ff14 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	//disable signal rate msrc bit 1 and signal rate pre range bit 4 limit checks

	vl53l0x_I2C_Write_Reg8(MSRC_CONFIG_CONTROL,
			vl53l0x_I2C_Read_Reg8(MSRC_CONFIG_CONTROL) | 0x12);
 80020ac:	2060      	movs	r0, #96	; 0x60
 80020ae:	f7ff ff59 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 80020b2:	4603      	mov	r3, r0
	vl53l0x_I2C_Write_Reg8(MSRC_CONFIG_CONTROL,
 80020b4:	f043 0312 	orr.w	r3, r3, #18
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4619      	mov	r1, r3
 80020bc:	2060      	movs	r0, #96	; 0x60
 80020be:	f7ff ff09 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	// set rate signal limit Mcps( milion counts per second)
	setSignalRateLimit(0.25);
 80020c2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80020c6:	f000 fa9f 	bl	8002608 <setSignalRateLimit>

	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80020ca:	21ff      	movs	r1, #255	; 0xff
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff ff01 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	// staticInit
	uint8_t spad_count;
	bool  spad_type_is_aperture; //
	if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) return false;
 80020d2:	f107 0213 	add.w	r2, r7, #19
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fac9 	bl	8002674 <getSpadInfo>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <vl53l0x_Init+0xac>
 80020e8:	2300      	movs	r3, #0
 80020ea:	e1ed      	b.n	80024c8 <vl53l0x_Init+0x488>

	//The SPAD map
	uint8_t ref_spad_map[6];
	vl53l0x_I2C_Read_MultiReg(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2206      	movs	r2, #6
 80020f2:	4619      	mov	r1, r3
 80020f4:	20b0      	movs	r0, #176	; 0xb0
 80020f6:	f7ff ff83 	bl	8002000 <vl53l0x_I2C_Read_MultiReg>

	// vl53l0x_set_reference_spad() in api --start

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 80020fa:	2101      	movs	r1, #1
 80020fc:	20ff      	movs	r0, #255	; 0xff
 80020fe:	f7ff fee9 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002102:	2100      	movs	r1, #0
 8002104:	204f      	movs	r0, #79	; 0x4f
 8002106:	f7ff fee5 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	204e      	movs	r0, #78	; 0x4e
 800210e:	f7ff fee1 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002112:	2100      	movs	r1, #0
 8002114:	20ff      	movs	r0, #255	; 0xff
 8002116:	f7ff fedd 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 800211a:	21b4      	movs	r1, #180	; 0xb4
 800211c:	20b6      	movs	r0, #182	; 0xb6
 800211e:	f7ff fed9 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <vl53l0x_Init+0xec>
 8002128:	230c      	movs	r3, #12
 800212a:	e000      	b.n	800212e <vl53l0x_Init+0xee>
 800212c:	2300      	movs	r3, #0
 800212e:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	75bb      	strb	r3, [r7, #22]
 8002138:	e03e      	b.n	80021b8 <vl53l0x_Init+0x178>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 800213a:	7dba      	ldrb	r2, [r7, #22]
 800213c:	7d7b      	ldrb	r3, [r7, #21]
 800213e:	429a      	cmp	r2, r3
 8002140:	d303      	bcc.n	800214a <vl53l0x_Init+0x10a>
 8002142:	7d3b      	ldrb	r3, [r7, #20]
 8002144:	7dfa      	ldrb	r2, [r7, #23]
 8002146:	429a      	cmp	r2, r3
 8002148:	d11e      	bne.n	8002188 <vl53l0x_Init+0x148>
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 800214a:	7dbb      	ldrb	r3, [r7, #22]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	4603      	mov	r3, r0
 8002152:	f107 0218 	add.w	r2, r7, #24
 8002156:	4413      	add	r3, r2
 8002158:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800215c:	b25a      	sxtb	r2, r3
 800215e:	7dbb      	ldrb	r3, [r7, #22]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	b25b      	sxtb	r3, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	b25b      	sxtb	r3, r3
 8002170:	4013      	ands	r3, r2
 8002172:	b25a      	sxtb	r2, r3
 8002174:	4603      	mov	r3, r0
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f107 0118 	add.w	r1, r7, #24
 800217c:	440b      	add	r3, r1
 800217e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002182:	e016      	b.n	80021b2 <vl53l0x_Init+0x172>
 8002184:	20000554 	.word	0x20000554
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8002188:	7dbb      	ldrb	r3, [r7, #22]
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f107 0218 	add.w	r2, r7, #24
 8002192:	4413      	add	r3, r2
 8002194:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002198:	461a      	mov	r2, r3
 800219a:	7dbb      	ldrb	r3, [r7, #22]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	fa42 f303 	asr.w	r3, r2, r3
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <vl53l0x_Init+0x172>
		{
			spads_enabled++;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	3301      	adds	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 80021b2:	7dbb      	ldrb	r3, [r7, #22]
 80021b4:	3301      	adds	r3, #1
 80021b6:	75bb      	strb	r3, [r7, #22]
 80021b8:	7dbb      	ldrb	r3, [r7, #22]
 80021ba:	2b2f      	cmp	r3, #47	; 0x2f
 80021bc:	d9bd      	bls.n	800213a <vl53l0x_Init+0xfa>
		}
	}

	vl53l0x_I2C_Read_MultiReg(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	2206      	movs	r2, #6
 80021c4:	4619      	mov	r1, r3
 80021c6:	20b0      	movs	r0, #176	; 0xb0
 80021c8:	f7ff ff1a 	bl	8002000 <vl53l0x_I2C_Read_MultiReg>

	// VL53L0X_set_reference_spads() --end

	//VL53L0X_load_tuning_settings() --start

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 80021cc:	2101      	movs	r1, #1
 80021ce:	20ff      	movs	r0, #255	; 0xff
 80021d0:	f7ff fe80 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff fe7c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 80021dc:	2100      	movs	r1, #0
 80021de:	20ff      	movs	r0, #255	; 0xff
 80021e0:	f7ff fe78 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x09, 0x00);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2009      	movs	r0, #9
 80021e8:	f7ff fe74 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x10, 0x00);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2010      	movs	r0, #16
 80021f0:	f7ff fe70 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x11, 0x00);
 80021f4:	2100      	movs	r1, #0
 80021f6:	2011      	movs	r0, #17
 80021f8:	f7ff fe6c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0x24, 0x01);
 80021fc:	2101      	movs	r1, #1
 80021fe:	2024      	movs	r0, #36	; 0x24
 8002200:	f7ff fe68 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x25, 0xFF);
 8002204:	21ff      	movs	r1, #255	; 0xff
 8002206:	2025      	movs	r0, #37	; 0x25
 8002208:	f7ff fe64 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x75, 0x00);
 800220c:	2100      	movs	r1, #0
 800220e:	2075      	movs	r0, #117	; 0x75
 8002210:	f7ff fe60 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002214:	2101      	movs	r1, #1
 8002216:	20ff      	movs	r0, #255	; 0xff
 8002218:	f7ff fe5c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4E, 0x2C);
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	204e      	movs	r0, #78	; 0x4e
 8002220:	f7ff fe58 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x48, 0x00);
 8002224:	2100      	movs	r1, #0
 8002226:	2048      	movs	r0, #72	; 0x48
 8002228:	f7ff fe54 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x30, 0x20);
 800222c:	2120      	movs	r1, #32
 800222e:	2030      	movs	r0, #48	; 0x30
 8002230:	f7ff fe50 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002234:	2100      	movs	r1, #0
 8002236:	20ff      	movs	r0, #255	; 0xff
 8002238:	f7ff fe4c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x30, 0x09);
 800223c:	2109      	movs	r1, #9
 800223e:	2030      	movs	r0, #48	; 0x30
 8002240:	f7ff fe48 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x54, 0x00);
 8002244:	2100      	movs	r1, #0
 8002246:	2054      	movs	r0, #84	; 0x54
 8002248:	f7ff fe44 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x31, 0x04);
 800224c:	2104      	movs	r1, #4
 800224e:	2031      	movs	r0, #49	; 0x31
 8002250:	f7ff fe40 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x32, 0x03);
 8002254:	2103      	movs	r1, #3
 8002256:	2032      	movs	r0, #50	; 0x32
 8002258:	f7ff fe3c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x40, 0x83);
 800225c:	2183      	movs	r1, #131	; 0x83
 800225e:	2040      	movs	r0, #64	; 0x40
 8002260:	f7ff fe38 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x46, 0x25);
 8002264:	2125      	movs	r1, #37	; 0x25
 8002266:	2046      	movs	r0, #70	; 0x46
 8002268:	f7ff fe34 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x60, 0x00);
 800226c:	2100      	movs	r1, #0
 800226e:	2060      	movs	r0, #96	; 0x60
 8002270:	f7ff fe30 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x27, 0x00);
 8002274:	2100      	movs	r1, #0
 8002276:	2027      	movs	r0, #39	; 0x27
 8002278:	f7ff fe2c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x50, 0x06);
 800227c:	2106      	movs	r1, #6
 800227e:	2050      	movs	r0, #80	; 0x50
 8002280:	f7ff fe28 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x51, 0x00);
 8002284:	2100      	movs	r1, #0
 8002286:	2051      	movs	r0, #81	; 0x51
 8002288:	f7ff fe24 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x52, 0x96);
 800228c:	2196      	movs	r1, #150	; 0x96
 800228e:	2052      	movs	r0, #82	; 0x52
 8002290:	f7ff fe20 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x56, 0x08);
 8002294:	2108      	movs	r1, #8
 8002296:	2056      	movs	r0, #86	; 0x56
 8002298:	f7ff fe1c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x57, 0x30);
 800229c:	2130      	movs	r1, #48	; 0x30
 800229e:	2057      	movs	r0, #87	; 0x57
 80022a0:	f7ff fe18 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x61, 0x00);
 80022a4:	2100      	movs	r1, #0
 80022a6:	2061      	movs	r0, #97	; 0x61
 80022a8:	f7ff fe14 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x62, 0x00);
 80022ac:	2100      	movs	r1, #0
 80022ae:	2062      	movs	r0, #98	; 0x62
 80022b0:	f7ff fe10 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x64, 0x00);
 80022b4:	2100      	movs	r1, #0
 80022b6:	2064      	movs	r0, #100	; 0x64
 80022b8:	f7ff fe0c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x65, 0x00);
 80022bc:	2100      	movs	r1, #0
 80022be:	2065      	movs	r0, #101	; 0x65
 80022c0:	f7ff fe08 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x66, 0xA0);
 80022c4:	21a0      	movs	r1, #160	; 0xa0
 80022c6:	2066      	movs	r0, #102	; 0x66
 80022c8:	f7ff fe04 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 80022cc:	2101      	movs	r1, #1
 80022ce:	20ff      	movs	r0, #255	; 0xff
 80022d0:	f7ff fe00 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x22, 0x32);
 80022d4:	2132      	movs	r1, #50	; 0x32
 80022d6:	2022      	movs	r0, #34	; 0x22
 80022d8:	f7ff fdfc 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x47, 0x14);
 80022dc:	2114      	movs	r1, #20
 80022de:	2047      	movs	r0, #71	; 0x47
 80022e0:	f7ff fdf8 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x49, 0xFF);
 80022e4:	21ff      	movs	r1, #255	; 0xff
 80022e6:	2049      	movs	r0, #73	; 0x49
 80022e8:	f7ff fdf4 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4A, 0x00);
 80022ec:	2100      	movs	r1, #0
 80022ee:	204a      	movs	r0, #74	; 0x4a
 80022f0:	f7ff fdf0 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 80022f4:	2100      	movs	r1, #0
 80022f6:	20ff      	movs	r0, #255	; 0xff
 80022f8:	f7ff fdec 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x7A, 0x0A);
 80022fc:	210a      	movs	r1, #10
 80022fe:	207a      	movs	r0, #122	; 0x7a
 8002300:	f7ff fde8 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x7B, 0x00);
 8002304:	2100      	movs	r1, #0
 8002306:	207b      	movs	r0, #123	; 0x7b
 8002308:	f7ff fde4 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x78, 0x21);
 800230c:	2121      	movs	r1, #33	; 0x21
 800230e:	2078      	movs	r0, #120	; 0x78
 8002310:	f7ff fde0 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002314:	2101      	movs	r1, #1
 8002316:	20ff      	movs	r0, #255	; 0xff
 8002318:	f7ff fddc 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x23, 0x34);
 800231c:	2134      	movs	r1, #52	; 0x34
 800231e:	2023      	movs	r0, #35	; 0x23
 8002320:	f7ff fdd8 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x42, 0x00);
 8002324:	2100      	movs	r1, #0
 8002326:	2042      	movs	r0, #66	; 0x42
 8002328:	f7ff fdd4 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x44, 0xFF);
 800232c:	21ff      	movs	r1, #255	; 0xff
 800232e:	2044      	movs	r0, #68	; 0x44
 8002330:	f7ff fdd0 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x45, 0x26);
 8002334:	2126      	movs	r1, #38	; 0x26
 8002336:	2045      	movs	r0, #69	; 0x45
 8002338:	f7ff fdcc 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x46, 0x05);
 800233c:	2105      	movs	r1, #5
 800233e:	2046      	movs	r0, #70	; 0x46
 8002340:	f7ff fdc8 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x40, 0x40);
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	2040      	movs	r0, #64	; 0x40
 8002348:	f7ff fdc4 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x0E, 0x06);
 800234c:	2106      	movs	r1, #6
 800234e:	200e      	movs	r0, #14
 8002350:	f7ff fdc0 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x20, 0x1A);
 8002354:	211a      	movs	r1, #26
 8002356:	2020      	movs	r0, #32
 8002358:	f7ff fdbc 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x43, 0x40);
 800235c:	2140      	movs	r1, #64	; 0x40
 800235e:	2043      	movs	r0, #67	; 0x43
 8002360:	f7ff fdb8 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002364:	2100      	movs	r1, #0
 8002366:	20ff      	movs	r0, #255	; 0xff
 8002368:	f7ff fdb4 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x34, 0x03);
 800236c:	2103      	movs	r1, #3
 800236e:	2034      	movs	r0, #52	; 0x34
 8002370:	f7ff fdb0 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x35, 0x44);
 8002374:	2144      	movs	r1, #68	; 0x44
 8002376:	2035      	movs	r0, #53	; 0x35
 8002378:	f7ff fdac 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 800237c:	2101      	movs	r1, #1
 800237e:	20ff      	movs	r0, #255	; 0xff
 8002380:	f7ff fda8 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x31, 0x04);
 8002384:	2104      	movs	r1, #4
 8002386:	2031      	movs	r0, #49	; 0x31
 8002388:	f7ff fda4 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4B, 0x09);
 800238c:	2109      	movs	r1, #9
 800238e:	204b      	movs	r0, #75	; 0x4b
 8002390:	f7ff fda0 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4C, 0x05);
 8002394:	2105      	movs	r1, #5
 8002396:	204c      	movs	r0, #76	; 0x4c
 8002398:	f7ff fd9c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x4D, 0x04);
 800239c:	2104      	movs	r1, #4
 800239e:	204d      	movs	r0, #77	; 0x4d
 80023a0:	f7ff fd98 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 80023a4:	2100      	movs	r1, #0
 80023a6:	20ff      	movs	r0, #255	; 0xff
 80023a8:	f7ff fd94 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x44, 0x00);
 80023ac:	2100      	movs	r1, #0
 80023ae:	2044      	movs	r0, #68	; 0x44
 80023b0:	f7ff fd90 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x45, 0x20);
 80023b4:	2120      	movs	r1, #32
 80023b6:	2045      	movs	r0, #69	; 0x45
 80023b8:	f7ff fd8c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x47, 0x08);
 80023bc:	2108      	movs	r1, #8
 80023be:	2047      	movs	r0, #71	; 0x47
 80023c0:	f7ff fd88 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x48, 0x28);
 80023c4:	2128      	movs	r1, #40	; 0x28
 80023c6:	2048      	movs	r0, #72	; 0x48
 80023c8:	f7ff fd84 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x67, 0x00);
 80023cc:	2100      	movs	r1, #0
 80023ce:	2067      	movs	r0, #103	; 0x67
 80023d0:	f7ff fd80 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x70, 0x04);
 80023d4:	2104      	movs	r1, #4
 80023d6:	2070      	movs	r0, #112	; 0x70
 80023d8:	f7ff fd7c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x71, 0x01);
 80023dc:	2101      	movs	r1, #1
 80023de:	2071      	movs	r0, #113	; 0x71
 80023e0:	f7ff fd78 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x72, 0xFE);
 80023e4:	21fe      	movs	r1, #254	; 0xfe
 80023e6:	2072      	movs	r0, #114	; 0x72
 80023e8:	f7ff fd74 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x76, 0x00);
 80023ec:	2100      	movs	r1, #0
 80023ee:	2076      	movs	r0, #118	; 0x76
 80023f0:	f7ff fd70 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x77, 0x00);
 80023f4:	2100      	movs	r1, #0
 80023f6:	2077      	movs	r0, #119	; 0x77
 80023f8:	f7ff fd6c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 80023fc:	2101      	movs	r1, #1
 80023fe:	20ff      	movs	r0, #255	; 0xff
 8002400:	f7ff fd68 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x0D, 0x01);
 8002404:	2101      	movs	r1, #1
 8002406:	200d      	movs	r0, #13
 8002408:	f7ff fd64 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 800240c:	2100      	movs	r1, #0
 800240e:	20ff      	movs	r0, #255	; 0xff
 8002410:	f7ff fd60 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 8002414:	2101      	movs	r1, #1
 8002416:	2080      	movs	r0, #128	; 0x80
 8002418:	f7ff fd5c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x01, 0xF8);
 800241c:	21f8      	movs	r1, #248	; 0xf8
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff fd58 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002424:	2101      	movs	r1, #1
 8002426:	20ff      	movs	r0, #255	; 0xff
 8002428:	f7ff fd54 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x8E, 0x01);
 800242c:	2101      	movs	r1, #1
 800242e:	208e      	movs	r0, #142	; 0x8e
 8002430:	f7ff fd50 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8002434:	2101      	movs	r1, #1
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff fd4c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 800243c:	2100      	movs	r1, #0
 800243e:	20ff      	movs	r0, #255	; 0xff
 8002440:	f7ff fd48 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 8002444:	2100      	movs	r1, #0
 8002446:	2080      	movs	r0, #128	; 0x80
 8002448:	f7ff fd44 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	  //VL53L0X_load_tuning_settings() --end

	 // "Set interrupt config to new sample ready"
	  // VL53L0X_SetGpioConfig() -- start

	 vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800244c:	2104      	movs	r1, #4
 800244e:	200a      	movs	r0, #10
 8002450:	f7ff fd40 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	 vl53l0x_I2C_Write_Reg8(GPIO_HV_MUX_ACTIVE_HIGH, vl53l0x_I2C_Read_Reg8(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8002454:	2084      	movs	r0, #132	; 0x84
 8002456:	f7ff fd85 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 800245a:	4603      	mov	r3, r0
 800245c:	f023 0310 	bic.w	r3, r3, #16
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	2084      	movs	r0, #132	; 0x84
 8002466:	f7ff fd35 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	 vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800246a:	2101      	movs	r1, #1
 800246c:	200b      	movs	r0, #11
 800246e:	f7ff fd31 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	 // VL53L0X_SetGpioConfig() -- end

	 g_measTimBudUs = getMeasurementTimingBudget();
 8002472:	f000 f977 	bl	8002764 <getMeasurementTimingBudget>
 8002476:	4603      	mov	r3, r0
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <vl53l0x_Init+0x490>)
 800247a:	6013      	str	r3, [r2, #0]
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// VL53L0X_SetSequenceStepEnable() -- start

	 vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800247c:	21e8      	movs	r1, #232	; 0xe8
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff fd28 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	  //VL53L0X_SetSequenceStepEnable() --end

	// "Recalculate timing budget"
	setMeasurementTimingBudget(g_measTimBudUs);
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <vl53l0x_Init+0x490>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f823 	bl	80024d4 <setMeasurementTimingBudget>

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0x01);
 800248e:	2101      	movs	r1, #1
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff fd1f 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	if (!performSingleRefCalibration(0x40)) { return false; }
 8002496:	2040      	movs	r0, #64	; 0x40
 8002498:	f000 fb0e 	bl	8002ab8 <performSingleRefCalibration>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <vl53l0x_Init+0x466>
 80024a2:	2300      	movs	r3, #0
 80024a4:	e010      	b.n	80024c8 <vl53l0x_Init+0x488>

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80024a6:	2102      	movs	r1, #2
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff fd13 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	if (!performSingleRefCalibration(0x00)) { return false; }
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 fb02 	bl	8002ab8 <performSingleRefCalibration>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <vl53l0x_Init+0x47e>
 80024ba:	2300      	movs	r3, #0
 80024bc:	e004      	b.n	80024c8 <vl53l0x_Init+0x488>

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	vl53l0x_I2C_Write_Reg8(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80024be:	21e8      	movs	r1, #232	; 0xe8
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7ff fd07 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	// VL53L0X_PerformRefCalibration() end

	 return true;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000558 	.word	0x20000558

080024d4 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b092      	sub	sp, #72	; 0x48
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80024dc:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80024e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 80024e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 80024ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 80024ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 80024f0:	f240 234e 	movw	r3, #590	; 0x24e
 80024f4:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 80024f6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80024fa:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 80024fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002500:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8002502:	f240 2326 	movw	r3, #550	; 0x226
 8002506:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 8002508:	f644 6320 	movw	r3, #20000	; 0x4e20
 800250c:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	429a      	cmp	r2, r3
 8002514:	d201      	bcs.n	800251a <setMeasurementTimingBudget+0x46>
 8002516:	2300      	movs	r3, #0
 8002518:	e06e      	b.n	80025f8 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 800251a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800251e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002520:	4413      	add	r3, r2
 8002522:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(&enables);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f97d 	bl	8002828 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800252e:	f107 020c 	add.w	r2, r7, #12
 8002532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f9a7 	bl	800288c <getSequenceStepTimeouts>

  if (enables.tcc)
 800253e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800254a:	4413      	add	r3, r2
 800254c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800254e:	4413      	add	r3, r2
 8002550:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8002552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800255e:	4413      	add	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002564:	4413      	add	r3, r2
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
 8002568:	e009      	b.n	800257e <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 800256a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002576:	4413      	add	r3, r2
 8002578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800257a:	4413      	add	r3, r2
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 800257e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800258a:	4413      	add	r3, r2
 800258c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800258e:	4413      	add	r3, r2
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8002592:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	d02d      	beq.n	80025f6 <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 800259a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800259c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800259e:	4413      	add	r3, r2
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80025a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d901      	bls.n	80025ae <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e024      	b.n	80025f8 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80025b6:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025be:	f000 fa29 	bl	8002a14 <timeoutMicrosecondsToMclks>
 80025c2:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80025c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 80025c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80025d0:	8a7a      	ldrh	r2, [r7, #18]
 80025d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80025d6:	4413      	add	r3, r2
 80025d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    vl53l0x_I2C_Write_Reg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80025dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fa3d 	bl	8002a60 <encodeTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	2071      	movs	r0, #113	; 0x71
 80025ec:	f7ff fc92 	bl	8001f14 <vl53l0x_I2C_Write_Reg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80025f0:	4a03      	ldr	r2, [pc, #12]	; (8002600 <setMeasurementTimingBudget+0x12c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
  }
  return true;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3748      	adds	r7, #72	; 0x48
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000558 	.word	0x20000558
 8002604:	00000000 	.word	0x00000000

08002608 <setSignalRateLimit>:
// Mcps - mega counts per second
bool setSignalRateLimit(float Mcps){
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(Mcps < 0 || Mcps > 511.99)return false;
 8002612:	edd7 7a01 	vldr	s15, [r7, #4]
 8002616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261e:	d40a      	bmi.n	8002636 <setSignalRateLimit+0x2e>
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fd ff99 	bl	8000558 <__aeabi_f2d>
 8002626:	a311      	add	r3, pc, #68	; (adr r3, 800266c <setSignalRateLimit+0x64>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fe fa7c 	bl	8000b28 <__aeabi_dcmpgt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <setSignalRateLimit+0x32>
 8002636:	2300      	movs	r3, #0
 8002638:	e00f      	b.n	800265a <setSignalRateLimit+0x52>
	vl53l0x_I2C_Write_Reg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, Mcps *(1<<7));
 800263a:	edd7 7a01 	vldr	s15, [r7, #4]
 800263e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002668 <setSignalRateLimit+0x60>
 8002642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800264a:	ee17 3a90 	vmov	r3, s15
 800264e:	b29b      	uxth	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	2044      	movs	r0, #68	; 0x44
 8002654:	f7ff fc5e 	bl	8001f14 <vl53l0x_I2C_Write_Reg16>
	return true;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	f3af 8000 	nop.w
 8002668:	43000000 	.word	0x43000000
 800266c:	0a3d70a4 	.word	0x0a3d70a4
 8002670:	407fffd7 	.word	0x407fffd7

08002674 <getSpadInfo>:
/* Get feference SPAD count and type
 * based on vl53l0x_get_info_from_divice()*/
bool getSpadInfo(uint8_t *count, bool *type_is_aperture){
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]

	uint8_t tmp;
	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 800267e:	2101      	movs	r1, #1
 8002680:	2080      	movs	r0, #128	; 0x80
 8002682:	f7ff fc27 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002686:	2101      	movs	r1, #1
 8002688:	20ff      	movs	r0, #255	; 0xff
 800268a:	f7ff fc23 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 800268e:	2100      	movs	r1, #0
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff fc1f 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x06);
 8002696:	2106      	movs	r1, #6
 8002698:	20ff      	movs	r0, #255	; 0xff
 800269a:	f7ff fc1b 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x83, vl53l0x_I2C_Read_Reg8(0x83) | 0x04);
 800269e:	2083      	movs	r0, #131	; 0x83
 80026a0:	f7ff fc60 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	2083      	movs	r0, #131	; 0x83
 80026b0:	f7ff fc10 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x07);
 80026b4:	2107      	movs	r1, #7
 80026b6:	20ff      	movs	r0, #255	; 0xff
 80026b8:	f7ff fc0c 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x81, 0x01);
 80026bc:	2101      	movs	r1, #1
 80026be:	2081      	movs	r0, #129	; 0x81
 80026c0:	f7ff fc08 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 80026c4:	2101      	movs	r1, #1
 80026c6:	2080      	movs	r0, #128	; 0x80
 80026c8:	f7ff fc04 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0x94, 0x6b);
 80026cc:	216b      	movs	r1, #107	; 0x6b
 80026ce:	2094      	movs	r0, #148	; 0x94
 80026d0:	f7ff fc00 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x83, 0x00);
 80026d4:	2100      	movs	r1, #0
 80026d6:	2083      	movs	r0, #131	; 0x83
 80026d8:	f7ff fbfc 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	while(vl53l0x_I2C_Read_Reg8(0x83) == 0x00){ //while change
 80026dc:	bf00      	nop
 80026de:	2083      	movs	r0, #131	; 0x83
 80026e0:	f7ff fc40 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f9      	beq.n	80026de <getSpadInfo+0x6a>
		// add timeout function
	}
	vl53l0x_I2C_Write_Reg8(0x83, 0x01);
 80026ea:	2101      	movs	r1, #1
 80026ec:	2083      	movs	r0, #131	; 0x83
 80026ee:	f7ff fbf1 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	tmp = vl53l0x_I2C_Read_Reg8(0x92);
 80026f2:	2092      	movs	r0, #146	; 0x92
 80026f4:	f7ff fc36 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]

	*count = tmp & 0x7f;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	09db      	lsrs	r3, r3, #7
 800270c:	b2da      	uxtb	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	701a      	strb	r2, [r3, #0]

	vl53l0x_I2C_Write_Reg8(0x81, 0x00);
 8002712:	2100      	movs	r1, #0
 8002714:	2081      	movs	r0, #129	; 0x81
 8002716:	f7ff fbdd 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x06);
 800271a:	2106      	movs	r1, #6
 800271c:	20ff      	movs	r0, #255	; 0xff
 800271e:	f7ff fbd9 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x83, vl53l0x_I2C_Read_Reg8(0x83)  & ~0x04);
 8002722:	2083      	movs	r0, #131	; 0x83
 8002724:	f7ff fc1e 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 8002728:	4603      	mov	r3, r0
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	b2db      	uxtb	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	2083      	movs	r0, #131	; 0x83
 8002734:	f7ff fbce 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002738:	2101      	movs	r1, #1
 800273a:	20ff      	movs	r0, #255	; 0xff
 800273c:	f7ff fbca 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8002740:	2101      	movs	r1, #1
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff fbc6 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002748:	2100      	movs	r1, #0
 800274a:	20ff      	movs	r0, #255	; 0xff
 800274c:	f7ff fbc2 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
	vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 8002750:	2100      	movs	r1, #0
 8002752:	2080      	movs	r0, #128	; 0x80
 8002754:	f7ff fbbe 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

	return true;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af00      	add	r7, sp, #0
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800276a:	f240 7376 	movw	r3, #1910	; 0x776
 800276e:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t const EndOverhead        = 960;
 8002770:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002774:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t const MsrcOverhead       = 660;
 8002776:	f44f 7325 	mov.w	r3, #660	; 0x294
 800277a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t const TccOverhead        = 590;
 800277c:	f240 234e 	movw	r3, #590	; 0x24e
 8002780:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t const DssOverhead        = 690;
 8002782:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002786:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t const PreRangeOverhead   = 660;
 8002788:	f44f 7325 	mov.w	r3, #660	; 0x294
 800278c:	843b      	strh	r3, [r7, #32]
	uint16_t const FinalRangeOverhead = 550;
 800278e:	f240 2326 	movw	r3, #550	; 0x226
 8002792:	83fb      	strh	r3, [r7, #30]

	// "Start and end overhead times always present"
	uint32_t budget_us = StartOverhead + EndOverhead;
 8002794:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002798:	4413      	add	r3, r2
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c

	getSequenceStepEnables(&enables);
 800279c:	f107 0318 	add.w	r3, r7, #24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f841 	bl	8002828 <getSequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 80027a6:	463a      	mov	r2, r7
 80027a8:	f107 0318 	add.w	r3, r7, #24
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f86c 	bl	800288c <getSequenceStepTimeouts>

	if (enables.tcc)
 80027b4:	7e3b      	ldrb	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <getMeasurementTimingBudget+0x62>
	{
	budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027be:	4413      	add	r3, r2
 80027c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c2:	4413      	add	r3, r2
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.dss)
 80027c6:	7ebb      	ldrb	r3, [r7, #26]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <getMeasurementTimingBudget+0x78>
	{
	budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	4413      	add	r3, r2
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027da:	e008      	b.n	80027ee <getMeasurementTimingBudget+0x8a>
	}
	else if (enables.msrc)
 80027dc:	7e7b      	ldrb	r3, [r7, #25]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <getMeasurementTimingBudget+0x8a>
	{
	budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027e6:	4413      	add	r3, r2
 80027e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ea:	4413      	add	r3, r2
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.pre_range)
 80027ee:	7efb      	ldrb	r3, [r7, #27]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <getMeasurementTimingBudget+0x9c>
	{
	budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	8c3b      	ldrh	r3, [r7, #32]
 80027f8:	4413      	add	r3, r2
 80027fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fc:	4413      	add	r3, r2
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.final_range)
 8002800:	7f3b      	ldrb	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <getMeasurementTimingBudget+0xae>
	{
	budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	8bfb      	ldrh	r3, [r7, #30]
 800280a:	4413      	add	r3, r2
 800280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280e:	4413      	add	r3, r2
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	g_measTimBudUs = budget_us; // store for internal reuse
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <getMeasurementTimingBudget+0xc0>)
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	6013      	str	r3, [r2, #0]
	return budget_us;
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800281a:	4618      	mov	r0, r3
 800281c:	3730      	adds	r7, #48	; 0x30
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000558 	.word	0x20000558

08002828 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = vl53l0x_I2C_Read_Reg8(SYSTEM_SEQUENCE_CONFIG);
 8002830:	2001      	movs	r0, #1
 8002832:	f7ff fb97 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 8002836:	4603      	mov	r3, r0
 8002838:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	09db      	lsrs	r3, r3, #7
 800287e:	b2da      	uxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	711a      	strb	r2, [r3, #4]
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f85e 	bl	8002958 <getVcselPulsePeriod>
 800289c:	4603      	mov	r3, r0
 800289e:	b29a      	uxth	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = vl53l0x_I2C_Read_Reg8(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80028a4:	2046      	movs	r0, #70	; 0x46
 80028a6:	f7ff fb5d 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 f86a 	bl	800299c <timeoutMclksToMicroseconds>
 80028c8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(vl53l0x_I2C_Read_Reg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80028ce:	2051      	movs	r0, #81	; 0x51
 80028d0:	f7ff fb66 	bl	8001fa0 <vl53l0x_I2C_Read_Reg16>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f888 	bl	80029ec <decodeTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f000 f853 	bl	800299c <timeoutMclksToMicroseconds>
 80028f6:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80028fc:	2001      	movs	r0, #1
 80028fe:	f000 f82b 	bl	8002958 <getVcselPulsePeriod>
 8002902:	4603      	mov	r3, r0
 8002904:	b29a      	uxth	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(vl53l0x_I2C_Read_Reg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800290a:	2071      	movs	r0, #113	; 0x71
 800290c:	f7ff fb48 	bl	8001fa0 <vl53l0x_I2C_Read_Reg16>
 8002910:	4603      	mov	r3, r0
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f86a 	bl	80029ec <decodeTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	78db      	ldrb	r3, [r3, #3]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <getSequenceStepTimeouts+0xac>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	891a      	ldrh	r2, [r3, #8]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	88db      	ldrh	r3, [r3, #6]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	b29a      	uxth	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f000 f829 	bl	800299c <timeoutMclksToMicroseconds>
 800294a:	4602      	mov	r2, r0
  timeouts->final_range_us =
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	615a      	str	r2, [r3, #20]
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d108      	bne.n	800297a <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(vl53l0x_I2C_Read_Reg8(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8002968:	2050      	movs	r0, #80	; 0x50
 800296a:	f7ff fafb 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 800296e:	4603      	mov	r3, r0
 8002970:	3301      	adds	r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e00c      	b.n	8002994 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d108      	bne.n	8002992 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(vl53l0x_I2C_Read_Reg8(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8002980:	2070      	movs	r0, #112	; 0x70
 8002982:	f7ff faef 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 8002986:	4603      	mov	r3, r0
 8002988:	3301      	adds	r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e000      	b.n	8002994 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 8002992:	23ff      	movs	r3, #255	; 0xff
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	460a      	mov	r2, r1
 80029a6:	80fb      	strh	r3, [r7, #6]
 80029a8:	4613      	mov	r3, r2
 80029aa:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80029ac:	797b      	ldrb	r3, [r7, #5]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <timeoutMclksToMicroseconds+0x48>)
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <timeoutMclksToMicroseconds+0x4c>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	099b      	lsrs	r3, r3, #6
 80029c0:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	fb02 f203 	mul.w	r2, r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <timeoutMclksToMicroseconds+0x4c>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	099b      	lsrs	r3, r3, #6
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	003a2f00 	.word	0x003a2f00
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	0a12      	lsrs	r2, r2, #8
 80029fe:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002a00:	4093      	lsls	r3, r2
 8002a02:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002a04:	3301      	adds	r3, #1
 8002a06:	b29b      	uxth	r3, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <timeoutMicrosecondsToMclks+0x44>)
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <timeoutMicrosecondsToMclks+0x48>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a3c:	fb02 f203 	mul.w	r2, r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	441a      	add	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	003a2f00 	.word	0x003a2f00
 8002a5c:	10624dd3 	.word	0x10624dd3

08002a60 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d018      	beq.n	8002aaa <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002a7e:	e005      	b.n	8002a8c <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f4      	bne.n	8002a80 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	e000      	b.n	8002aac <encodeTimeout+0x4c>
  }
  else { return 0; }
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <performSingleRefCalibration>:

// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  vl53l0x_I2C_Write_Reg8(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7ff fa01 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

  startTimeout();
 8002ad2:	f7ff f9e7 	bl	8001ea4 <startTimeout>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002ad6:	e00e      	b.n	8002af6 <performSingleRefCalibration+0x3e>
  {
	   if (checkTimeoutExpired())
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <performSingleRefCalibration+0x68>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <performSingleRefCalibration+0x3e>
 8002ae0:	f7ff f9e7 	bl	8001eb2 <getTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <performSingleRefCalibration+0x68>)
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d903      	bls.n	8002af6 <performSingleRefCalibration+0x3e>
	   {
	    //  g_isTimeout = true;
		   stopTimeout();
 8002aee:	f7ff f9e8 	bl	8001ec2 <stopTimeout>
	       return false;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e010      	b.n	8002b18 <performSingleRefCalibration+0x60>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002af6:	2013      	movs	r0, #19
 8002af8:	f7ff fa34 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0e8      	beq.n	8002ad8 <performSingleRefCalibration+0x20>
	    }
  }

  vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002b06:	2101      	movs	r1, #1
 8002b08:	200b      	movs	r0, #11
 8002b0a:	f7ff f9e3 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

  vl53l0x_I2C_Write_Reg8(SYSRANGE_START, 0x00);
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff f9df 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>

  return true;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000004 	.word	0x20000004

08002b24 <vl53l0x_ReadRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t vl53l0x_ReadRangeContinuousMillimeters( statInfo_t *extraStats ) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  //todo: func ->startTimeout();
  startTimeout();
 8002b2c:	f7ff f9ba 	bl	8001ea4 <startTimeout>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0) { // wait for mesure complet
 8002b30:	e00f      	b.n	8002b52 <vl53l0x_ReadRangeContinuousMillimeters+0x2e>
   if (checkTimeoutExpired())
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <vl53l0x_ReadRangeContinuousMillimeters+0xcc>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <vl53l0x_ReadRangeContinuousMillimeters+0x2e>
 8002b3a:	f7ff f9ba 	bl	8001eb2 <getTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <vl53l0x_ReadRangeContinuousMillimeters+0xcc>)
 8002b42:	8812      	ldrh	r2, [r2, #0]
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d904      	bls.n	8002b52 <vl53l0x_ReadRangeContinuousMillimeters+0x2e>
   {
    //  g_isTimeout = true;
	   stopTimeout();
 8002b48:	f7ff f9bb 	bl	8001ec2 <stopTimeout>
       return 65535;
 8002b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b50:	e04a      	b.n	8002be8 <vl53l0x_ReadRangeContinuousMillimeters+0xc4>
  while ((vl53l0x_I2C_Read_Reg8(RESULT_INTERRUPT_STATUS) & 0x07) == 0) { // wait for mesure complet
 8002b52:	2013      	movs	r0, #19
 8002b54:	f7ff fa06 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0e7      	beq.n	8002b32 <vl53l0x_ReadRangeContinuousMillimeters+0xe>
    }
  }
  if( extraStats == 0 ){
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <vl53l0x_ReadRangeContinuousMillimeters+0x50>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = vl53l0x_I2C_Read_Reg16(RESULT_RANGE_STATUS + 10);
 8002b68:	201e      	movs	r0, #30
 8002b6a:	f7ff fa19 	bl	8001fa0 <vl53l0x_I2C_Read_Reg16>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	82fb      	strh	r3, [r7, #22]
 8002b72:	e034      	b.n	8002bde <vl53l0x_ReadRangeContinuousMillimeters+0xba>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
	vl53l0x_I2C_Read_MultiReg(0x14, tempBuffer, 12);
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	220c      	movs	r2, #12
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	2014      	movs	r0, #20
 8002b7e:	f7ff fa3f 	bl	8002000 <vl53l0x_I2C_Read_MultiReg>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8002b82:	7a3b      	ldrb	r3, [r7, #8]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8002b8c:	7abb      	ldrb	r3, [r7, #10]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8002ba0:	7bbb      	ldrb	r3, [r7, #14]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b21a      	sxth	r2, r3
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];
 8002bb4:	7c3b      	ldrb	r3, [r7, #16]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	7c7b      	ldrb	r3, [r7, #17]
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 8002bc8:	7cbb      	ldrb	r3, [r7, #18]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8afa      	ldrh	r2, [r7, #22]
 8002bdc:	801a      	strh	r2, [r3, #0]
  }
  vl53l0x_I2C_Write_Reg8(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002bde:	2101      	movs	r1, #1
 8002be0:	200b      	movs	r0, #11
 8002be2:	f7ff f977 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  return temp;
 8002be6:	8afb      	ldrh	r3, [r7, #22]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <vl53l0x_ReadRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t vl53l0x_ReadRangeSingleMillimeters( statInfo_t *extraStats ) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  vl53l0x_I2C_Write_Reg8(0x80, 0x01);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2080      	movs	r0, #128	; 0x80
 8002c00:	f7ff f968 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0xFF, 0x01);
 8002c04:	2101      	movs	r1, #1
 8002c06:	20ff      	movs	r0, #255	; 0xff
 8002c08:	f7ff f964 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x00, 0x00);
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7ff f960 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x91, init_stop_var);
 8002c14:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <vl53l0x_ReadRangeSingleMillimeters+0x94>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	2091      	movs	r0, #145	; 0x91
 8002c1c:	f7ff f95a 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x00, 0x01);
 8002c20:	2101      	movs	r1, #1
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7ff f956 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0xFF, 0x00);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	20ff      	movs	r0, #255	; 0xff
 8002c2c:	f7ff f952 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(0x80, 0x00);
 8002c30:	2100      	movs	r1, #0
 8002c32:	2080      	movs	r0, #128	; 0x80
 8002c34:	f7ff f94e 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  vl53l0x_I2C_Write_Reg8(SYSRANGE_START, 0x01);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7ff f94a 	bl	8001ed4 <vl53l0x_I2C_Write_Reg8>
  // "Wait until start bit has been cleared"
  startTimeout();
 8002c40:	f7ff f930 	bl	8001ea4 <startTimeout>
  while (vl53l0x_I2C_Read_Reg8(SYSRANGE_START) & 0x01){
 8002c44:	e00f      	b.n	8002c66 <vl53l0x_ReadRangeSingleMillimeters+0x72>
    if (checkTimeoutExpired())
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <vl53l0x_ReadRangeSingleMillimeters+0x98>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <vl53l0x_ReadRangeSingleMillimeters+0x72>
 8002c4e:	f7ff f930 	bl	8001eb2 <getTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <vl53l0x_ReadRangeSingleMillimeters+0x98>)
 8002c56:	8812      	ldrh	r2, [r2, #0]
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d904      	bls.n	8002c66 <vl53l0x_ReadRangeSingleMillimeters+0x72>
    {
    	//g_isTimeout = true;
    	stopTimeout();
 8002c5c:	f7ff f931 	bl	8001ec2 <stopTimeout>
    	return 65535;
 8002c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c64:	e00b      	b.n	8002c7e <vl53l0x_ReadRangeSingleMillimeters+0x8a>
  while (vl53l0x_I2C_Read_Reg8(SYSRANGE_START) & 0x01){
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff f97c 	bl	8001f64 <vl53l0x_I2C_Read_Reg8>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e7      	bne.n	8002c46 <vl53l0x_ReadRangeSingleMillimeters+0x52>
    }
  }
  return vl53l0x_ReadRangeContinuousMillimeters( extraStats );
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ff54 	bl	8002b24 <vl53l0x_ReadRangeContinuousMillimeters>
 8002c7c:	4603      	mov	r3, r0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000554 	.word	0x20000554
 8002c8c:	20000004 	.word	0x20000004

08002c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c96:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cac:	4c0b      	ldr	r4, [pc, #44]	; (8002cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cba:	f7fe fed7 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cbe:	f003 ff55 	bl	8006b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cc2:	f7fe fa81 	bl	80011c8 <main>
  bx  lr    
 8002cc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002cd4:	08009d64 	.word	0x08009d64
  ldr r2, =_sbss
 8002cd8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002cdc:	20000570 	.word	0x20000570

08002ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce0:	e7fe      	b.n	8002ce0 <ADC_IRQHandler>
	...

08002ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_Init+0x40>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_Init+0x40>)
 8002cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_Init+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_Init+0x40>)
 8002cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_Init+0x40>)
 8002d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f000 f92b 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f000 f808 	bl	8002d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d18:	f7fe fd82 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023c00 	.word	0x40023c00

08002d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_InitTick+0x54>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_InitTick+0x58>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f943 	bl	8002fd2 <HAL_SYSTICK_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00e      	b.n	8002d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d80a      	bhi.n	8002d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f000 f90b 	bl	8002f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d68:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <HAL_InitTick+0x5c>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000018 	.word	0x20000018
 8002d84:	20000014 	.word	0x20000014

08002d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_IncTick+0x20>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_IncTick+0x24>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_IncTick+0x24>)
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000018 	.word	0x20000018
 8002dac:	2000055c 	.word	0x2000055c

08002db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_GetTick+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2000055c 	.word	0x2000055c

08002dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <__NVIC_GetPriorityGrouping+0x18>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 0307 	and.w	r3, r3, #7
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	db0b      	blt.n	8002e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4907      	ldr	r1, [pc, #28]	; (8002e64 <__NVIC_EnableIRQ+0x38>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000e100 	.word	0xe000e100

08002e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db0a      	blt.n	8002e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	490c      	ldr	r1, [pc, #48]	; (8002eb4 <__NVIC_SetPriority+0x4c>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e90:	e00a      	b.n	8002ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <__NVIC_SetPriority+0x50>)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	761a      	strb	r2, [r3, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	bf28      	it	cs
 8002eda:	2304      	movcs	r3, #4
 8002edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <NVIC_EncodePriority+0x30>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3b03      	subs	r3, #3
 8002eea:	e000      	b.n	8002eee <NVIC_EncodePriority+0x32>
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	401a      	ands	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	4313      	orrs	r3, r2
         );
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f34:	d301      	bcc.n	8002f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00f      	b.n	8002f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <SysTick_Config+0x40>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f42:	210f      	movs	r1, #15
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f7ff ff8e 	bl	8002e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <SysTick_Config+0x40>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <SysTick_Config+0x40>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff29 	bl	8002dc8 <__NVIC_SetPriorityGrouping>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff3e 	bl	8002e10 <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff8e 	bl	8002ebc <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5d 	bl	8002e68 <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff31 	bl	8002e2c <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffa2 	bl	8002f24 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e159      	b.n	80032bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003008:	2201      	movs	r2, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	f040 8148 	bne.w	80032b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d005      	beq.n	800303e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303a:	2b02      	cmp	r3, #2
 800303c:	d130      	bne.n	80030a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0201 	and.w	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d017      	beq.n	80030dc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d123      	bne.n	8003130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	08da      	lsrs	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3208      	adds	r2, #8
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a2 	beq.w	80032b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <HAL_GPIO_Init+0x2e8>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4a56      	ldr	r2, [pc, #344]	; (80032d4 <HAL_GPIO_Init+0x2e8>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003180:	6453      	str	r3, [r2, #68]	; 0x44
 8003182:	4b54      	ldr	r3, [pc, #336]	; (80032d4 <HAL_GPIO_Init+0x2e8>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318e:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_GPIO_Init+0x2ec>)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a49      	ldr	r2, [pc, #292]	; (80032dc <HAL_GPIO_Init+0x2f0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x202>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a48      	ldr	r2, [pc, #288]	; (80032e0 <HAL_GPIO_Init+0x2f4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x1fe>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a47      	ldr	r2, [pc, #284]	; (80032e4 <HAL_GPIO_Init+0x2f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x1fa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a46      	ldr	r2, [pc, #280]	; (80032e8 <HAL_GPIO_Init+0x2fc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x1f6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a45      	ldr	r2, [pc, #276]	; (80032ec <HAL_GPIO_Init+0x300>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x1f2>
 80031da:	2304      	movs	r3, #4
 80031dc:	e008      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031de:	2307      	movs	r3, #7
 80031e0:	e006      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031e2:	2303      	movs	r3, #3
 80031e4:	e004      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e002      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031ee:	2300      	movs	r3, #0
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	f002 0203 	and.w	r2, r2, #3
 80031f6:	0092      	lsls	r2, r2, #2
 80031f8:	4093      	lsls	r3, r2
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003200:	4935      	ldr	r1, [pc, #212]	; (80032d8 <HAL_GPIO_Init+0x2ec>)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_GPIO_Init+0x304>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_GPIO_Init+0x304>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_GPIO_Init+0x304>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800325c:	4a24      	ldr	r2, [pc, #144]	; (80032f0 <HAL_GPIO_Init+0x304>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_GPIO_Init+0x304>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003286:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_GPIO_Init+0x304>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_GPIO_Init+0x304>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b0:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <HAL_GPIO_Init+0x304>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	f67f aea2 	bls.w	8003008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40020800 	.word	0x40020800
 80032e8:	40020c00 	.word	0x40020c00
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003310:	e003      	b.n	800331a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	041a      	lsls	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	619a      	str	r2, [r3, #24]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e171      	b.n	800361e <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d12c      	bne.n	80033a0 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a77      	ldr	r2, [pc, #476]	; (8003530 <HAL_I2C_Init+0x208>)
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a77      	ldr	r2, [pc, #476]	; (8003534 <HAL_I2C_Init+0x20c>)
 8003358:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a76      	ldr	r2, [pc, #472]	; (8003538 <HAL_I2C_Init+0x210>)
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a76      	ldr	r2, [pc, #472]	; (800353c <HAL_I2C_Init+0x214>)
 8003364:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_I2C_Init+0x218>)
 800336a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_I2C_Init+0x21c>)
 8003370:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a74      	ldr	r2, [pc, #464]	; (8003548 <HAL_I2C_Init+0x220>)
 8003376:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a74      	ldr	r2, [pc, #464]	; (800354c <HAL_I2C_Init+0x224>)
 800337c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a73      	ldr	r2, [pc, #460]	; (8003550 <HAL_I2C_Init+0x228>)
 8003382:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a73      	ldr	r2, [pc, #460]	; (8003554 <HAL_I2C_Init+0x22c>)
 8003388:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a70      	ldr	r2, [pc, #448]	; (8003558 <HAL_I2C_Init+0x230>)
 8003396:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d8:	f001 fd58 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a5e      	ldr	r2, [pc, #376]	; (800355c <HAL_I2C_Init+0x234>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d807      	bhi.n	80033f8 <HAL_I2C_Init+0xd0>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a5d      	ldr	r2, [pc, #372]	; (8003560 <HAL_I2C_Init+0x238>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e006      	b.n	8003406 <HAL_I2C_Init+0xde>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a5a      	ldr	r2, [pc, #360]	; (8003564 <HAL_I2C_Init+0x23c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e107      	b.n	800361e <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a55      	ldr	r2, [pc, #340]	; (8003568 <HAL_I2C_Init+0x240>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a47      	ldr	r2, [pc, #284]	; (800355c <HAL_I2C_Init+0x234>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d802      	bhi.n	8003448 <HAL_I2C_Init+0x120>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	e009      	b.n	800345c <HAL_I2C_Init+0x134>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a46      	ldr	r2, [pc, #280]	; (800356c <HAL_I2C_Init+0x244>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800346e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4939      	ldr	r1, [pc, #228]	; (800355c <HAL_I2C_Init+0x234>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d819      	bhi.n	80034b0 <HAL_I2C_Init+0x188>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e59      	subs	r1, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb1 f3f3 	udiv	r3, r1, r3
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003490:	400b      	ands	r3, r1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_I2C_Init+0x184>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	e071      	b.n	8003590 <HAL_I2C_Init+0x268>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e06f      	b.n	8003590 <HAL_I2C_Init+0x268>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_I2C_Init+0x1b4>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_I2C_Init+0x1da>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x1e2>
 8003506:	2301      	movs	r3, #1
 8003508:	e042      	b.n	8003590 <HAL_I2C_Init+0x268>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d12e      	bne.n	8003570 <HAL_I2C_Init+0x248>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e58      	subs	r0, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352e:	e02f      	b.n	8003590 <HAL_I2C_Init+0x268>
 8003530:	08003ec5 	.word	0x08003ec5
 8003534:	08003ed9 	.word	0x08003ed9
 8003538:	08003eed 	.word	0x08003eed
 800353c:	08003f01 	.word	0x08003f01
 8003540:	08003f31 	.word	0x08003f31
 8003544:	08003f45 	.word	0x08003f45
 8003548:	08003f59 	.word	0x08003f59
 800354c:	08003f6d 	.word	0x08003f6d
 8003550:	08003f81 	.word	0x08003f81
 8003554:	08003f15 	.word	0x08003f15
 8003558:	080010e9 	.word	0x080010e9
 800355c:	000186a0 	.word	0x000186a0
 8003560:	001e847f 	.word	0x001e847f
 8003564:	003d08ff 	.word	0x003d08ff
 8003568:	431bde83 	.word	0x431bde83
 800356c:	10624dd3 	.word	0x10624dd3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	6809      	ldr	r1, [r1, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6911      	ldr	r1, [r2, #16]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop

08003628 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	460b      	mov	r3, r1
 800363c:	813b      	strh	r3, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003642:	f7ff fbb5 	bl	8002db0 <HAL_GetTick>
 8003646:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b20      	cmp	r3, #32
 8003652:	f040 80d9 	bne.w	8003808 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2319      	movs	r3, #25
 800365c:	2201      	movs	r2, #1
 800365e:	496d      	ldr	r1, [pc, #436]	; (8003814 <HAL_I2C_Mem_Write+0x1ec>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fe15 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
 800366e:	e0cc      	b.n	800380a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_I2C_Mem_Write+0x56>
 800367a:	2302      	movs	r3, #2
 800367c:	e0c5      	b.n	800380a <HAL_I2C_Mem_Write+0x1e2>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d007      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2221      	movs	r2, #33	; 0x21
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a4d      	ldr	r2, [pc, #308]	; (8003818 <HAL_I2C_Mem_Write+0x1f0>)
 80036e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e6:	88f8      	ldrh	r0, [r7, #6]
 80036e8:	893a      	ldrh	r2, [r7, #8]
 80036ea:	8979      	ldrh	r1, [r7, #10]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4603      	mov	r3, r0
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fc4c 	bl	8003f94 <I2C_RequestMemoryWrite>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d052      	beq.n	80037a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e081      	b.n	800380a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fe96 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b04      	cmp	r3, #4
 800371c:	d107      	bne.n	800372e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06b      	b.n	800380a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d11b      	bne.n	80037a8 <HAL_I2C_Mem_Write+0x180>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1aa      	bne.n	8003706 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fe82 	bl	80044be <I2C_WaitOnBTFFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d107      	bne.n	80037d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e016      	b.n	800380a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	00100002 	.word	0x00100002
 8003818:	ffff0000 	.word	0xffff0000

0800381c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	; 0x30
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	461a      	mov	r2, r3
 800382a:	4603      	mov	r3, r0
 800382c:	817b      	strh	r3, [r7, #10]
 800382e:	460b      	mov	r3, r1
 8003830:	813b      	strh	r3, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003836:	f7ff fabb 	bl	8002db0 <HAL_GetTick>
 800383a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b20      	cmp	r3, #32
 8003846:	f040 8208 	bne.w	8003c5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2319      	movs	r3, #25
 8003850:	2201      	movs	r2, #1
 8003852:	497b      	ldr	r1, [pc, #492]	; (8003a40 <HAL_I2C_Mem_Read+0x224>)
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fd1b 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	e1fb      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Mem_Read+0x56>
 800386e:	2302      	movs	r3, #2
 8003870:	e1f4      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d007      	beq.n	8003898 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2222      	movs	r2, #34	; 0x22
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a5b      	ldr	r2, [pc, #364]	; (8003a44 <HAL_I2C_Mem_Read+0x228>)
 80038d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038da:	88f8      	ldrh	r0, [r7, #6]
 80038dc:	893a      	ldrh	r2, [r7, #8]
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4603      	mov	r3, r0
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fbe8 	bl	80040c0 <I2C_RequestMemoryRead>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1b0      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d113      	bne.n	800392a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	623b      	str	r3, [r7, #32]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e184      	b.n	8003c34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	2b01      	cmp	r3, #1
 8003930:	d11b      	bne.n	800396a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e164      	b.n	8003c34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	2b02      	cmp	r3, #2
 8003970:	d11b      	bne.n	80039aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003980:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003990:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	e144      	b.n	8003c34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039c0:	e138      	b.n	8003c34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	f200 80f1 	bhi.w	8003bae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d123      	bne.n	8003a1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fdb1 	bl	8004540 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e139      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a1a:	e10b      	b.n	8003c34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d14e      	bne.n	8003ac2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4906      	ldr	r1, [pc, #24]	; (8003a48 <HAL_I2C_Mem_Read+0x22c>)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fc2e 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e10e      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
 8003a3e:	bf00      	nop
 8003a40:	00100002 	.word	0x00100002
 8003a44:	ffff0000 	.word	0xffff0000
 8003a48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac0:	e0b8      	b.n	8003c34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4966      	ldr	r1, [pc, #408]	; (8003c64 <HAL_I2C_Mem_Read+0x448>)
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fbdf 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0bf      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	2200      	movs	r2, #0
 8003b26:	494f      	ldr	r1, [pc, #316]	; (8003c64 <HAL_I2C_Mem_Read+0x448>)
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fbb1 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e091      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bac:	e042      	b.n	8003c34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fcc4 	bl	8004540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e04c      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d118      	bne.n	8003c34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f47f aec2 	bne.w	80039c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
  }
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	00010004 	.word	0x00010004

08003c68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	460b      	mov	r3, r1
 8003c76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7ff f89a 	bl	8002db0 <HAL_GetTick>
 8003c7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	f040 8111 	bne.w	8003eb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2319      	movs	r3, #25
 8003c96:	2201      	movs	r2, #1
 8003c98:	4988      	ldr	r1, [pc, #544]	; (8003ebc <HAL_I2C_IsDeviceReady+0x254>)
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 faf8 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e104      	b.n	8003eb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_I2C_IsDeviceReady+0x50>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0fd      	b.n	8003eb4 <HAL_I2C_IsDeviceReady+0x24c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d007      	beq.n	8003cde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2224      	movs	r2, #36	; 0x24
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a70      	ldr	r2, [pc, #448]	; (8003ec0 <HAL_I2C_IsDeviceReady+0x258>)
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fab6 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d38:	d103      	bne.n	8003d42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0b6      	b.n	8003eb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d56:	f7ff f82b 	bl	8002db0 <HAL_GetTick>
 8003d5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	bf0c      	ite	eq
 8003d82:	2301      	moveq	r3, #1
 8003d84:	2300      	movne	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d8a:	e025      	b.n	8003dd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d8c:	f7ff f810 	bl	8002db0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d302      	bcc.n	8003da2 <HAL_I2C_IsDeviceReady+0x13a>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	22a0      	movs	r2, #160	; 0xa0
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2ba0      	cmp	r3, #160	; 0xa0
 8003de2:	d005      	beq.n	8003df0 <HAL_I2C_IsDeviceReady+0x188>
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <HAL_I2C_IsDeviceReady+0x188>
 8003dea:	7dbb      	ldrb	r3, [r7, #22]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0cd      	beq.n	8003d8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d129      	bne.n	8003e5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2319      	movs	r3, #25
 8003e32:	2201      	movs	r2, #1
 8003e34:	4921      	ldr	r1, [pc, #132]	; (8003ebc <HAL_I2C_IsDeviceReady+0x254>)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fa2a 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e036      	b.n	8003eb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e02c      	b.n	8003eb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2319      	movs	r3, #25
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	490f      	ldr	r1, [pc, #60]	; (8003ebc <HAL_I2C_IsDeviceReady+0x254>)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa06 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e012      	b.n	8003eb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	f4ff af32 	bcc.w	8003d02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	00100002 	.word	0x00100002
 8003ec0:	ffff0000 	.word	0xffff0000

08003ec4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
 8003f20:	4613      	mov	r3, r2
 8003f22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	817b      	strh	r3, [r7, #10]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	813b      	strh	r3, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f960 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe4:	d103      	bne.n	8003fee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e05f      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004000:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	6a3a      	ldr	r2, [r7, #32]
 8004006:	492d      	ldr	r1, [pc, #180]	; (80040bc <I2C_RequestMemoryWrite+0x128>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f998 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e04c      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	6a39      	ldr	r1, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fa02 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b04      	cmp	r3, #4
 8004044:	d107      	bne.n	8004056 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004054:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e02b      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004060:	893b      	ldrh	r3, [r7, #8]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]
 800406a:	e021      	b.n	80040b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800406c:	893b      	ldrh	r3, [r7, #8]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f9dc 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e005      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a6:	893b      	ldrh	r3, [r7, #8]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	00010002 	.word	0x00010002

080040c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2200      	movs	r2, #0
 8004102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f8c2 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004120:	d103      	bne.n	800412a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0aa      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800412e:	897b      	ldrh	r3, [r7, #10]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800413c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	4952      	ldr	r1, [pc, #328]	; (800428c <I2C_RequestMemoryRead+0x1cc>)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f8fa 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e097      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	6a39      	ldr	r1, [r7, #32]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f964 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b04      	cmp	r3, #4
 8004180:	d107      	bne.n	8004192 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e076      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
 80041a6:	e021      	b.n	80041ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b8:	6a39      	ldr	r1, [r7, #32]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f93e 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d107      	bne.n	80041de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e050      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	6a39      	ldr	r1, [r7, #32]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f923 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	2b04      	cmp	r3, #4
 8004202:	d107      	bne.n	8004214 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e035      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004226:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	2200      	movs	r2, #0
 8004230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f82b 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424e:	d103      	bne.n	8004258 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e013      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800425c:	897b      	ldrh	r3, [r7, #10]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	4906      	ldr	r1, [pc, #24]	; (800428c <I2C_RequestMemoryRead+0x1cc>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f863 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	00010002 	.word	0x00010002

08004290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a0:	e025      	b.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d021      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fe fd81 	bl	8002db0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e023      	b.n	8004336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10d      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	e00c      	b.n	800432e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	429a      	cmp	r2, r3
 8004332:	d0b6      	beq.n	80042a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434c:	e051      	b.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d123      	bne.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e046      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d021      	beq.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fe fcff 	bl	8002db0 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e020      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10c      	bne.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e00b      	b.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	43da      	mvns	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d18d      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004448:	e02d      	b.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f8ce 	bl	80045ec <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e02d      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d021      	beq.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fe fca5 	bl	8002db0 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d1ca      	bne.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ca:	e02d      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f88d 	bl	80045ec <I2C_IsAcknowledgeFailed>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e02d      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d021      	beq.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fe fc64 	bl	8002db0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e007      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d1ca      	bne.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800454c:	e042      	b.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d119      	bne.n	8004590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0210 	mvn.w	r2, #16
 8004564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e029      	b.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004590:	f7fe fc0e 	bl	8002db0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e007      	b.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d1b5      	bne.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d11b      	bne.n	800463c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800460c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 0204 	orr.w	r2, r3, #4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e264      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d075      	beq.n	8004756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466a:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4ba0      	ldr	r3, [pc, #640]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d112      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468e:	d10b      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	4b99      	ldr	r3, [pc, #612]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05b      	beq.n	8004754 <HAL_RCC_OscConfig+0x108>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d157      	bne.n	8004754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e23f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d106      	bne.n	80046c0 <HAL_RCC_OscConfig+0x74>
 80046b2:	4b91      	ldr	r3, [pc, #580]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a90      	ldr	r2, [pc, #576]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e01d      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x98>
 80046ca:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a8a      	ldr	r2, [pc, #552]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a87      	ldr	r2, [pc, #540]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046e4:	4b84      	ldr	r3, [pc, #528]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a83      	ldr	r2, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a80      	ldr	r2, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fe fb54 	bl	8002db0 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fe fb50 	bl	8002db0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e204      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0xc0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fe fb40 	bl	8002db0 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004734:	f7fe fb3c 	bl	8002db0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e1f0      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0xe8>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d063      	beq.n	800482a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b5f      	ldr	r3, [pc, #380]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	4b5c      	ldr	r3, [pc, #368]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1c4      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4952      	ldr	r1, [pc, #328]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	e03a      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fe faf5 	bl	8002db0 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fe faf1 	bl	8002db0 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1a5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4940      	ldr	r1, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe fad4 	bl	8002db0 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480c:	f7fe fad0 	bl	8002db0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e184      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d030      	beq.n	8004898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fe fab4 	bl	8002db0 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484c:	f7fe fab0 	bl	8002db0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e164      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x200>
 800486a:	e015      	b.n	8004898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004872:	f7fe fa9d 	bl	8002db0 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487a:	f7fe fa99 	bl	8002db0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e14d      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a0 	beq.w	80049e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a07      	ldr	r2, [pc, #28]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fe fa5f 	bl	8002db0 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e011      	b.n	800491a <HAL_RCC_OscConfig+0x2ce>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
 8004904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004908:	f7fe fa52 	bl	8002db0 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e106      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCC_OscConfig+0x4e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x2f0>
 800492e:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x312>
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800495e:	4b75      	ldr	r3, [pc, #468]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a71      	ldr	r2, [pc, #452]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fe fa17 	bl	8002db0 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fe fa13 	bl	8002db0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0c5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x33a>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fe fa01 	bl	8002db0 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fe f9fd 	bl	8002db0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0af      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 809b 	beq.w	8004b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d05c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d141      	bne.n	8004a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fe f9d1 	bl	8002db0 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fe f9cd 	bl	8002db0 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e081      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	019b      	lsls	r3, r3, #6
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	4937      	ldr	r1, [pc, #220]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fe f9a6 	bl	8002db0 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fe f9a2 	bl	8002db0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e056      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x41c>
 8004a86:	e04e      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fe f98f 	bl	8002db0 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fe f98b 	bl	8002db0 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e03f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x44a>
 8004ab4:	e037      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e032      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d028      	beq.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11a      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40007000 	.word	0x40007000
 8004b34:	40023800 	.word	0x40023800
 8004b38:	42470060 	.word	0x42470060

08004b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cc      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d90c      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d044      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d119      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e06f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e067      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1a:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c2c:	f7fe f8c0 	bl	8002db0 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fe f8bc 	bl	8002db0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e04f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 020c 	and.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1eb      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d20c      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe f820 	bl	8002d28 <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	0800995c 	.word	0x0800995c
 8004d00:	20000000 	.word	0x20000000
 8004d04:	20000014 	.word	0x20000014

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6079      	str	r1, [r7, #4]
 8004d12:	2100      	movs	r1, #0
 8004d14:	60f9      	str	r1, [r7, #12]
 8004d16:	2100      	movs	r1, #0
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d1e:	4952      	ldr	r1, [pc, #328]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d20:	6889      	ldr	r1, [r1, #8]
 8004d22:	f001 010c 	and.w	r1, r1, #12
 8004d26:	2908      	cmp	r1, #8
 8004d28:	d00d      	beq.n	8004d46 <HAL_RCC_GetSysClockFreq+0x3e>
 8004d2a:	2908      	cmp	r1, #8
 8004d2c:	f200 8094 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x150>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x32>
 8004d34:	2904      	cmp	r1, #4
 8004d36:	d003      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x38>
 8004d38:	e08e      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d3a:	4b4c      	ldr	r3, [pc, #304]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004d3c:	60bb      	str	r3, [r7, #8]
       break;
 8004d3e:	e08e      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d40:	4b4b      	ldr	r3, [pc, #300]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d42:	60bb      	str	r3, [r7, #8]
      break;
 8004d44:	e08b      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d46:	4948      	ldr	r1, [pc, #288]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d48:	6849      	ldr	r1, [r1, #4]
 8004d4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004d4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d50:	4945      	ldr	r1, [pc, #276]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d52:	6849      	ldr	r1, [r1, #4]
 8004d54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d024      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	4942      	ldr	r1, [pc, #264]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d5e:	6849      	ldr	r1, [r1, #4]
 8004d60:	0989      	lsrs	r1, r1, #6
 8004d62:	4608      	mov	r0, r1
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d6c:	f04f 0500 	mov.w	r5, #0
 8004d70:	ea00 0204 	and.w	r2, r0, r4
 8004d74:	ea01 0305 	and.w	r3, r1, r5
 8004d78:	493d      	ldr	r1, [pc, #244]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d7a:	fb01 f003 	mul.w	r0, r1, r3
 8004d7e:	2100      	movs	r1, #0
 8004d80:	fb01 f102 	mul.w	r1, r1, r2
 8004d84:	1844      	adds	r4, r0, r1
 8004d86:	493a      	ldr	r1, [pc, #232]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d88:	fba2 0101 	umull	r0, r1, r2, r1
 8004d8c:	1863      	adds	r3, r4, r1
 8004d8e:	4619      	mov	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	f7fb ff5e 	bl	8000c58 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e04a      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	461a      	mov	r2, r3
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	ea02 0400 	and.w	r4, r2, r0
 8004dbe:	ea03 0501 	and.w	r5, r3, r1
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	014b      	lsls	r3, r1, #5
 8004dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd4:	0142      	lsls	r2, r0, #5
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	1b00      	subs	r0, r0, r4
 8004ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	018b      	lsls	r3, r1, #6
 8004dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dee:	0182      	lsls	r2, r0, #6
 8004df0:	1a12      	subs	r2, r2, r0
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	00d9      	lsls	r1, r3, #3
 8004e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e04:	00d0      	lsls	r0, r2, #3
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	1912      	adds	r2, r2, r4
 8004e0c:	eb45 0303 	adc.w	r3, r5, r3
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	0299      	lsls	r1, r3, #10
 8004e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e1e:	0290      	lsls	r0, r2, #10
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	f7fb ff12 	bl	8000c58 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004e5a:	60bb      	str	r3, [r7, #8]
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bdb0      	pop	{r4, r5, r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	017d7840 	.word	0x017d7840

08004e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000000 	.word	0x20000000

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a9b      	lsrs	r3, r3, #10
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0800996c 	.word	0x0800996c

08004eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eb8:	f7ff ffdc 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0b5b      	lsrs	r3, r3, #13
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4903      	ldr	r1, [pc, #12]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0800996c 	.word	0x0800996c

08004edc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d038      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f04:	4b68      	ldr	r3, [pc, #416]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f0a:	f7fd ff51 	bl	8002db0 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f12:	f7fd ff4d 	bl	8002db0 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0bd      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f24:	4b61      	ldr	r3, [pc, #388]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	495a      	ldr	r1, [pc, #360]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f4a:	4b57      	ldr	r3, [pc, #348]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f50:	f7fd ff2e 	bl	8002db0 <HAL_GetTick>
 8004f54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f58:	f7fd ff2a 	bl	8002db0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e09a      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f6a:	4b50      	ldr	r3, [pc, #320]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8083 	beq.w	800508a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	4b48      	ldr	r3, [pc, #288]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	4a47      	ldr	r2, [pc, #284]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f92:	6413      	str	r3, [r2, #64]	; 0x40
 8004f94:	4b45      	ldr	r3, [pc, #276]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fa0:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a42      	ldr	r2, [pc, #264]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004faa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fac:	f7fd ff00 	bl	8002db0 <HAL_GetTick>
 8004fb0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fb4:	f7fd fefc 	bl	8002db0 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e06c      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fc6:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd2:	4b36      	ldr	r3, [pc, #216]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fda:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02f      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d028      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff0:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005000:	4b2c      	ldr	r3, [pc, #176]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005006:	4a29      	ldr	r2, [pc, #164]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800500c:	4b27      	ldr	r3, [pc, #156]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d114      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005018:	f7fd feca 	bl	8002db0 <HAL_GetTick>
 800501c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501e:	e00a      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7fd fec6 	bl	8002db0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	; 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e034      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0ee      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504e:	d10d      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005050:	4b16      	ldr	r3, [pc, #88]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005064:	4911      	ldr	r1, [pc, #68]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
 800506a:	e005      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005072:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005076:	6093      	str	r3, [r2, #8]
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005084:	4909      	ldr	r1, [pc, #36]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	4313      	orrs	r3, r2
 8005088:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7d1a      	ldrb	r2, [r3, #20]
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800509c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	42470068 	.word	0x42470068
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40007000 	.word	0x40007000
 80050b4:	42470e40 	.word	0x42470e40
 80050b8:	424711e0 	.word	0x424711e0

080050bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e083      	b.n	80051d6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	7f5b      	ldrb	r3, [r3, #29]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d105      	bne.n	80050e4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc fb88 	bl	80017f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	22ca      	movs	r2, #202	; 0xca
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2253      	movs	r2, #83	; 0x53
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f897 	bl	800522e <RTC_EnterInitMode>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	22ff      	movs	r2, #255	; 0xff
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2204      	movs	r2, #4
 8005112:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e05e      	b.n	80051d6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6899      	ldr	r1, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68d2      	ldr	r2, [r2, #12]
 8005152:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6919      	ldr	r1, [r3, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	041a      	lsls	r2, r3, #16
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005176:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10e      	bne.n	80051a4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f829 	bl	80051de <HAL_RTC_WaitForSynchro>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	22ff      	movs	r2, #255	; 0xff
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e018      	b.n	80051d6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	22ff      	movs	r2, #255	; 0xff
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051fa:	f7fd fdd9 	bl	8002db0 <HAL_GetTick>
 80051fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005200:	e009      	b.n	8005216 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005202:	f7fd fdd5 	bl	8002db0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005210:	d901      	bls.n	8005216 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e007      	b.n	8005226 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ee      	beq.n	8005202 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d119      	bne.n	800527c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fd fdad 	bl	8002db0 <HAL_GetTick>
 8005256:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005258:	e009      	b.n	800526e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800525a:	f7fd fda9 	bl	8002db0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005268:	d901      	bls.n	800526e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e007      	b.n	800527e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0ee      	beq.n	800525a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e04c      	b.n	8005334 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d111      	bne.n	80052ca <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 ff8e 	bl	80061d0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HAL_TIM_Base_Init+0xb4>)
 80052c0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 fcab 	bl	8005c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	08001cb5 	.word	0x08001cb5

08005340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d001      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e044      	b.n	80053e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d018      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x6c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005382:	d013      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x6c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00e      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x6c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x6c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a17      	ldr	r2, [pc, #92]	; (80053fc <HAL_TIM_Base_Start_IT+0xbc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x6c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a16      	ldr	r2, [pc, #88]	; (8005400 <HAL_TIM_Base_Start_IT+0xc0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d111      	bne.n	80053d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b06      	cmp	r3, #6
 80053bc:	d010      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	e007      	b.n	80053e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40000c00 	.word	0x40000c00
 8005400:	40014000 	.word	0x40014000

08005404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e04c      	b.n	80054b0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d111      	bne.n	8005446 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fed0 	bl	80061d0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <HAL_TIM_PWM_Init+0xb4>)
 800543c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3304      	adds	r3, #4
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f000 fbed 	bl	8005c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	080054bd 	.word	0x080054bd

080054bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_TIM_PWM_Start+0x24>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e022      	b.n	800553a <HAL_TIM_PWM_Start+0x6a>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d109      	bne.n	800550e <HAL_TIM_PWM_Start+0x3e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e015      	b.n	800553a <HAL_TIM_PWM_Start+0x6a>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d109      	bne.n	8005528 <HAL_TIM_PWM_Start+0x58>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e008      	b.n	800553a <HAL_TIM_PWM_Start+0x6a>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e068      	b.n	8005614 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0x82>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005550:	e013      	b.n	800557a <HAL_TIM_PWM_Start+0xaa>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b04      	cmp	r3, #4
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start+0x92>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005560:	e00b      	b.n	800557a <HAL_TIM_PWM_Start+0xaa>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d104      	bne.n	8005572 <HAL_TIM_PWM_Start+0xa2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005570:	e003      	b.n	800557a <HAL_TIM_PWM_Start+0xaa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2201      	movs	r2, #1
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fdfe 	bl	8006184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a23      	ldr	r2, [pc, #140]	; (800561c <HAL_TIM_PWM_Start+0x14c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d107      	bne.n	80055a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1d      	ldr	r2, [pc, #116]	; (800561c <HAL_TIM_PWM_Start+0x14c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_TIM_PWM_Start+0x10e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d013      	beq.n	80055de <HAL_TIM_PWM_Start+0x10e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_TIM_PWM_Start+0x150>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_TIM_PWM_Start+0x10e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <HAL_TIM_PWM_Start+0x154>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_TIM_PWM_Start+0x10e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a16      	ldr	r2, [pc, #88]	; (8005628 <HAL_TIM_PWM_Start+0x158>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_TIM_PWM_Start+0x10e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <HAL_TIM_PWM_Start+0x15c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d111      	bne.n	8005602 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b06      	cmp	r3, #6
 80055ee:	d010      	beq.n	8005612 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005600:	e007      	b.n	8005612 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40014000 	.word	0x40014000

08005630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d128      	bne.n	8005698 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b02      	cmp	r3, #2
 8005652:	d121      	bne.n	8005698 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0202 	mvn.w	r2, #2
 800565c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
 800567c:	e009      	b.n	8005692 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d128      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d121      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0204 	mvn.w	r2, #4
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
 80056dc:	e009      	b.n	80056f2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b08      	cmp	r3, #8
 8005704:	d128      	bne.n	8005758 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d121      	bne.n	8005758 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0208 	mvn.w	r2, #8
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2204      	movs	r2, #4
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
 800573c:	e009      	b.n	8005752 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d128      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d121      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0210 	mvn.w	r2, #16
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2208      	movs	r2, #8
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
 800579c:	e009      	b.n	80057b2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d110      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d109      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0201 	mvn.w	r2, #1
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d110      	bne.n	8005818 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d109      	bne.n	8005818 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800580c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d110      	bne.n	8005848 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d109      	bne.n	8005848 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800583c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b20      	cmp	r3, #32
 8005854:	d110      	bne.n	8005878 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b20      	cmp	r3, #32
 8005862:	d109      	bne.n	8005878 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0220 	mvn.w	r2, #32
 800586c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005896:	2302      	movs	r3, #2
 8005898:	e0ac      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b0c      	cmp	r3, #12
 80058a6:	f200 809f 	bhi.w	80059e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	080059e9 	.word	0x080059e9
 80058b8:	080059e9 	.word	0x080059e9
 80058bc:	080059e9 	.word	0x080059e9
 80058c0:	08005925 	.word	0x08005925
 80058c4:	080059e9 	.word	0x080059e9
 80058c8:	080059e9 	.word	0x080059e9
 80058cc:	080059e9 	.word	0x080059e9
 80058d0:	08005967 	.word	0x08005967
 80058d4:	080059e9 	.word	0x080059e9
 80058d8:	080059e9 	.word	0x080059e9
 80058dc:	080059e9 	.word	0x080059e9
 80058e0:	080059a7 	.word	0x080059a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fa24 	bl	8005d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0208 	orr.w	r2, r2, #8
 80058fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0204 	bic.w	r2, r2, #4
 800590e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	619a      	str	r2, [r3, #24]
      break;
 8005922:	e062      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fa6a 	bl	8005e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6999      	ldr	r1, [r3, #24]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	021a      	lsls	r2, r3, #8
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	619a      	str	r2, [r3, #24]
      break;
 8005964:	e041      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fab5 	bl	8005edc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0208 	orr.w	r2, r2, #8
 8005980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0204 	bic.w	r2, r2, #4
 8005990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69d9      	ldr	r1, [r3, #28]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	61da      	str	r2, [r3, #28]
      break;
 80059a4:	e021      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 faff 	bl	8005fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69d9      	ldr	r1, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	021a      	lsls	r2, r3, #8
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	61da      	str	r2, [r3, #28]
      break;
 80059e6:	e000      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80059e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIM_ConfigClockSource+0x18>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e0b3      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x180>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4c:	d03e      	beq.n	8005acc <HAL_TIM_ConfigClockSource+0xd0>
 8005a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a52:	f200 8087 	bhi.w	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	f000 8085 	beq.w	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	d87f      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a64:	2b70      	cmp	r3, #112	; 0x70
 8005a66:	d01a      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0xa2>
 8005a68:	2b70      	cmp	r3, #112	; 0x70
 8005a6a:	d87b      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a6c:	2b60      	cmp	r3, #96	; 0x60
 8005a6e:	d050      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x116>
 8005a70:	2b60      	cmp	r3, #96	; 0x60
 8005a72:	d877      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a74:	2b50      	cmp	r3, #80	; 0x50
 8005a76:	d03c      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0xf6>
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d873      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d058      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0x136>
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d86f      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a84:	2b30      	cmp	r3, #48	; 0x30
 8005a86:	d064      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x156>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d86b      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d060      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x156>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d867      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d05c      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x156>
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d05a      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a9c:	e062      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6899      	ldr	r1, [r3, #8]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f000 fb49 	bl	8006144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	609a      	str	r2, [r3, #8]
      break;
 8005aca:	e04e      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6899      	ldr	r1, [r3, #8]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f000 fb32 	bl	8006144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aee:	609a      	str	r2, [r3, #8]
      break;
 8005af0:	e03b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6859      	ldr	r1, [r3, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f000 faa6 	bl	8006050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2150      	movs	r1, #80	; 0x50
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 faff 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005b10:	e02b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6859      	ldr	r1, [r3, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f000 fac5 	bl	80060ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2160      	movs	r1, #96	; 0x60
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 faef 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005b30:	e01b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f000 fa86 	bl	8006050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2140      	movs	r1, #64	; 0x40
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fadf 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005b50:	e00b      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f000 fad6 	bl	800610e <TIM_ITRx_SetConfig>
        break;
 8005b62:	e002      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b64:	bf00      	nop
 8005b66:	e000      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a34      	ldr	r2, [pc, #208]	; (8005d1c <TIM_Base_SetConfig+0xe4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c56:	d00b      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a31      	ldr	r2, [pc, #196]	; (8005d20 <TIM_Base_SetConfig+0xe8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <TIM_Base_SetConfig+0xec>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <TIM_Base_SetConfig+0xf0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d108      	bne.n	8005c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <TIM_Base_SetConfig+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01b      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c90:	d017      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <TIM_Base_SetConfig+0xe8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <TIM_Base_SetConfig+0xec>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00f      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <TIM_Base_SetConfig+0xf0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <TIM_Base_SetConfig+0xf4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <TIM_Base_SetConfig+0xf8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <TIM_Base_SetConfig+0xfc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d108      	bne.n	8005cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <TIM_Base_SetConfig+0xe4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 0302 	bic.w	r3, r3, #2
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <TIM_OC1_SetConfig+0xc8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d10c      	bne.n	8005dae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f023 0308 	bic.w	r3, r3, #8
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <TIM_OC1_SetConfig+0xc8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000

08005e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0210 	bic.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0320 	bic.w	r3, r3, #32
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <TIM_OC2_SetConfig+0xd4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10d      	bne.n	8005e80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <TIM_OC2_SetConfig+0xd4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d113      	bne.n	8005eb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000

08005edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <TIM_OC3_SetConfig+0xd0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10d      	bne.n	8005f56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a14      	ldr	r2, [pc, #80]	; (8005fac <TIM_OC3_SetConfig+0xd0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d113      	bne.n	8005f86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000

08005fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	031b      	lsls	r3, r3, #12
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <TIM_OC4_SetConfig+0x9c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d109      	bne.n	8006024 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000

08006050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f023 0201 	bic.w	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f023 030a 	bic.w	r3, r3, #10
 800608c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b087      	sub	sp, #28
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f023 0210 	bic.w	r2, r3, #16
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	031b      	lsls	r3, r3, #12
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	f043 0307 	orr.w	r3, r3, #7
 8006130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	431a      	orrs	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	609a      	str	r2, [r3, #8]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	2201      	movs	r2, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	401a      	ands	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	431a      	orrs	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a1c      	ldr	r2, [pc, #112]	; (800624c <TIM_ResetCallback+0x7c>)
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <TIM_ResetCallback+0x80>)
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a1a      	ldr	r2, [pc, #104]	; (8006254 <TIM_ResetCallback+0x84>)
 80061ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a19      	ldr	r2, [pc, #100]	; (8006258 <TIM_ResetCallback+0x88>)
 80061f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a18      	ldr	r2, [pc, #96]	; (800625c <TIM_ResetCallback+0x8c>)
 80061fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a17      	ldr	r2, [pc, #92]	; (8006260 <TIM_ResetCallback+0x90>)
 8006204:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a16      	ldr	r2, [pc, #88]	; (8006264 <TIM_ResetCallback+0x94>)
 800620c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a15      	ldr	r2, [pc, #84]	; (8006268 <TIM_ResetCallback+0x98>)
 8006214:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a14      	ldr	r2, [pc, #80]	; (800626c <TIM_ResetCallback+0x9c>)
 800621c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a13      	ldr	r2, [pc, #76]	; (8006270 <TIM_ResetCallback+0xa0>)
 8006224:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a12      	ldr	r2, [pc, #72]	; (8006274 <TIM_ResetCallback+0xa4>)
 800622c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a11      	ldr	r2, [pc, #68]	; (8006278 <TIM_ResetCallback+0xa8>)
 8006234:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a10      	ldr	r2, [pc, #64]	; (800627c <TIM_ResetCallback+0xac>)
 800623c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	080014a5 	.word	0x080014a5
 8006250:	08005b85 	.word	0x08005b85
 8006254:	08005bfd 	.word	0x08005bfd
 8006258:	08005c11 	.word	0x08005c11
 800625c:	08005bad 	.word	0x08005bad
 8006260:	08005bc1 	.word	0x08005bc1
 8006264:	08005b99 	.word	0x08005b99
 8006268:	08005bd5 	.word	0x08005bd5
 800626c:	08005be9 	.word	0x08005be9
 8006270:	08005c25 	.word	0x08005c25
 8006274:	08006401 	.word	0x08006401
 8006278:	08006415 	.word	0x08006415
 800627c:	08006429 	.word	0x08006429

08006280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006294:	2302      	movs	r3, #2
 8006296:	e050      	b.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d013      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a18      	ldr	r2, [pc, #96]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a16      	ldr	r2, [pc, #88]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a13      	ldr	r2, [pc, #76]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10c      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4313      	orrs	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40010000 	.word	0x40010000
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00
 8006358:	40014000 	.word	0x40014000

0800635c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006374:	2302      	movs	r3, #2
 8006376:	e03d      	b.n	80063f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e04a      	b.n	80064e4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d111      	bne.n	800647e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f932 	bl	80066cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <HAL_UART_Init+0xb0>)
 8006474:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2224      	movs	r2, #36	; 0x24
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006494:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f99a 	bl	80067d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	08001e15 	.word	0x08001e15

080064f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b20      	cmp	r3, #32
 800650e:	d17c      	bne.n	800660a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_UART_Transmit+0x2c>
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e075      	b.n	800660c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_UART_Transmit+0x3e>
 800652a:	2302      	movs	r3, #2
 800652c:	e06e      	b.n	800660c <HAL_UART_Transmit+0x11c>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2221      	movs	r2, #33	; 0x21
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006544:	f7fc fc34 	bl	8002db0 <HAL_GetTick>
 8006548:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655e:	d108      	bne.n	8006572 <HAL_UART_Transmit+0x82>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e003      	b.n	800657a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006582:	e02a      	b.n	80065da <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2200      	movs	r2, #0
 800658c:	2180      	movs	r1, #128	; 0x80
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 f8d4 	bl	800673c <UART_WaitOnFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e036      	b.n	800660c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	3302      	adds	r3, #2
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e007      	b.n	80065cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	3301      	adds	r3, #1
 80065ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1cf      	bne.n	8006584 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	2140      	movs	r1, #64	; 0x40
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f8a4 	bl	800673c <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e006      	b.n	800660c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	e000      	b.n	800660c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800660a:	2302      	movs	r3, #2
  }
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <UART_InitCallbacksToDefault+0x4c>)
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a0f      	ldr	r2, [pc, #60]	; (800671c <UART_InitCallbacksToDefault+0x50>)
 80066de:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a0f      	ldr	r2, [pc, #60]	; (8006720 <UART_InitCallbacksToDefault+0x54>)
 80066e4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a0e      	ldr	r2, [pc, #56]	; (8006724 <UART_InitCallbacksToDefault+0x58>)
 80066ea:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a0e      	ldr	r2, [pc, #56]	; (8006728 <UART_InitCallbacksToDefault+0x5c>)
 80066f0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a0d      	ldr	r2, [pc, #52]	; (800672c <UART_InitCallbacksToDefault+0x60>)
 80066f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a0d      	ldr	r2, [pc, #52]	; (8006730 <UART_InitCallbacksToDefault+0x64>)
 80066fc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a0c      	ldr	r2, [pc, #48]	; (8006734 <UART_InitCallbacksToDefault+0x68>)
 8006702:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <UART_InitCallbacksToDefault+0x6c>)
 8006708:	669a      	str	r2, [r3, #104]	; 0x68

}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	08006629 	.word	0x08006629
 800671c:	08006615 	.word	0x08006615
 8006720:	08006651 	.word	0x08006651
 8006724:	0800663d 	.word	0x0800663d
 8006728:	08006665 	.word	0x08006665
 800672c:	08006679 	.word	0x08006679
 8006730:	0800668d 	.word	0x0800668d
 8006734:	080066a1 	.word	0x080066a1
 8006738:	080066b5 	.word	0x080066b5

0800673c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674c:	e02c      	b.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d028      	beq.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0x30>
 800675c:	f7fc fb28 	bl	8002db0 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	429a      	cmp	r2, r3
 800676a:	d21d      	bcs.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800677a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e00f      	b.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d0c3      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	b09f      	sub	sp, #124	; 0x7c
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e6:	68d9      	ldr	r1, [r3, #12]
 80067e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	ea40 0301 	orr.w	r3, r0, r1
 80067f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	431a      	orrs	r2, r3
 8006802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	4313      	orrs	r3, r2
 8006808:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800680a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006814:	f021 010c 	bic.w	r1, r1, #12
 8006818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800681e:	430b      	orrs	r3, r1
 8006820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800682c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682e:	6999      	ldr	r1, [r3, #24]
 8006830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	ea40 0301 	orr.w	r3, r0, r1
 8006838:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800683a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4bc5      	ldr	r3, [pc, #788]	; (8006b54 <UART_SetConfig+0x384>)
 8006840:	429a      	cmp	r2, r3
 8006842:	d004      	beq.n	800684e <UART_SetConfig+0x7e>
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4bc3      	ldr	r3, [pc, #780]	; (8006b58 <UART_SetConfig+0x388>)
 800684a:	429a      	cmp	r2, r3
 800684c:	d103      	bne.n	8006856 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800684e:	f7fe fb31 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 8006852:	6778      	str	r0, [r7, #116]	; 0x74
 8006854:	e002      	b.n	800685c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7fe fb19 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 800685a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006864:	f040 80b6 	bne.w	80069d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686a:	461c      	mov	r4, r3
 800686c:	f04f 0500 	mov.w	r5, #0
 8006870:	4622      	mov	r2, r4
 8006872:	462b      	mov	r3, r5
 8006874:	1891      	adds	r1, r2, r2
 8006876:	6439      	str	r1, [r7, #64]	; 0x40
 8006878:	415b      	adcs	r3, r3
 800687a:	647b      	str	r3, [r7, #68]	; 0x44
 800687c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006880:	1912      	adds	r2, r2, r4
 8006882:	eb45 0303 	adc.w	r3, r5, r3
 8006886:	f04f 0000 	mov.w	r0, #0
 800688a:	f04f 0100 	mov.w	r1, #0
 800688e:	00d9      	lsls	r1, r3, #3
 8006890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006894:	00d0      	lsls	r0, r2, #3
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	1911      	adds	r1, r2, r4
 800689c:	6639      	str	r1, [r7, #96]	; 0x60
 800689e:	416b      	adcs	r3, r5
 80068a0:	667b      	str	r3, [r7, #100]	; 0x64
 80068a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	1891      	adds	r1, r2, r2
 80068ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80068b0:	415b      	adcs	r3, r3
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80068bc:	f7fa f9cc 	bl	8000c58 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4ba5      	ldr	r3, [pc, #660]	; (8006b5c <UART_SetConfig+0x38c>)
 80068c6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	011e      	lsls	r6, r3, #4
 80068ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d0:	461c      	mov	r4, r3
 80068d2:	f04f 0500 	mov.w	r5, #0
 80068d6:	4622      	mov	r2, r4
 80068d8:	462b      	mov	r3, r5
 80068da:	1891      	adds	r1, r2, r2
 80068dc:	6339      	str	r1, [r7, #48]	; 0x30
 80068de:	415b      	adcs	r3, r3
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
 80068e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068e6:	1912      	adds	r2, r2, r4
 80068e8:	eb45 0303 	adc.w	r3, r5, r3
 80068ec:	f04f 0000 	mov.w	r0, #0
 80068f0:	f04f 0100 	mov.w	r1, #0
 80068f4:	00d9      	lsls	r1, r3, #3
 80068f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068fa:	00d0      	lsls	r0, r2, #3
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	1911      	adds	r1, r2, r4
 8006902:	65b9      	str	r1, [r7, #88]	; 0x58
 8006904:	416b      	adcs	r3, r5
 8006906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	461a      	mov	r2, r3
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	1891      	adds	r1, r2, r2
 8006914:	62b9      	str	r1, [r7, #40]	; 0x28
 8006916:	415b      	adcs	r3, r3
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800691e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006922:	f7fa f999 	bl	8000c58 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4b8c      	ldr	r3, [pc, #560]	; (8006b5c <UART_SetConfig+0x38c>)
 800692c:	fba3 1302 	umull	r1, r3, r3, r2
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	2164      	movs	r1, #100	; 0x64
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	3332      	adds	r3, #50	; 0x32
 800693e:	4a87      	ldr	r2, [pc, #540]	; (8006b5c <UART_SetConfig+0x38c>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800694c:	441e      	add	r6, r3
 800694e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006950:	4618      	mov	r0, r3
 8006952:	f04f 0100 	mov.w	r1, #0
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	1894      	adds	r4, r2, r2
 800695c:	623c      	str	r4, [r7, #32]
 800695e:	415b      	adcs	r3, r3
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
 8006962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006966:	1812      	adds	r2, r2, r0
 8006968:	eb41 0303 	adc.w	r3, r1, r3
 800696c:	f04f 0400 	mov.w	r4, #0
 8006970:	f04f 0500 	mov.w	r5, #0
 8006974:	00dd      	lsls	r5, r3, #3
 8006976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800697a:	00d4      	lsls	r4, r2, #3
 800697c:	4622      	mov	r2, r4
 800697e:	462b      	mov	r3, r5
 8006980:	1814      	adds	r4, r2, r0
 8006982:	653c      	str	r4, [r7, #80]	; 0x50
 8006984:	414b      	adcs	r3, r1
 8006986:	657b      	str	r3, [r7, #84]	; 0x54
 8006988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	461a      	mov	r2, r3
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	1891      	adds	r1, r2, r2
 8006994:	61b9      	str	r1, [r7, #24]
 8006996:	415b      	adcs	r3, r3
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800699e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80069a2:	f7fa f959 	bl	8000c58 <__aeabi_uldivmod>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4b6c      	ldr	r3, [pc, #432]	; (8006b5c <UART_SetConfig+0x38c>)
 80069ac:	fba3 1302 	umull	r1, r3, r3, r2
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	2164      	movs	r1, #100	; 0x64
 80069b4:	fb01 f303 	mul.w	r3, r1, r3
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	3332      	adds	r3, #50	; 0x32
 80069be:	4a67      	ldr	r2, [pc, #412]	; (8006b5c <UART_SetConfig+0x38c>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	f003 0207 	and.w	r2, r3, #7
 80069ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4432      	add	r2, r6
 80069d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069d2:	e0b9      	b.n	8006b48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d6:	461c      	mov	r4, r3
 80069d8:	f04f 0500 	mov.w	r5, #0
 80069dc:	4622      	mov	r2, r4
 80069de:	462b      	mov	r3, r5
 80069e0:	1891      	adds	r1, r2, r2
 80069e2:	6139      	str	r1, [r7, #16]
 80069e4:	415b      	adcs	r3, r3
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069ec:	1912      	adds	r2, r2, r4
 80069ee:	eb45 0303 	adc.w	r3, r5, r3
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	00d9      	lsls	r1, r3, #3
 80069fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a00:	00d0      	lsls	r0, r2, #3
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	eb12 0804 	adds.w	r8, r2, r4
 8006a0a:	eb43 0905 	adc.w	r9, r3, r5
 8006a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	008b      	lsls	r3, r1, #2
 8006a22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a26:	0082      	lsls	r2, r0, #2
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	f7fa f914 	bl	8000c58 <__aeabi_uldivmod>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4b49      	ldr	r3, [pc, #292]	; (8006b5c <UART_SetConfig+0x38c>)
 8006a36:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	011e      	lsls	r6, r3, #4
 8006a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a40:	4618      	mov	r0, r3
 8006a42:	f04f 0100 	mov.w	r1, #0
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	1894      	adds	r4, r2, r2
 8006a4c:	60bc      	str	r4, [r7, #8]
 8006a4e:	415b      	adcs	r3, r3
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a56:	1812      	adds	r2, r2, r0
 8006a58:	eb41 0303 	adc.w	r3, r1, r3
 8006a5c:	f04f 0400 	mov.w	r4, #0
 8006a60:	f04f 0500 	mov.w	r5, #0
 8006a64:	00dd      	lsls	r5, r3, #3
 8006a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a6a:	00d4      	lsls	r4, r2, #3
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	1814      	adds	r4, r2, r0
 8006a72:	64bc      	str	r4, [r7, #72]	; 0x48
 8006a74:	414b      	adcs	r3, r1
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f04f 0100 	mov.w	r1, #0
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	008b      	lsls	r3, r1, #2
 8006a8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a90:	0082      	lsls	r2, r0, #2
 8006a92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a96:	f7fa f8df 	bl	8000c58 <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4b2f      	ldr	r3, [pc, #188]	; (8006b5c <UART_SetConfig+0x38c>)
 8006aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	2164      	movs	r1, #100	; 0x64
 8006aa8:	fb01 f303 	mul.w	r3, r1, r3
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	3332      	adds	r3, #50	; 0x32
 8006ab2:	4a2a      	ldr	r2, [pc, #168]	; (8006b5c <UART_SetConfig+0x38c>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006abe:	441e      	add	r6, r3
 8006ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f04f 0100 	mov.w	r1, #0
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	1894      	adds	r4, r2, r2
 8006ace:	603c      	str	r4, [r7, #0]
 8006ad0:	415b      	adcs	r3, r3
 8006ad2:	607b      	str	r3, [r7, #4]
 8006ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad8:	1812      	adds	r2, r2, r0
 8006ada:	eb41 0303 	adc.w	r3, r1, r3
 8006ade:	f04f 0400 	mov.w	r4, #0
 8006ae2:	f04f 0500 	mov.w	r5, #0
 8006ae6:	00dd      	lsls	r5, r3, #3
 8006ae8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006aec:	00d4      	lsls	r4, r2, #3
 8006aee:	4622      	mov	r2, r4
 8006af0:	462b      	mov	r3, r5
 8006af2:	eb12 0a00 	adds.w	sl, r2, r0
 8006af6:	eb43 0b01 	adc.w	fp, r3, r1
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f04f 0100 	mov.w	r1, #0
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	008b      	lsls	r3, r1, #2
 8006b0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b12:	0082      	lsls	r2, r0, #2
 8006b14:	4650      	mov	r0, sl
 8006b16:	4659      	mov	r1, fp
 8006b18:	f7fa f89e 	bl	8000c58 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <UART_SetConfig+0x38c>)
 8006b22:	fba3 1302 	umull	r1, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	2164      	movs	r1, #100	; 0x64
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	3332      	adds	r3, #50	; 0x32
 8006b34:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <UART_SetConfig+0x38c>)
 8006b36:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4432      	add	r2, r6
 8006b46:	609a      	str	r2, [r3, #8]
}
 8006b48:	bf00      	nop
 8006b4a:	377c      	adds	r7, #124	; 0x7c
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	bf00      	nop
 8006b54:	40011000 	.word	0x40011000
 8006b58:	40011400 	.word	0x40011400
 8006b5c:	51eb851f 	.word	0x51eb851f

08006b60 <__errno>:
 8006b60:	4b01      	ldr	r3, [pc, #4]	; (8006b68 <__errno+0x8>)
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	2000001c 	.word	0x2000001c

08006b6c <__libc_init_array>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ba4 <__libc_init_array+0x38>)
 8006b70:	4c0d      	ldr	r4, [pc, #52]	; (8006ba8 <__libc_init_array+0x3c>)
 8006b72:	1b64      	subs	r4, r4, r5
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	2600      	movs	r6, #0
 8006b78:	42a6      	cmp	r6, r4
 8006b7a:	d109      	bne.n	8006b90 <__libc_init_array+0x24>
 8006b7c:	4d0b      	ldr	r5, [pc, #44]	; (8006bac <__libc_init_array+0x40>)
 8006b7e:	4c0c      	ldr	r4, [pc, #48]	; (8006bb0 <__libc_init_array+0x44>)
 8006b80:	f002 feb4 	bl	80098ec <_init>
 8006b84:	1b64      	subs	r4, r4, r5
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	2600      	movs	r6, #0
 8006b8a:	42a6      	cmp	r6, r4
 8006b8c:	d105      	bne.n	8006b9a <__libc_init_array+0x2e>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b94:	4798      	blx	r3
 8006b96:	3601      	adds	r6, #1
 8006b98:	e7ee      	b.n	8006b78 <__libc_init_array+0xc>
 8006b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9e:	4798      	blx	r3
 8006ba0:	3601      	adds	r6, #1
 8006ba2:	e7f2      	b.n	8006b8a <__libc_init_array+0x1e>
 8006ba4:	08009d5c 	.word	0x08009d5c
 8006ba8:	08009d5c 	.word	0x08009d5c
 8006bac:	08009d5c 	.word	0x08009d5c
 8006bb0:	08009d60 	.word	0x08009d60

08006bb4 <memset>:
 8006bb4:	4402      	add	r2, r0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d100      	bne.n	8006bbe <memset+0xa>
 8006bbc:	4770      	bx	lr
 8006bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8006bc2:	e7f9      	b.n	8006bb8 <memset+0x4>

08006bc4 <__cvt>:
 8006bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	ec55 4b10 	vmov	r4, r5, d0
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	460e      	mov	r6, r1
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	bfbb      	ittet	lt
 8006bd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bda:	461d      	movlt	r5, r3
 8006bdc:	2300      	movge	r3, #0
 8006bde:	232d      	movlt	r3, #45	; 0x2d
 8006be0:	700b      	strb	r3, [r1, #0]
 8006be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006be8:	4691      	mov	r9, r2
 8006bea:	f023 0820 	bic.w	r8, r3, #32
 8006bee:	bfbc      	itt	lt
 8006bf0:	4622      	movlt	r2, r4
 8006bf2:	4614      	movlt	r4, r2
 8006bf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bf8:	d005      	beq.n	8006c06 <__cvt+0x42>
 8006bfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bfe:	d100      	bne.n	8006c02 <__cvt+0x3e>
 8006c00:	3601      	adds	r6, #1
 8006c02:	2102      	movs	r1, #2
 8006c04:	e000      	b.n	8006c08 <__cvt+0x44>
 8006c06:	2103      	movs	r1, #3
 8006c08:	ab03      	add	r3, sp, #12
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	ab02      	add	r3, sp, #8
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	ec45 4b10 	vmov	d0, r4, r5
 8006c14:	4653      	mov	r3, sl
 8006c16:	4632      	mov	r2, r6
 8006c18:	f000 fcea 	bl	80075f0 <_dtoa_r>
 8006c1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c20:	4607      	mov	r7, r0
 8006c22:	d102      	bne.n	8006c2a <__cvt+0x66>
 8006c24:	f019 0f01 	tst.w	r9, #1
 8006c28:	d022      	beq.n	8006c70 <__cvt+0xac>
 8006c2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c2e:	eb07 0906 	add.w	r9, r7, r6
 8006c32:	d110      	bne.n	8006c56 <__cvt+0x92>
 8006c34:	783b      	ldrb	r3, [r7, #0]
 8006c36:	2b30      	cmp	r3, #48	; 0x30
 8006c38:	d10a      	bne.n	8006c50 <__cvt+0x8c>
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 ff49 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c46:	b918      	cbnz	r0, 8006c50 <__cvt+0x8c>
 8006c48:	f1c6 0601 	rsb	r6, r6, #1
 8006c4c:	f8ca 6000 	str.w	r6, [sl]
 8006c50:	f8da 3000 	ldr.w	r3, [sl]
 8006c54:	4499      	add	r9, r3
 8006c56:	2200      	movs	r2, #0
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c62:	b108      	cbz	r0, 8006c68 <__cvt+0xa4>
 8006c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c68:	2230      	movs	r2, #48	; 0x30
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	454b      	cmp	r3, r9
 8006c6e:	d307      	bcc.n	8006c80 <__cvt+0xbc>
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c74:	1bdb      	subs	r3, r3, r7
 8006c76:	4638      	mov	r0, r7
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	b004      	add	sp, #16
 8006c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c80:	1c59      	adds	r1, r3, #1
 8006c82:	9103      	str	r1, [sp, #12]
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e7f0      	b.n	8006c6a <__cvt+0xa6>

08006c88 <__exponent>:
 8006c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	bfb8      	it	lt
 8006c90:	4249      	neglt	r1, r1
 8006c92:	f803 2b02 	strb.w	r2, [r3], #2
 8006c96:	bfb4      	ite	lt
 8006c98:	222d      	movlt	r2, #45	; 0x2d
 8006c9a:	222b      	movge	r2, #43	; 0x2b
 8006c9c:	2909      	cmp	r1, #9
 8006c9e:	7042      	strb	r2, [r0, #1]
 8006ca0:	dd2a      	ble.n	8006cf8 <__exponent+0x70>
 8006ca2:	f10d 0407 	add.w	r4, sp, #7
 8006ca6:	46a4      	mov	ip, r4
 8006ca8:	270a      	movs	r7, #10
 8006caa:	46a6      	mov	lr, r4
 8006cac:	460a      	mov	r2, r1
 8006cae:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cb2:	fb07 1516 	mls	r5, r7, r6, r1
 8006cb6:	3530      	adds	r5, #48	; 0x30
 8006cb8:	2a63      	cmp	r2, #99	; 0x63
 8006cba:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	dcf1      	bgt.n	8006caa <__exponent+0x22>
 8006cc6:	3130      	adds	r1, #48	; 0x30
 8006cc8:	f1ae 0502 	sub.w	r5, lr, #2
 8006ccc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cd0:	1c44      	adds	r4, r0, #1
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4561      	cmp	r1, ip
 8006cd6:	d30a      	bcc.n	8006cee <__exponent+0x66>
 8006cd8:	f10d 0209 	add.w	r2, sp, #9
 8006cdc:	eba2 020e 	sub.w	r2, r2, lr
 8006ce0:	4565      	cmp	r5, ip
 8006ce2:	bf88      	it	hi
 8006ce4:	2200      	movhi	r2, #0
 8006ce6:	4413      	add	r3, r2
 8006ce8:	1a18      	subs	r0, r3, r0
 8006cea:	b003      	add	sp, #12
 8006cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cf6:	e7ed      	b.n	8006cd4 <__exponent+0x4c>
 8006cf8:	2330      	movs	r3, #48	; 0x30
 8006cfa:	3130      	adds	r1, #48	; 0x30
 8006cfc:	7083      	strb	r3, [r0, #2]
 8006cfe:	70c1      	strb	r1, [r0, #3]
 8006d00:	1d03      	adds	r3, r0, #4
 8006d02:	e7f1      	b.n	8006ce8 <__exponent+0x60>

08006d04 <_printf_float>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	ed2d 8b02 	vpush	{d8}
 8006d0c:	b08d      	sub	sp, #52	; 0x34
 8006d0e:	460c      	mov	r4, r1
 8006d10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d14:	4616      	mov	r6, r2
 8006d16:	461f      	mov	r7, r3
 8006d18:	4605      	mov	r5, r0
 8006d1a:	f001 fa55 	bl	80081c8 <_localeconv_r>
 8006d1e:	f8d0 a000 	ldr.w	sl, [r0]
 8006d22:	4650      	mov	r0, sl
 8006d24:	f7f9 fa5c 	bl	80001e0 <strlen>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	9305      	str	r3, [sp, #20]
 8006d30:	f8d8 3000 	ldr.w	r3, [r8]
 8006d34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d38:	3307      	adds	r3, #7
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	f103 0208 	add.w	r2, r3, #8
 8006d42:	f8c8 2000 	str.w	r2, [r8]
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d5c:	ee08 0a10 	vmov	s16, r0
 8006d60:	4b9f      	ldr	r3, [pc, #636]	; (8006fe0 <_printf_float+0x2dc>)
 8006d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d66:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6a:	f7f9 fee7 	bl	8000b3c <__aeabi_dcmpun>
 8006d6e:	bb88      	cbnz	r0, 8006dd4 <_printf_float+0xd0>
 8006d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d74:	4b9a      	ldr	r3, [pc, #616]	; (8006fe0 <_printf_float+0x2dc>)
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7a:	f7f9 fec1 	bl	8000b00 <__aeabi_dcmple>
 8006d7e:	bb48      	cbnz	r0, 8006dd4 <_printf_float+0xd0>
 8006d80:	2200      	movs	r2, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	4640      	mov	r0, r8
 8006d86:	4649      	mov	r1, r9
 8006d88:	f7f9 feb0 	bl	8000aec <__aeabi_dcmplt>
 8006d8c:	b110      	cbz	r0, 8006d94 <_printf_float+0x90>
 8006d8e:	232d      	movs	r3, #45	; 0x2d
 8006d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d94:	4b93      	ldr	r3, [pc, #588]	; (8006fe4 <_printf_float+0x2e0>)
 8006d96:	4894      	ldr	r0, [pc, #592]	; (8006fe8 <_printf_float+0x2e4>)
 8006d98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d9c:	bf94      	ite	ls
 8006d9e:	4698      	movls	r8, r3
 8006da0:	4680      	movhi	r8, r0
 8006da2:	2303      	movs	r3, #3
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	9b05      	ldr	r3, [sp, #20]
 8006da8:	f023 0204 	bic.w	r2, r3, #4
 8006dac:	6022      	str	r2, [r4, #0]
 8006dae:	f04f 0900 	mov.w	r9, #0
 8006db2:	9700      	str	r7, [sp, #0]
 8006db4:	4633      	mov	r3, r6
 8006db6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006db8:	4621      	mov	r1, r4
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 f9d8 	bl	8007170 <_printf_common>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f040 8090 	bne.w	8006ee6 <_printf_float+0x1e2>
 8006dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dca:	b00d      	add	sp, #52	; 0x34
 8006dcc:	ecbd 8b02 	vpop	{d8}
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4649      	mov	r1, r9
 8006ddc:	f7f9 feae 	bl	8000b3c <__aeabi_dcmpun>
 8006de0:	b140      	cbz	r0, 8006df4 <_printf_float+0xf0>
 8006de2:	464b      	mov	r3, r9
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bfbc      	itt	lt
 8006de8:	232d      	movlt	r3, #45	; 0x2d
 8006dea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dee:	487f      	ldr	r0, [pc, #508]	; (8006fec <_printf_float+0x2e8>)
 8006df0:	4b7f      	ldr	r3, [pc, #508]	; (8006ff0 <_printf_float+0x2ec>)
 8006df2:	e7d1      	b.n	8006d98 <_printf_float+0x94>
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dfa:	9206      	str	r2, [sp, #24]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	d13f      	bne.n	8006e80 <_printf_float+0x17c>
 8006e00:	2306      	movs	r3, #6
 8006e02:	6063      	str	r3, [r4, #4]
 8006e04:	9b05      	ldr	r3, [sp, #20]
 8006e06:	6861      	ldr	r1, [r4, #4]
 8006e08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	ab0a      	add	r3, sp, #40	; 0x28
 8006e12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e16:	ab09      	add	r3, sp, #36	; 0x24
 8006e18:	ec49 8b10 	vmov	d0, r8, r9
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	6022      	str	r2, [r4, #0]
 8006e20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e24:	4628      	mov	r0, r5
 8006e26:	f7ff fecd 	bl	8006bc4 <__cvt>
 8006e2a:	9b06      	ldr	r3, [sp, #24]
 8006e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e2e:	2b47      	cmp	r3, #71	; 0x47
 8006e30:	4680      	mov	r8, r0
 8006e32:	d108      	bne.n	8006e46 <_printf_float+0x142>
 8006e34:	1cc8      	adds	r0, r1, #3
 8006e36:	db02      	blt.n	8006e3e <_printf_float+0x13a>
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	4299      	cmp	r1, r3
 8006e3c:	dd41      	ble.n	8006ec2 <_printf_float+0x1be>
 8006e3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e42:	fa5f fb8b 	uxtb.w	fp, fp
 8006e46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e4a:	d820      	bhi.n	8006e8e <_printf_float+0x18a>
 8006e4c:	3901      	subs	r1, #1
 8006e4e:	465a      	mov	r2, fp
 8006e50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e54:	9109      	str	r1, [sp, #36]	; 0x24
 8006e56:	f7ff ff17 	bl	8006c88 <__exponent>
 8006e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e5c:	1813      	adds	r3, r2, r0
 8006e5e:	2a01      	cmp	r2, #1
 8006e60:	4681      	mov	r9, r0
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	dc02      	bgt.n	8006e6c <_printf_float+0x168>
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	07d2      	lsls	r2, r2, #31
 8006e6a:	d501      	bpl.n	8006e70 <_printf_float+0x16c>
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d09c      	beq.n	8006db2 <_printf_float+0xae>
 8006e78:	232d      	movs	r3, #45	; 0x2d
 8006e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7e:	e798      	b.n	8006db2 <_printf_float+0xae>
 8006e80:	9a06      	ldr	r2, [sp, #24]
 8006e82:	2a47      	cmp	r2, #71	; 0x47
 8006e84:	d1be      	bne.n	8006e04 <_printf_float+0x100>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1bc      	bne.n	8006e04 <_printf_float+0x100>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e7b9      	b.n	8006e02 <_printf_float+0xfe>
 8006e8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e92:	d118      	bne.n	8006ec6 <_printf_float+0x1c2>
 8006e94:	2900      	cmp	r1, #0
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	dd0b      	ble.n	8006eb2 <_printf_float+0x1ae>
 8006e9a:	6121      	str	r1, [r4, #16]
 8006e9c:	b913      	cbnz	r3, 8006ea4 <_printf_float+0x1a0>
 8006e9e:	6822      	ldr	r2, [r4, #0]
 8006ea0:	07d0      	lsls	r0, r2, #31
 8006ea2:	d502      	bpl.n	8006eaa <_printf_float+0x1a6>
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	440b      	add	r3, r1
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8006eac:	f04f 0900 	mov.w	r9, #0
 8006eb0:	e7de      	b.n	8006e70 <_printf_float+0x16c>
 8006eb2:	b913      	cbnz	r3, 8006eba <_printf_float+0x1b6>
 8006eb4:	6822      	ldr	r2, [r4, #0]
 8006eb6:	07d2      	lsls	r2, r2, #31
 8006eb8:	d501      	bpl.n	8006ebe <_printf_float+0x1ba>
 8006eba:	3302      	adds	r3, #2
 8006ebc:	e7f4      	b.n	8006ea8 <_printf_float+0x1a4>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e7f2      	b.n	8006ea8 <_printf_float+0x1a4>
 8006ec2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec8:	4299      	cmp	r1, r3
 8006eca:	db05      	blt.n	8006ed8 <_printf_float+0x1d4>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	6121      	str	r1, [r4, #16]
 8006ed0:	07d8      	lsls	r0, r3, #31
 8006ed2:	d5ea      	bpl.n	8006eaa <_printf_float+0x1a6>
 8006ed4:	1c4b      	adds	r3, r1, #1
 8006ed6:	e7e7      	b.n	8006ea8 <_printf_float+0x1a4>
 8006ed8:	2900      	cmp	r1, #0
 8006eda:	bfd4      	ite	le
 8006edc:	f1c1 0202 	rsble	r2, r1, #2
 8006ee0:	2201      	movgt	r2, #1
 8006ee2:	4413      	add	r3, r2
 8006ee4:	e7e0      	b.n	8006ea8 <_printf_float+0x1a4>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	055a      	lsls	r2, r3, #21
 8006eea:	d407      	bmi.n	8006efc <_printf_float+0x1f8>
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	4642      	mov	r2, r8
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d12c      	bne.n	8006f54 <_printf_float+0x250>
 8006efa:	e764      	b.n	8006dc6 <_printf_float+0xc2>
 8006efc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f00:	f240 80e0 	bls.w	80070c4 <_printf_float+0x3c0>
 8006f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f7f9 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d034      	beq.n	8006f7e <_printf_float+0x27a>
 8006f14:	4a37      	ldr	r2, [pc, #220]	; (8006ff4 <_printf_float+0x2f0>)
 8006f16:	2301      	movs	r3, #1
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f43f af51 	beq.w	8006dc6 <_printf_float+0xc2>
 8006f24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	db02      	blt.n	8006f32 <_printf_float+0x22e>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	07d8      	lsls	r0, r3, #31
 8006f30:	d510      	bpl.n	8006f54 <_printf_float+0x250>
 8006f32:	ee18 3a10 	vmov	r3, s16
 8006f36:	4652      	mov	r2, sl
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f af41 	beq.w	8006dc6 <_printf_float+0xc2>
 8006f44:	f04f 0800 	mov.w	r8, #0
 8006f48:	f104 091a 	add.w	r9, r4, #26
 8006f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	4543      	cmp	r3, r8
 8006f52:	dc09      	bgt.n	8006f68 <_printf_float+0x264>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	079b      	lsls	r3, r3, #30
 8006f58:	f100 8105 	bmi.w	8007166 <_printf_float+0x462>
 8006f5c:	68e0      	ldr	r0, [r4, #12]
 8006f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f60:	4298      	cmp	r0, r3
 8006f62:	bfb8      	it	lt
 8006f64:	4618      	movlt	r0, r3
 8006f66:	e730      	b.n	8006dca <_printf_float+0xc6>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	464a      	mov	r2, r9
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4628      	mov	r0, r5
 8006f70:	47b8      	blx	r7
 8006f72:	3001      	adds	r0, #1
 8006f74:	f43f af27 	beq.w	8006dc6 <_printf_float+0xc2>
 8006f78:	f108 0801 	add.w	r8, r8, #1
 8006f7c:	e7e6      	b.n	8006f4c <_printf_float+0x248>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	dc39      	bgt.n	8006ff8 <_printf_float+0x2f4>
 8006f84:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <_printf_float+0x2f0>)
 8006f86:	2301      	movs	r3, #1
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b8      	blx	r7
 8006f8e:	3001      	adds	r0, #1
 8006f90:	f43f af19 	beq.w	8006dc6 <_printf_float+0xc2>
 8006f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	d102      	bne.n	8006fa2 <_printf_float+0x29e>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	07d9      	lsls	r1, r3, #31
 8006fa0:	d5d8      	bpl.n	8006f54 <_printf_float+0x250>
 8006fa2:	ee18 3a10 	vmov	r3, s16
 8006fa6:	4652      	mov	r2, sl
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b8      	blx	r7
 8006fae:	3001      	adds	r0, #1
 8006fb0:	f43f af09 	beq.w	8006dc6 <_printf_float+0xc2>
 8006fb4:	f04f 0900 	mov.w	r9, #0
 8006fb8:	f104 0a1a 	add.w	sl, r4, #26
 8006fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbe:	425b      	negs	r3, r3
 8006fc0:	454b      	cmp	r3, r9
 8006fc2:	dc01      	bgt.n	8006fc8 <_printf_float+0x2c4>
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc6:	e792      	b.n	8006eee <_printf_float+0x1ea>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4652      	mov	r2, sl
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f43f aef7 	beq.w	8006dc6 <_printf_float+0xc2>
 8006fd8:	f109 0901 	add.w	r9, r9, #1
 8006fdc:	e7ee      	b.n	8006fbc <_printf_float+0x2b8>
 8006fde:	bf00      	nop
 8006fe0:	7fefffff 	.word	0x7fefffff
 8006fe4:	08009978 	.word	0x08009978
 8006fe8:	0800997c 	.word	0x0800997c
 8006fec:	08009984 	.word	0x08009984
 8006ff0:	08009980 	.word	0x08009980
 8006ff4:	08009988 	.word	0x08009988
 8006ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	bfa8      	it	ge
 8007000:	461a      	movge	r2, r3
 8007002:	2a00      	cmp	r2, #0
 8007004:	4691      	mov	r9, r2
 8007006:	dc37      	bgt.n	8007078 <_printf_float+0x374>
 8007008:	f04f 0b00 	mov.w	fp, #0
 800700c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007010:	f104 021a 	add.w	r2, r4, #26
 8007014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007016:	9305      	str	r3, [sp, #20]
 8007018:	eba3 0309 	sub.w	r3, r3, r9
 800701c:	455b      	cmp	r3, fp
 800701e:	dc33      	bgt.n	8007088 <_printf_float+0x384>
 8007020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007024:	429a      	cmp	r2, r3
 8007026:	db3b      	blt.n	80070a0 <_printf_float+0x39c>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	07da      	lsls	r2, r3, #31
 800702c:	d438      	bmi.n	80070a0 <_printf_float+0x39c>
 800702e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007030:	9b05      	ldr	r3, [sp, #20]
 8007032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	eba2 0901 	sub.w	r9, r2, r1
 800703a:	4599      	cmp	r9, r3
 800703c:	bfa8      	it	ge
 800703e:	4699      	movge	r9, r3
 8007040:	f1b9 0f00 	cmp.w	r9, #0
 8007044:	dc35      	bgt.n	80070b2 <_printf_float+0x3ae>
 8007046:	f04f 0800 	mov.w	r8, #0
 800704a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800704e:	f104 0a1a 	add.w	sl, r4, #26
 8007052:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	eba3 0309 	sub.w	r3, r3, r9
 800705c:	4543      	cmp	r3, r8
 800705e:	f77f af79 	ble.w	8006f54 <_printf_float+0x250>
 8007062:	2301      	movs	r3, #1
 8007064:	4652      	mov	r2, sl
 8007066:	4631      	mov	r1, r6
 8007068:	4628      	mov	r0, r5
 800706a:	47b8      	blx	r7
 800706c:	3001      	adds	r0, #1
 800706e:	f43f aeaa 	beq.w	8006dc6 <_printf_float+0xc2>
 8007072:	f108 0801 	add.w	r8, r8, #1
 8007076:	e7ec      	b.n	8007052 <_printf_float+0x34e>
 8007078:	4613      	mov	r3, r2
 800707a:	4631      	mov	r1, r6
 800707c:	4642      	mov	r2, r8
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	d1c0      	bne.n	8007008 <_printf_float+0x304>
 8007086:	e69e      	b.n	8006dc6 <_printf_float+0xc2>
 8007088:	2301      	movs	r3, #1
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	9205      	str	r2, [sp, #20]
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f ae97 	beq.w	8006dc6 <_printf_float+0xc2>
 8007098:	9a05      	ldr	r2, [sp, #20]
 800709a:	f10b 0b01 	add.w	fp, fp, #1
 800709e:	e7b9      	b.n	8007014 <_printf_float+0x310>
 80070a0:	ee18 3a10 	vmov	r3, s16
 80070a4:	4652      	mov	r2, sl
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	d1be      	bne.n	800702e <_printf_float+0x32a>
 80070b0:	e689      	b.n	8006dc6 <_printf_float+0xc2>
 80070b2:	9a05      	ldr	r2, [sp, #20]
 80070b4:	464b      	mov	r3, r9
 80070b6:	4442      	add	r2, r8
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	d1c1      	bne.n	8007046 <_printf_float+0x342>
 80070c2:	e680      	b.n	8006dc6 <_printf_float+0xc2>
 80070c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070c6:	2a01      	cmp	r2, #1
 80070c8:	dc01      	bgt.n	80070ce <_printf_float+0x3ca>
 80070ca:	07db      	lsls	r3, r3, #31
 80070cc:	d538      	bpl.n	8007140 <_printf_float+0x43c>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4642      	mov	r2, r8
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	f43f ae74 	beq.w	8006dc6 <_printf_float+0xc2>
 80070de:	ee18 3a10 	vmov	r3, s16
 80070e2:	4652      	mov	r2, sl
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f ae6b 	beq.w	8006dc6 <_printf_float+0xc2>
 80070f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070f4:	2200      	movs	r2, #0
 80070f6:	2300      	movs	r3, #0
 80070f8:	f7f9 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 80070fc:	b9d8      	cbnz	r0, 8007136 <_printf_float+0x432>
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	f108 0201 	add.w	r2, r8, #1
 8007104:	3b01      	subs	r3, #1
 8007106:	4631      	mov	r1, r6
 8007108:	4628      	mov	r0, r5
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	d10e      	bne.n	800712e <_printf_float+0x42a>
 8007110:	e659      	b.n	8006dc6 <_printf_float+0xc2>
 8007112:	2301      	movs	r3, #1
 8007114:	4652      	mov	r2, sl
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	47b8      	blx	r7
 800711c:	3001      	adds	r0, #1
 800711e:	f43f ae52 	beq.w	8006dc6 <_printf_float+0xc2>
 8007122:	f108 0801 	add.w	r8, r8, #1
 8007126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007128:	3b01      	subs	r3, #1
 800712a:	4543      	cmp	r3, r8
 800712c:	dcf1      	bgt.n	8007112 <_printf_float+0x40e>
 800712e:	464b      	mov	r3, r9
 8007130:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007134:	e6dc      	b.n	8006ef0 <_printf_float+0x1ec>
 8007136:	f04f 0800 	mov.w	r8, #0
 800713a:	f104 0a1a 	add.w	sl, r4, #26
 800713e:	e7f2      	b.n	8007126 <_printf_float+0x422>
 8007140:	2301      	movs	r3, #1
 8007142:	4642      	mov	r2, r8
 8007144:	e7df      	b.n	8007106 <_printf_float+0x402>
 8007146:	2301      	movs	r3, #1
 8007148:	464a      	mov	r2, r9
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f ae38 	beq.w	8006dc6 <_printf_float+0xc2>
 8007156:	f108 0801 	add.w	r8, r8, #1
 800715a:	68e3      	ldr	r3, [r4, #12]
 800715c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800715e:	1a5b      	subs	r3, r3, r1
 8007160:	4543      	cmp	r3, r8
 8007162:	dcf0      	bgt.n	8007146 <_printf_float+0x442>
 8007164:	e6fa      	b.n	8006f5c <_printf_float+0x258>
 8007166:	f04f 0800 	mov.w	r8, #0
 800716a:	f104 0919 	add.w	r9, r4, #25
 800716e:	e7f4      	b.n	800715a <_printf_float+0x456>

08007170 <_printf_common>:
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	4616      	mov	r6, r2
 8007176:	4699      	mov	r9, r3
 8007178:	688a      	ldr	r2, [r1, #8]
 800717a:	690b      	ldr	r3, [r1, #16]
 800717c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007180:	4293      	cmp	r3, r2
 8007182:	bfb8      	it	lt
 8007184:	4613      	movlt	r3, r2
 8007186:	6033      	str	r3, [r6, #0]
 8007188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800718c:	4607      	mov	r7, r0
 800718e:	460c      	mov	r4, r1
 8007190:	b10a      	cbz	r2, 8007196 <_printf_common+0x26>
 8007192:	3301      	adds	r3, #1
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	0699      	lsls	r1, r3, #26
 800719a:	bf42      	ittt	mi
 800719c:	6833      	ldrmi	r3, [r6, #0]
 800719e:	3302      	addmi	r3, #2
 80071a0:	6033      	strmi	r3, [r6, #0]
 80071a2:	6825      	ldr	r5, [r4, #0]
 80071a4:	f015 0506 	ands.w	r5, r5, #6
 80071a8:	d106      	bne.n	80071b8 <_printf_common+0x48>
 80071aa:	f104 0a19 	add.w	sl, r4, #25
 80071ae:	68e3      	ldr	r3, [r4, #12]
 80071b0:	6832      	ldr	r2, [r6, #0]
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	42ab      	cmp	r3, r5
 80071b6:	dc26      	bgt.n	8007206 <_printf_common+0x96>
 80071b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071bc:	1e13      	subs	r3, r2, #0
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	bf18      	it	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	0692      	lsls	r2, r2, #26
 80071c6:	d42b      	bmi.n	8007220 <_printf_common+0xb0>
 80071c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071cc:	4649      	mov	r1, r9
 80071ce:	4638      	mov	r0, r7
 80071d0:	47c0      	blx	r8
 80071d2:	3001      	adds	r0, #1
 80071d4:	d01e      	beq.n	8007214 <_printf_common+0xa4>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	68e5      	ldr	r5, [r4, #12]
 80071da:	6832      	ldr	r2, [r6, #0]
 80071dc:	f003 0306 	and.w	r3, r3, #6
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	bf08      	it	eq
 80071e4:	1aad      	subeq	r5, r5, r2
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	6922      	ldr	r2, [r4, #16]
 80071ea:	bf0c      	ite	eq
 80071ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071f0:	2500      	movne	r5, #0
 80071f2:	4293      	cmp	r3, r2
 80071f4:	bfc4      	itt	gt
 80071f6:	1a9b      	subgt	r3, r3, r2
 80071f8:	18ed      	addgt	r5, r5, r3
 80071fa:	2600      	movs	r6, #0
 80071fc:	341a      	adds	r4, #26
 80071fe:	42b5      	cmp	r5, r6
 8007200:	d11a      	bne.n	8007238 <_printf_common+0xc8>
 8007202:	2000      	movs	r0, #0
 8007204:	e008      	b.n	8007218 <_printf_common+0xa8>
 8007206:	2301      	movs	r3, #1
 8007208:	4652      	mov	r2, sl
 800720a:	4649      	mov	r1, r9
 800720c:	4638      	mov	r0, r7
 800720e:	47c0      	blx	r8
 8007210:	3001      	adds	r0, #1
 8007212:	d103      	bne.n	800721c <_printf_common+0xac>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721c:	3501      	adds	r5, #1
 800721e:	e7c6      	b.n	80071ae <_printf_common+0x3e>
 8007220:	18e1      	adds	r1, r4, r3
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	2030      	movs	r0, #48	; 0x30
 8007226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800722a:	4422      	add	r2, r4
 800722c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007234:	3302      	adds	r3, #2
 8007236:	e7c7      	b.n	80071c8 <_printf_common+0x58>
 8007238:	2301      	movs	r3, #1
 800723a:	4622      	mov	r2, r4
 800723c:	4649      	mov	r1, r9
 800723e:	4638      	mov	r0, r7
 8007240:	47c0      	blx	r8
 8007242:	3001      	adds	r0, #1
 8007244:	d0e6      	beq.n	8007214 <_printf_common+0xa4>
 8007246:	3601      	adds	r6, #1
 8007248:	e7d9      	b.n	80071fe <_printf_common+0x8e>
	...

0800724c <_printf_i>:
 800724c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	460c      	mov	r4, r1
 8007252:	4691      	mov	r9, r2
 8007254:	7e27      	ldrb	r7, [r4, #24]
 8007256:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007258:	2f78      	cmp	r7, #120	; 0x78
 800725a:	4680      	mov	r8, r0
 800725c:	469a      	mov	sl, r3
 800725e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007262:	d807      	bhi.n	8007274 <_printf_i+0x28>
 8007264:	2f62      	cmp	r7, #98	; 0x62
 8007266:	d80a      	bhi.n	800727e <_printf_i+0x32>
 8007268:	2f00      	cmp	r7, #0
 800726a:	f000 80d8 	beq.w	800741e <_printf_i+0x1d2>
 800726e:	2f58      	cmp	r7, #88	; 0x58
 8007270:	f000 80a3 	beq.w	80073ba <_printf_i+0x16e>
 8007274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800727c:	e03a      	b.n	80072f4 <_printf_i+0xa8>
 800727e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007282:	2b15      	cmp	r3, #21
 8007284:	d8f6      	bhi.n	8007274 <_printf_i+0x28>
 8007286:	a001      	add	r0, pc, #4	; (adr r0, 800728c <_printf_i+0x40>)
 8007288:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800728c:	080072e5 	.word	0x080072e5
 8007290:	080072f9 	.word	0x080072f9
 8007294:	08007275 	.word	0x08007275
 8007298:	08007275 	.word	0x08007275
 800729c:	08007275 	.word	0x08007275
 80072a0:	08007275 	.word	0x08007275
 80072a4:	080072f9 	.word	0x080072f9
 80072a8:	08007275 	.word	0x08007275
 80072ac:	08007275 	.word	0x08007275
 80072b0:	08007275 	.word	0x08007275
 80072b4:	08007275 	.word	0x08007275
 80072b8:	08007405 	.word	0x08007405
 80072bc:	08007329 	.word	0x08007329
 80072c0:	080073e7 	.word	0x080073e7
 80072c4:	08007275 	.word	0x08007275
 80072c8:	08007275 	.word	0x08007275
 80072cc:	08007427 	.word	0x08007427
 80072d0:	08007275 	.word	0x08007275
 80072d4:	08007329 	.word	0x08007329
 80072d8:	08007275 	.word	0x08007275
 80072dc:	08007275 	.word	0x08007275
 80072e0:	080073ef 	.word	0x080073ef
 80072e4:	680b      	ldr	r3, [r1, #0]
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	600a      	str	r2, [r1, #0]
 80072ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0a3      	b.n	8007440 <_printf_i+0x1f4>
 80072f8:	6825      	ldr	r5, [r4, #0]
 80072fa:	6808      	ldr	r0, [r1, #0]
 80072fc:	062e      	lsls	r6, r5, #24
 80072fe:	f100 0304 	add.w	r3, r0, #4
 8007302:	d50a      	bpl.n	800731a <_printf_i+0xce>
 8007304:	6805      	ldr	r5, [r0, #0]
 8007306:	600b      	str	r3, [r1, #0]
 8007308:	2d00      	cmp	r5, #0
 800730a:	da03      	bge.n	8007314 <_printf_i+0xc8>
 800730c:	232d      	movs	r3, #45	; 0x2d
 800730e:	426d      	negs	r5, r5
 8007310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007314:	485e      	ldr	r0, [pc, #376]	; (8007490 <_printf_i+0x244>)
 8007316:	230a      	movs	r3, #10
 8007318:	e019      	b.n	800734e <_printf_i+0x102>
 800731a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800731e:	6805      	ldr	r5, [r0, #0]
 8007320:	600b      	str	r3, [r1, #0]
 8007322:	bf18      	it	ne
 8007324:	b22d      	sxthne	r5, r5
 8007326:	e7ef      	b.n	8007308 <_printf_i+0xbc>
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	6825      	ldr	r5, [r4, #0]
 800732c:	1d18      	adds	r0, r3, #4
 800732e:	6008      	str	r0, [r1, #0]
 8007330:	0628      	lsls	r0, r5, #24
 8007332:	d501      	bpl.n	8007338 <_printf_i+0xec>
 8007334:	681d      	ldr	r5, [r3, #0]
 8007336:	e002      	b.n	800733e <_printf_i+0xf2>
 8007338:	0669      	lsls	r1, r5, #25
 800733a:	d5fb      	bpl.n	8007334 <_printf_i+0xe8>
 800733c:	881d      	ldrh	r5, [r3, #0]
 800733e:	4854      	ldr	r0, [pc, #336]	; (8007490 <_printf_i+0x244>)
 8007340:	2f6f      	cmp	r7, #111	; 0x6f
 8007342:	bf0c      	ite	eq
 8007344:	2308      	moveq	r3, #8
 8007346:	230a      	movne	r3, #10
 8007348:	2100      	movs	r1, #0
 800734a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800734e:	6866      	ldr	r6, [r4, #4]
 8007350:	60a6      	str	r6, [r4, #8]
 8007352:	2e00      	cmp	r6, #0
 8007354:	bfa2      	ittt	ge
 8007356:	6821      	ldrge	r1, [r4, #0]
 8007358:	f021 0104 	bicge.w	r1, r1, #4
 800735c:	6021      	strge	r1, [r4, #0]
 800735e:	b90d      	cbnz	r5, 8007364 <_printf_i+0x118>
 8007360:	2e00      	cmp	r6, #0
 8007362:	d04d      	beq.n	8007400 <_printf_i+0x1b4>
 8007364:	4616      	mov	r6, r2
 8007366:	fbb5 f1f3 	udiv	r1, r5, r3
 800736a:	fb03 5711 	mls	r7, r3, r1, r5
 800736e:	5dc7      	ldrb	r7, [r0, r7]
 8007370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007374:	462f      	mov	r7, r5
 8007376:	42bb      	cmp	r3, r7
 8007378:	460d      	mov	r5, r1
 800737a:	d9f4      	bls.n	8007366 <_printf_i+0x11a>
 800737c:	2b08      	cmp	r3, #8
 800737e:	d10b      	bne.n	8007398 <_printf_i+0x14c>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	07df      	lsls	r7, r3, #31
 8007384:	d508      	bpl.n	8007398 <_printf_i+0x14c>
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	6861      	ldr	r1, [r4, #4]
 800738a:	4299      	cmp	r1, r3
 800738c:	bfde      	ittt	le
 800738e:	2330      	movle	r3, #48	; 0x30
 8007390:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007394:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007398:	1b92      	subs	r2, r2, r6
 800739a:	6122      	str	r2, [r4, #16]
 800739c:	f8cd a000 	str.w	sl, [sp]
 80073a0:	464b      	mov	r3, r9
 80073a2:	aa03      	add	r2, sp, #12
 80073a4:	4621      	mov	r1, r4
 80073a6:	4640      	mov	r0, r8
 80073a8:	f7ff fee2 	bl	8007170 <_printf_common>
 80073ac:	3001      	adds	r0, #1
 80073ae:	d14c      	bne.n	800744a <_printf_i+0x1fe>
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	b004      	add	sp, #16
 80073b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ba:	4835      	ldr	r0, [pc, #212]	; (8007490 <_printf_i+0x244>)
 80073bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	680e      	ldr	r6, [r1, #0]
 80073c4:	061f      	lsls	r7, r3, #24
 80073c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80073ca:	600e      	str	r6, [r1, #0]
 80073cc:	d514      	bpl.n	80073f8 <_printf_i+0x1ac>
 80073ce:	07d9      	lsls	r1, r3, #31
 80073d0:	bf44      	itt	mi
 80073d2:	f043 0320 	orrmi.w	r3, r3, #32
 80073d6:	6023      	strmi	r3, [r4, #0]
 80073d8:	b91d      	cbnz	r5, 80073e2 <_printf_i+0x196>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	f023 0320 	bic.w	r3, r3, #32
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	2310      	movs	r3, #16
 80073e4:	e7b0      	b.n	8007348 <_printf_i+0xfc>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f043 0320 	orr.w	r3, r3, #32
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	2378      	movs	r3, #120	; 0x78
 80073f0:	4828      	ldr	r0, [pc, #160]	; (8007494 <_printf_i+0x248>)
 80073f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073f6:	e7e3      	b.n	80073c0 <_printf_i+0x174>
 80073f8:	065e      	lsls	r6, r3, #25
 80073fa:	bf48      	it	mi
 80073fc:	b2ad      	uxthmi	r5, r5
 80073fe:	e7e6      	b.n	80073ce <_printf_i+0x182>
 8007400:	4616      	mov	r6, r2
 8007402:	e7bb      	b.n	800737c <_printf_i+0x130>
 8007404:	680b      	ldr	r3, [r1, #0]
 8007406:	6826      	ldr	r6, [r4, #0]
 8007408:	6960      	ldr	r0, [r4, #20]
 800740a:	1d1d      	adds	r5, r3, #4
 800740c:	600d      	str	r5, [r1, #0]
 800740e:	0635      	lsls	r5, r6, #24
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	d501      	bpl.n	8007418 <_printf_i+0x1cc>
 8007414:	6018      	str	r0, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0x1d2>
 8007418:	0671      	lsls	r1, r6, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0x1c8>
 800741c:	8018      	strh	r0, [r3, #0]
 800741e:	2300      	movs	r3, #0
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	4616      	mov	r6, r2
 8007424:	e7ba      	b.n	800739c <_printf_i+0x150>
 8007426:	680b      	ldr	r3, [r1, #0]
 8007428:	1d1a      	adds	r2, r3, #4
 800742a:	600a      	str	r2, [r1, #0]
 800742c:	681e      	ldr	r6, [r3, #0]
 800742e:	6862      	ldr	r2, [r4, #4]
 8007430:	2100      	movs	r1, #0
 8007432:	4630      	mov	r0, r6
 8007434:	f7f8 fedc 	bl	80001f0 <memchr>
 8007438:	b108      	cbz	r0, 800743e <_printf_i+0x1f2>
 800743a:	1b80      	subs	r0, r0, r6
 800743c:	6060      	str	r0, [r4, #4]
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	2300      	movs	r3, #0
 8007444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007448:	e7a8      	b.n	800739c <_printf_i+0x150>
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	4632      	mov	r2, r6
 800744e:	4649      	mov	r1, r9
 8007450:	4640      	mov	r0, r8
 8007452:	47d0      	blx	sl
 8007454:	3001      	adds	r0, #1
 8007456:	d0ab      	beq.n	80073b0 <_printf_i+0x164>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	079b      	lsls	r3, r3, #30
 800745c:	d413      	bmi.n	8007486 <_printf_i+0x23a>
 800745e:	68e0      	ldr	r0, [r4, #12]
 8007460:	9b03      	ldr	r3, [sp, #12]
 8007462:	4298      	cmp	r0, r3
 8007464:	bfb8      	it	lt
 8007466:	4618      	movlt	r0, r3
 8007468:	e7a4      	b.n	80073b4 <_printf_i+0x168>
 800746a:	2301      	movs	r3, #1
 800746c:	4632      	mov	r2, r6
 800746e:	4649      	mov	r1, r9
 8007470:	4640      	mov	r0, r8
 8007472:	47d0      	blx	sl
 8007474:	3001      	adds	r0, #1
 8007476:	d09b      	beq.n	80073b0 <_printf_i+0x164>
 8007478:	3501      	adds	r5, #1
 800747a:	68e3      	ldr	r3, [r4, #12]
 800747c:	9903      	ldr	r1, [sp, #12]
 800747e:	1a5b      	subs	r3, r3, r1
 8007480:	42ab      	cmp	r3, r5
 8007482:	dcf2      	bgt.n	800746a <_printf_i+0x21e>
 8007484:	e7eb      	b.n	800745e <_printf_i+0x212>
 8007486:	2500      	movs	r5, #0
 8007488:	f104 0619 	add.w	r6, r4, #25
 800748c:	e7f5      	b.n	800747a <_printf_i+0x22e>
 800748e:	bf00      	nop
 8007490:	0800998a 	.word	0x0800998a
 8007494:	0800999b 	.word	0x0800999b

08007498 <siprintf>:
 8007498:	b40e      	push	{r1, r2, r3}
 800749a:	b500      	push	{lr}
 800749c:	b09c      	sub	sp, #112	; 0x70
 800749e:	ab1d      	add	r3, sp, #116	; 0x74
 80074a0:	9002      	str	r0, [sp, #8]
 80074a2:	9006      	str	r0, [sp, #24]
 80074a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074a8:	4809      	ldr	r0, [pc, #36]	; (80074d0 <siprintf+0x38>)
 80074aa:	9107      	str	r1, [sp, #28]
 80074ac:	9104      	str	r1, [sp, #16]
 80074ae:	4909      	ldr	r1, [pc, #36]	; (80074d4 <siprintf+0x3c>)
 80074b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	6800      	ldr	r0, [r0, #0]
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	a902      	add	r1, sp, #8
 80074bc:	f001 fb32 	bl	8008b24 <_svfiprintf_r>
 80074c0:	9b02      	ldr	r3, [sp, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	b01c      	add	sp, #112	; 0x70
 80074c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074cc:	b003      	add	sp, #12
 80074ce:	4770      	bx	lr
 80074d0:	2000001c 	.word	0x2000001c
 80074d4:	ffff0208 	.word	0xffff0208

080074d8 <quorem>:
 80074d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	6903      	ldr	r3, [r0, #16]
 80074de:	690c      	ldr	r4, [r1, #16]
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	4607      	mov	r7, r0
 80074e4:	f2c0 8081 	blt.w	80075ea <quorem+0x112>
 80074e8:	3c01      	subs	r4, #1
 80074ea:	f101 0814 	add.w	r8, r1, #20
 80074ee:	f100 0514 	add.w	r5, r0, #20
 80074f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007500:	3301      	adds	r3, #1
 8007502:	429a      	cmp	r2, r3
 8007504:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007508:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800750c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007510:	d331      	bcc.n	8007576 <quorem+0x9e>
 8007512:	f04f 0e00 	mov.w	lr, #0
 8007516:	4640      	mov	r0, r8
 8007518:	46ac      	mov	ip, r5
 800751a:	46f2      	mov	sl, lr
 800751c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007520:	b293      	uxth	r3, r2
 8007522:	fb06 e303 	mla	r3, r6, r3, lr
 8007526:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800752a:	b29b      	uxth	r3, r3
 800752c:	ebaa 0303 	sub.w	r3, sl, r3
 8007530:	0c12      	lsrs	r2, r2, #16
 8007532:	f8dc a000 	ldr.w	sl, [ip]
 8007536:	fb06 e202 	mla	r2, r6, r2, lr
 800753a:	fa13 f38a 	uxtah	r3, r3, sl
 800753e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007542:	fa1f fa82 	uxth.w	sl, r2
 8007546:	f8dc 2000 	ldr.w	r2, [ip]
 800754a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800754e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007558:	4581      	cmp	r9, r0
 800755a:	f84c 3b04 	str.w	r3, [ip], #4
 800755e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007562:	d2db      	bcs.n	800751c <quorem+0x44>
 8007564:	f855 300b 	ldr.w	r3, [r5, fp]
 8007568:	b92b      	cbnz	r3, 8007576 <quorem+0x9e>
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	3b04      	subs	r3, #4
 800756e:	429d      	cmp	r5, r3
 8007570:	461a      	mov	r2, r3
 8007572:	d32e      	bcc.n	80075d2 <quorem+0xfa>
 8007574:	613c      	str	r4, [r7, #16]
 8007576:	4638      	mov	r0, r7
 8007578:	f001 f8be 	bl	80086f8 <__mcmp>
 800757c:	2800      	cmp	r0, #0
 800757e:	db24      	blt.n	80075ca <quorem+0xf2>
 8007580:	3601      	adds	r6, #1
 8007582:	4628      	mov	r0, r5
 8007584:	f04f 0c00 	mov.w	ip, #0
 8007588:	f858 2b04 	ldr.w	r2, [r8], #4
 800758c:	f8d0 e000 	ldr.w	lr, [r0]
 8007590:	b293      	uxth	r3, r2
 8007592:	ebac 0303 	sub.w	r3, ip, r3
 8007596:	0c12      	lsrs	r2, r2, #16
 8007598:	fa13 f38e 	uxtah	r3, r3, lr
 800759c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075aa:	45c1      	cmp	r9, r8
 80075ac:	f840 3b04 	str.w	r3, [r0], #4
 80075b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075b4:	d2e8      	bcs.n	8007588 <quorem+0xb0>
 80075b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075be:	b922      	cbnz	r2, 80075ca <quorem+0xf2>
 80075c0:	3b04      	subs	r3, #4
 80075c2:	429d      	cmp	r5, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	d30a      	bcc.n	80075de <quorem+0x106>
 80075c8:	613c      	str	r4, [r7, #16]
 80075ca:	4630      	mov	r0, r6
 80075cc:	b003      	add	sp, #12
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	d1cc      	bne.n	8007574 <quorem+0x9c>
 80075da:	3c01      	subs	r4, #1
 80075dc:	e7c7      	b.n	800756e <quorem+0x96>
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	d1f0      	bne.n	80075c8 <quorem+0xf0>
 80075e6:	3c01      	subs	r4, #1
 80075e8:	e7eb      	b.n	80075c2 <quorem+0xea>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e7ee      	b.n	80075cc <quorem+0xf4>
	...

080075f0 <_dtoa_r>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	ed2d 8b02 	vpush	{d8}
 80075f8:	ec57 6b10 	vmov	r6, r7, d0
 80075fc:	b095      	sub	sp, #84	; 0x54
 80075fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007600:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800760a:	4604      	mov	r4, r0
 800760c:	9209      	str	r2, [sp, #36]	; 0x24
 800760e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007610:	b975      	cbnz	r5, 8007630 <_dtoa_r+0x40>
 8007612:	2010      	movs	r0, #16
 8007614:	f000 fddc 	bl	80081d0 <malloc>
 8007618:	4602      	mov	r2, r0
 800761a:	6260      	str	r0, [r4, #36]	; 0x24
 800761c:	b920      	cbnz	r0, 8007628 <_dtoa_r+0x38>
 800761e:	4bb2      	ldr	r3, [pc, #712]	; (80078e8 <_dtoa_r+0x2f8>)
 8007620:	21ea      	movs	r1, #234	; 0xea
 8007622:	48b2      	ldr	r0, [pc, #712]	; (80078ec <_dtoa_r+0x2fc>)
 8007624:	f001 fb8e 	bl	8008d44 <__assert_func>
 8007628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800762c:	6005      	str	r5, [r0, #0]
 800762e:	60c5      	str	r5, [r0, #12]
 8007630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007632:	6819      	ldr	r1, [r3, #0]
 8007634:	b151      	cbz	r1, 800764c <_dtoa_r+0x5c>
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	604a      	str	r2, [r1, #4]
 800763a:	2301      	movs	r3, #1
 800763c:	4093      	lsls	r3, r2
 800763e:	608b      	str	r3, [r1, #8]
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fe1b 	bl	800827c <_Bfree>
 8007646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	1e3b      	subs	r3, r7, #0
 800764e:	bfb9      	ittee	lt
 8007650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007654:	9303      	strlt	r3, [sp, #12]
 8007656:	2300      	movge	r3, #0
 8007658:	f8c8 3000 	strge.w	r3, [r8]
 800765c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007660:	4ba3      	ldr	r3, [pc, #652]	; (80078f0 <_dtoa_r+0x300>)
 8007662:	bfbc      	itt	lt
 8007664:	2201      	movlt	r2, #1
 8007666:	f8c8 2000 	strlt.w	r2, [r8]
 800766a:	ea33 0309 	bics.w	r3, r3, r9
 800766e:	d11b      	bne.n	80076a8 <_dtoa_r+0xb8>
 8007670:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007672:	f242 730f 	movw	r3, #9999	; 0x270f
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800767c:	4333      	orrs	r3, r6
 800767e:	f000 857a 	beq.w	8008176 <_dtoa_r+0xb86>
 8007682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007684:	b963      	cbnz	r3, 80076a0 <_dtoa_r+0xb0>
 8007686:	4b9b      	ldr	r3, [pc, #620]	; (80078f4 <_dtoa_r+0x304>)
 8007688:	e024      	b.n	80076d4 <_dtoa_r+0xe4>
 800768a:	4b9b      	ldr	r3, [pc, #620]	; (80078f8 <_dtoa_r+0x308>)
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	9800      	ldr	r0, [sp, #0]
 8007696:	b015      	add	sp, #84	; 0x54
 8007698:	ecbd 8b02 	vpop	{d8}
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	4b94      	ldr	r3, [pc, #592]	; (80078f4 <_dtoa_r+0x304>)
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	3303      	adds	r3, #3
 80076a6:	e7f3      	b.n	8007690 <_dtoa_r+0xa0>
 80076a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	ec51 0b17 	vmov	r0, r1, d7
 80076b2:	2300      	movs	r3, #0
 80076b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80076b8:	f7f9 fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80076bc:	4680      	mov	r8, r0
 80076be:	b158      	cbz	r0, 80076d8 <_dtoa_r+0xe8>
 80076c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076c2:	2301      	movs	r3, #1
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8551 	beq.w	8008170 <_dtoa_r+0xb80>
 80076ce:	488b      	ldr	r0, [pc, #556]	; (80078fc <_dtoa_r+0x30c>)
 80076d0:	6018      	str	r0, [r3, #0]
 80076d2:	1e43      	subs	r3, r0, #1
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	e7dd      	b.n	8007694 <_dtoa_r+0xa4>
 80076d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80076dc:	aa12      	add	r2, sp, #72	; 0x48
 80076de:	a913      	add	r1, sp, #76	; 0x4c
 80076e0:	4620      	mov	r0, r4
 80076e2:	f001 f8ad 	bl	8008840 <__d2b>
 80076e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076ea:	4683      	mov	fp, r0
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	d07c      	beq.n	80077ea <_dtoa_r+0x1fa>
 80076f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80076f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80076fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800770a:	4b7d      	ldr	r3, [pc, #500]	; (8007900 <_dtoa_r+0x310>)
 800770c:	2200      	movs	r2, #0
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f8 fdc1 	bl	8000298 <__aeabi_dsub>
 8007716:	a36e      	add	r3, pc, #440	; (adr r3, 80078d0 <_dtoa_r+0x2e0>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 ff74 	bl	8000608 <__aeabi_dmul>
 8007720:	a36d      	add	r3, pc, #436	; (adr r3, 80078d8 <_dtoa_r+0x2e8>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f7f8 fdb9 	bl	800029c <__adddf3>
 800772a:	4606      	mov	r6, r0
 800772c:	4628      	mov	r0, r5
 800772e:	460f      	mov	r7, r1
 8007730:	f7f8 ff00 	bl	8000534 <__aeabi_i2d>
 8007734:	a36a      	add	r3, pc, #424	; (adr r3, 80078e0 <_dtoa_r+0x2f0>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f7f8 ff65 	bl	8000608 <__aeabi_dmul>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f8 fda9 	bl	800029c <__adddf3>
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	f7f9 fa0b 	bl	8000b68 <__aeabi_d2iz>
 8007752:	2200      	movs	r2, #0
 8007754:	4682      	mov	sl, r0
 8007756:	2300      	movs	r3, #0
 8007758:	4630      	mov	r0, r6
 800775a:	4639      	mov	r1, r7
 800775c:	f7f9 f9c6 	bl	8000aec <__aeabi_dcmplt>
 8007760:	b148      	cbz	r0, 8007776 <_dtoa_r+0x186>
 8007762:	4650      	mov	r0, sl
 8007764:	f7f8 fee6 	bl	8000534 <__aeabi_i2d>
 8007768:	4632      	mov	r2, r6
 800776a:	463b      	mov	r3, r7
 800776c:	f7f9 f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007770:	b908      	cbnz	r0, 8007776 <_dtoa_r+0x186>
 8007772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007776:	f1ba 0f16 	cmp.w	sl, #22
 800777a:	d854      	bhi.n	8007826 <_dtoa_r+0x236>
 800777c:	4b61      	ldr	r3, [pc, #388]	; (8007904 <_dtoa_r+0x314>)
 800777e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800778a:	f7f9 f9af 	bl	8000aec <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	d04b      	beq.n	800782a <_dtoa_r+0x23a>
 8007792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007796:	2300      	movs	r3, #0
 8007798:	930e      	str	r3, [sp, #56]	; 0x38
 800779a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800779c:	1b5d      	subs	r5, r3, r5
 800779e:	1e6b      	subs	r3, r5, #1
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	bf43      	ittte	mi
 80077a4:	2300      	movmi	r3, #0
 80077a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80077aa:	9304      	strmi	r3, [sp, #16]
 80077ac:	f04f 0800 	movpl.w	r8, #0
 80077b0:	f1ba 0f00 	cmp.w	sl, #0
 80077b4:	db3b      	blt.n	800782e <_dtoa_r+0x23e>
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80077bc:	4453      	add	r3, sl
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	2300      	movs	r3, #0
 80077c2:	9306      	str	r3, [sp, #24]
 80077c4:	9b05      	ldr	r3, [sp, #20]
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d869      	bhi.n	800789e <_dtoa_r+0x2ae>
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	bfc4      	itt	gt
 80077ce:	3b04      	subgt	r3, #4
 80077d0:	9305      	strgt	r3, [sp, #20]
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	f1a3 0302 	sub.w	r3, r3, #2
 80077d8:	bfcc      	ite	gt
 80077da:	2500      	movgt	r5, #0
 80077dc:	2501      	movle	r5, #1
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d869      	bhi.n	80078b6 <_dtoa_r+0x2c6>
 80077e2:	e8df f003 	tbb	[pc, r3]
 80077e6:	4e2c      	.short	0x4e2c
 80077e8:	5a4c      	.short	0x5a4c
 80077ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80077ee:	441d      	add	r5, r3
 80077f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	bfc1      	itttt	gt
 80077f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007800:	fa09 f303 	lslgt.w	r3, r9, r3
 8007804:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007808:	bfda      	itte	le
 800780a:	f1c3 0320 	rsble	r3, r3, #32
 800780e:	fa06 f003 	lslle.w	r0, r6, r3
 8007812:	4318      	orrgt	r0, r3
 8007814:	f7f8 fe7e 	bl	8000514 <__aeabi_ui2d>
 8007818:	2301      	movs	r3, #1
 800781a:	4606      	mov	r6, r0
 800781c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007820:	3d01      	subs	r5, #1
 8007822:	9310      	str	r3, [sp, #64]	; 0x40
 8007824:	e771      	b.n	800770a <_dtoa_r+0x11a>
 8007826:	2301      	movs	r3, #1
 8007828:	e7b6      	b.n	8007798 <_dtoa_r+0x1a8>
 800782a:	900e      	str	r0, [sp, #56]	; 0x38
 800782c:	e7b5      	b.n	800779a <_dtoa_r+0x1aa>
 800782e:	f1ca 0300 	rsb	r3, sl, #0
 8007832:	9306      	str	r3, [sp, #24]
 8007834:	2300      	movs	r3, #0
 8007836:	eba8 080a 	sub.w	r8, r8, sl
 800783a:	930d      	str	r3, [sp, #52]	; 0x34
 800783c:	e7c2      	b.n	80077c4 <_dtoa_r+0x1d4>
 800783e:	2300      	movs	r3, #0
 8007840:	9308      	str	r3, [sp, #32]
 8007842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	dc39      	bgt.n	80078bc <_dtoa_r+0x2cc>
 8007848:	f04f 0901 	mov.w	r9, #1
 800784c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007850:	464b      	mov	r3, r9
 8007852:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007856:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007858:	2200      	movs	r2, #0
 800785a:	6042      	str	r2, [r0, #4]
 800785c:	2204      	movs	r2, #4
 800785e:	f102 0614 	add.w	r6, r2, #20
 8007862:	429e      	cmp	r6, r3
 8007864:	6841      	ldr	r1, [r0, #4]
 8007866:	d92f      	bls.n	80078c8 <_dtoa_r+0x2d8>
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fcc7 	bl	80081fc <_Balloc>
 800786e:	9000      	str	r0, [sp, #0]
 8007870:	2800      	cmp	r0, #0
 8007872:	d14b      	bne.n	800790c <_dtoa_r+0x31c>
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <_dtoa_r+0x318>)
 8007876:	4602      	mov	r2, r0
 8007878:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800787c:	e6d1      	b.n	8007622 <_dtoa_r+0x32>
 800787e:	2301      	movs	r3, #1
 8007880:	e7de      	b.n	8007840 <_dtoa_r+0x250>
 8007882:	2300      	movs	r3, #0
 8007884:	9308      	str	r3, [sp, #32]
 8007886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007888:	eb0a 0903 	add.w	r9, sl, r3
 800788c:	f109 0301 	add.w	r3, r9, #1
 8007890:	2b01      	cmp	r3, #1
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	bfb8      	it	lt
 8007896:	2301      	movlt	r3, #1
 8007898:	e7dd      	b.n	8007856 <_dtoa_r+0x266>
 800789a:	2301      	movs	r3, #1
 800789c:	e7f2      	b.n	8007884 <_dtoa_r+0x294>
 800789e:	2501      	movs	r5, #1
 80078a0:	2300      	movs	r3, #0
 80078a2:	9305      	str	r3, [sp, #20]
 80078a4:	9508      	str	r5, [sp, #32]
 80078a6:	f04f 39ff 	mov.w	r9, #4294967295
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80078b0:	2312      	movs	r3, #18
 80078b2:	9209      	str	r2, [sp, #36]	; 0x24
 80078b4:	e7cf      	b.n	8007856 <_dtoa_r+0x266>
 80078b6:	2301      	movs	r3, #1
 80078b8:	9308      	str	r3, [sp, #32]
 80078ba:	e7f4      	b.n	80078a6 <_dtoa_r+0x2b6>
 80078bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80078c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80078c4:	464b      	mov	r3, r9
 80078c6:	e7c6      	b.n	8007856 <_dtoa_r+0x266>
 80078c8:	3101      	adds	r1, #1
 80078ca:	6041      	str	r1, [r0, #4]
 80078cc:	0052      	lsls	r2, r2, #1
 80078ce:	e7c6      	b.n	800785e <_dtoa_r+0x26e>
 80078d0:	636f4361 	.word	0x636f4361
 80078d4:	3fd287a7 	.word	0x3fd287a7
 80078d8:	8b60c8b3 	.word	0x8b60c8b3
 80078dc:	3fc68a28 	.word	0x3fc68a28
 80078e0:	509f79fb 	.word	0x509f79fb
 80078e4:	3fd34413 	.word	0x3fd34413
 80078e8:	080099b9 	.word	0x080099b9
 80078ec:	080099d0 	.word	0x080099d0
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	080099b5 	.word	0x080099b5
 80078f8:	080099ac 	.word	0x080099ac
 80078fc:	08009989 	.word	0x08009989
 8007900:	3ff80000 	.word	0x3ff80000
 8007904:	08009ac8 	.word	0x08009ac8
 8007908:	08009a2f 	.word	0x08009a2f
 800790c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800790e:	9a00      	ldr	r2, [sp, #0]
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	2b0e      	cmp	r3, #14
 8007916:	f200 80ad 	bhi.w	8007a74 <_dtoa_r+0x484>
 800791a:	2d00      	cmp	r5, #0
 800791c:	f000 80aa 	beq.w	8007a74 <_dtoa_r+0x484>
 8007920:	f1ba 0f00 	cmp.w	sl, #0
 8007924:	dd36      	ble.n	8007994 <_dtoa_r+0x3a4>
 8007926:	4ac3      	ldr	r2, [pc, #780]	; (8007c34 <_dtoa_r+0x644>)
 8007928:	f00a 030f 	and.w	r3, sl, #15
 800792c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007930:	ed93 7b00 	vldr	d7, [r3]
 8007934:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007938:	ea4f 172a 	mov.w	r7, sl, asr #4
 800793c:	eeb0 8a47 	vmov.f32	s16, s14
 8007940:	eef0 8a67 	vmov.f32	s17, s15
 8007944:	d016      	beq.n	8007974 <_dtoa_r+0x384>
 8007946:	4bbc      	ldr	r3, [pc, #752]	; (8007c38 <_dtoa_r+0x648>)
 8007948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800794c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007950:	f7f8 ff84 	bl	800085c <__aeabi_ddiv>
 8007954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007958:	f007 070f 	and.w	r7, r7, #15
 800795c:	2503      	movs	r5, #3
 800795e:	4eb6      	ldr	r6, [pc, #728]	; (8007c38 <_dtoa_r+0x648>)
 8007960:	b957      	cbnz	r7, 8007978 <_dtoa_r+0x388>
 8007962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007966:	ec53 2b18 	vmov	r2, r3, d8
 800796a:	f7f8 ff77 	bl	800085c <__aeabi_ddiv>
 800796e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007972:	e029      	b.n	80079c8 <_dtoa_r+0x3d8>
 8007974:	2502      	movs	r5, #2
 8007976:	e7f2      	b.n	800795e <_dtoa_r+0x36e>
 8007978:	07f9      	lsls	r1, r7, #31
 800797a:	d508      	bpl.n	800798e <_dtoa_r+0x39e>
 800797c:	ec51 0b18 	vmov	r0, r1, d8
 8007980:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007984:	f7f8 fe40 	bl	8000608 <__aeabi_dmul>
 8007988:	ec41 0b18 	vmov	d8, r0, r1
 800798c:	3501      	adds	r5, #1
 800798e:	107f      	asrs	r7, r7, #1
 8007990:	3608      	adds	r6, #8
 8007992:	e7e5      	b.n	8007960 <_dtoa_r+0x370>
 8007994:	f000 80a6 	beq.w	8007ae4 <_dtoa_r+0x4f4>
 8007998:	f1ca 0600 	rsb	r6, sl, #0
 800799c:	4ba5      	ldr	r3, [pc, #660]	; (8007c34 <_dtoa_r+0x644>)
 800799e:	4fa6      	ldr	r7, [pc, #664]	; (8007c38 <_dtoa_r+0x648>)
 80079a0:	f006 020f 	and.w	r2, r6, #15
 80079a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079b0:	f7f8 fe2a 	bl	8000608 <__aeabi_dmul>
 80079b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b8:	1136      	asrs	r6, r6, #4
 80079ba:	2300      	movs	r3, #0
 80079bc:	2502      	movs	r5, #2
 80079be:	2e00      	cmp	r6, #0
 80079c0:	f040 8085 	bne.w	8007ace <_dtoa_r+0x4de>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1d2      	bne.n	800796e <_dtoa_r+0x37e>
 80079c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 808c 	beq.w	8007ae8 <_dtoa_r+0x4f8>
 80079d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079d4:	4b99      	ldr	r3, [pc, #612]	; (8007c3c <_dtoa_r+0x64c>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f9 f886 	bl	8000aec <__aeabi_dcmplt>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f000 8081 	beq.w	8007ae8 <_dtoa_r+0x4f8>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d07d      	beq.n	8007ae8 <_dtoa_r+0x4f8>
 80079ec:	f1b9 0f00 	cmp.w	r9, #0
 80079f0:	dd3c      	ble.n	8007a6c <_dtoa_r+0x47c>
 80079f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	2200      	movs	r2, #0
 80079fa:	4b91      	ldr	r3, [pc, #580]	; (8007c40 <_dtoa_r+0x650>)
 80079fc:	4630      	mov	r0, r6
 80079fe:	4639      	mov	r1, r7
 8007a00:	f7f8 fe02 	bl	8000608 <__aeabi_dmul>
 8007a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a08:	3501      	adds	r5, #1
 8007a0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007a0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a12:	4628      	mov	r0, r5
 8007a14:	f7f8 fd8e 	bl	8000534 <__aeabi_i2d>
 8007a18:	4632      	mov	r2, r6
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	f7f8 fdf4 	bl	8000608 <__aeabi_dmul>
 8007a20:	4b88      	ldr	r3, [pc, #544]	; (8007c44 <_dtoa_r+0x654>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	f7f8 fc3a 	bl	800029c <__adddf3>
 8007a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d15c      	bne.n	8007af2 <_dtoa_r+0x502>
 8007a38:	4b83      	ldr	r3, [pc, #524]	; (8007c48 <_dtoa_r+0x658>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4639      	mov	r1, r7
 8007a40:	f7f8 fc2a 	bl	8000298 <__aeabi_dsub>
 8007a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a48:	4606      	mov	r6, r0
 8007a4a:	460f      	mov	r7, r1
 8007a4c:	f7f9 f86c 	bl	8000b28 <__aeabi_dcmpgt>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f040 8296 	bne.w	8007f82 <_dtoa_r+0x992>
 8007a56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a60:	4639      	mov	r1, r7
 8007a62:	f7f9 f843 	bl	8000aec <__aeabi_dcmplt>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f040 8288 	bne.w	8007f7c <_dtoa_r+0x98c>
 8007a6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f2c0 8158 	blt.w	8007d2c <_dtoa_r+0x73c>
 8007a7c:	f1ba 0f0e 	cmp.w	sl, #14
 8007a80:	f300 8154 	bgt.w	8007d2c <_dtoa_r+0x73c>
 8007a84:	4b6b      	ldr	r3, [pc, #428]	; (8007c34 <_dtoa_r+0x644>)
 8007a86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f280 80e3 	bge.w	8007c5c <_dtoa_r+0x66c>
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f300 80df 	bgt.w	8007c5c <_dtoa_r+0x66c>
 8007a9e:	f040 826d 	bne.w	8007f7c <_dtoa_r+0x98c>
 8007aa2:	4b69      	ldr	r3, [pc, #420]	; (8007c48 <_dtoa_r+0x658>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	f7f8 fdad 	bl	8000608 <__aeabi_dmul>
 8007aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ab2:	f7f9 f82f 	bl	8000b14 <__aeabi_dcmpge>
 8007ab6:	9e01      	ldr	r6, [sp, #4]
 8007ab8:	4637      	mov	r7, r6
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f040 8243 	bne.w	8007f46 <_dtoa_r+0x956>
 8007ac0:	9d00      	ldr	r5, [sp, #0]
 8007ac2:	2331      	movs	r3, #49	; 0x31
 8007ac4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ac8:	f10a 0a01 	add.w	sl, sl, #1
 8007acc:	e23f      	b.n	8007f4e <_dtoa_r+0x95e>
 8007ace:	07f2      	lsls	r2, r6, #31
 8007ad0:	d505      	bpl.n	8007ade <_dtoa_r+0x4ee>
 8007ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad6:	f7f8 fd97 	bl	8000608 <__aeabi_dmul>
 8007ada:	3501      	adds	r5, #1
 8007adc:	2301      	movs	r3, #1
 8007ade:	1076      	asrs	r6, r6, #1
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	e76c      	b.n	80079be <_dtoa_r+0x3ce>
 8007ae4:	2502      	movs	r5, #2
 8007ae6:	e76f      	b.n	80079c8 <_dtoa_r+0x3d8>
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	f8cd a01c 	str.w	sl, [sp, #28]
 8007aee:	930c      	str	r3, [sp, #48]	; 0x30
 8007af0:	e78d      	b.n	8007a0e <_dtoa_r+0x41e>
 8007af2:	9900      	ldr	r1, [sp, #0]
 8007af4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af8:	4b4e      	ldr	r3, [pc, #312]	; (8007c34 <_dtoa_r+0x644>)
 8007afa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007afe:	4401      	add	r1, r0
 8007b00:	9102      	str	r1, [sp, #8]
 8007b02:	9908      	ldr	r1, [sp, #32]
 8007b04:	eeb0 8a47 	vmov.f32	s16, s14
 8007b08:	eef0 8a67 	vmov.f32	s17, s15
 8007b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b14:	2900      	cmp	r1, #0
 8007b16:	d045      	beq.n	8007ba4 <_dtoa_r+0x5b4>
 8007b18:	494c      	ldr	r1, [pc, #304]	; (8007c4c <_dtoa_r+0x65c>)
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	f7f8 fe9e 	bl	800085c <__aeabi_ddiv>
 8007b20:	ec53 2b18 	vmov	r2, r3, d8
 8007b24:	f7f8 fbb8 	bl	8000298 <__aeabi_dsub>
 8007b28:	9d00      	ldr	r5, [sp, #0]
 8007b2a:	ec41 0b18 	vmov	d8, r0, r1
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7f9 f819 	bl	8000b68 <__aeabi_d2iz>
 8007b36:	900c      	str	r0, [sp, #48]	; 0x30
 8007b38:	f7f8 fcfc 	bl	8000534 <__aeabi_i2d>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f8 fba8 	bl	8000298 <__aeabi_dsub>
 8007b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4a:	3330      	adds	r3, #48	; 0x30
 8007b4c:	f805 3b01 	strb.w	r3, [r5], #1
 8007b50:	ec53 2b18 	vmov	r2, r3, d8
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	f7f8 ffc8 	bl	8000aec <__aeabi_dcmplt>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d165      	bne.n	8007c2c <_dtoa_r+0x63c>
 8007b60:	4632      	mov	r2, r6
 8007b62:	463b      	mov	r3, r7
 8007b64:	4935      	ldr	r1, [pc, #212]	; (8007c3c <_dtoa_r+0x64c>)
 8007b66:	2000      	movs	r0, #0
 8007b68:	f7f8 fb96 	bl	8000298 <__aeabi_dsub>
 8007b6c:	ec53 2b18 	vmov	r2, r3, d8
 8007b70:	f7f8 ffbc 	bl	8000aec <__aeabi_dcmplt>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	f040 80b9 	bne.w	8007cec <_dtoa_r+0x6fc>
 8007b7a:	9b02      	ldr	r3, [sp, #8]
 8007b7c:	429d      	cmp	r5, r3
 8007b7e:	f43f af75 	beq.w	8007a6c <_dtoa_r+0x47c>
 8007b82:	4b2f      	ldr	r3, [pc, #188]	; (8007c40 <_dtoa_r+0x650>)
 8007b84:	ec51 0b18 	vmov	r0, r1, d8
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f7f8 fd3d 	bl	8000608 <__aeabi_dmul>
 8007b8e:	4b2c      	ldr	r3, [pc, #176]	; (8007c40 <_dtoa_r+0x650>)
 8007b90:	ec41 0b18 	vmov	d8, r0, r1
 8007b94:	2200      	movs	r2, #0
 8007b96:	4630      	mov	r0, r6
 8007b98:	4639      	mov	r1, r7
 8007b9a:	f7f8 fd35 	bl	8000608 <__aeabi_dmul>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	e7c4      	b.n	8007b2e <_dtoa_r+0x53e>
 8007ba4:	ec51 0b17 	vmov	r0, r1, d7
 8007ba8:	f7f8 fd2e 	bl	8000608 <__aeabi_dmul>
 8007bac:	9b02      	ldr	r3, [sp, #8]
 8007bae:	9d00      	ldr	r5, [sp, #0]
 8007bb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb2:	ec41 0b18 	vmov	d8, r0, r1
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7f8 ffd5 	bl	8000b68 <__aeabi_d2iz>
 8007bbe:	9011      	str	r0, [sp, #68]	; 0x44
 8007bc0:	f7f8 fcb8 	bl	8000534 <__aeabi_i2d>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 fb64 	bl	8000298 <__aeabi_dsub>
 8007bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bd2:	3330      	adds	r3, #48	; 0x30
 8007bd4:	f805 3b01 	strb.w	r3, [r5], #1
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	429d      	cmp	r5, r3
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	d134      	bne.n	8007c50 <_dtoa_r+0x660>
 8007be6:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <_dtoa_r+0x65c>)
 8007be8:	ec51 0b18 	vmov	r0, r1, d8
 8007bec:	f7f8 fb56 	bl	800029c <__adddf3>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f8 ff96 	bl	8000b28 <__aeabi_dcmpgt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d175      	bne.n	8007cec <_dtoa_r+0x6fc>
 8007c00:	ec53 2b18 	vmov	r2, r3, d8
 8007c04:	4911      	ldr	r1, [pc, #68]	; (8007c4c <_dtoa_r+0x65c>)
 8007c06:	2000      	movs	r0, #0
 8007c08:	f7f8 fb46 	bl	8000298 <__aeabi_dsub>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 ff6a 	bl	8000aec <__aeabi_dcmplt>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f43f af27 	beq.w	8007a6c <_dtoa_r+0x47c>
 8007c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c20:	1e6b      	subs	r3, r5, #1
 8007c22:	930c      	str	r3, [sp, #48]	; 0x30
 8007c24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c28:	2b30      	cmp	r3, #48	; 0x30
 8007c2a:	d0f8      	beq.n	8007c1e <_dtoa_r+0x62e>
 8007c2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007c30:	e04a      	b.n	8007cc8 <_dtoa_r+0x6d8>
 8007c32:	bf00      	nop
 8007c34:	08009ac8 	.word	0x08009ac8
 8007c38:	08009aa0 	.word	0x08009aa0
 8007c3c:	3ff00000 	.word	0x3ff00000
 8007c40:	40240000 	.word	0x40240000
 8007c44:	401c0000 	.word	0x401c0000
 8007c48:	40140000 	.word	0x40140000
 8007c4c:	3fe00000 	.word	0x3fe00000
 8007c50:	4baf      	ldr	r3, [pc, #700]	; (8007f10 <_dtoa_r+0x920>)
 8007c52:	f7f8 fcd9 	bl	8000608 <__aeabi_dmul>
 8007c56:	4606      	mov	r6, r0
 8007c58:	460f      	mov	r7, r1
 8007c5a:	e7ac      	b.n	8007bb6 <_dtoa_r+0x5c6>
 8007c5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c60:	9d00      	ldr	r5, [sp, #0]
 8007c62:	4642      	mov	r2, r8
 8007c64:	464b      	mov	r3, r9
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 fdf7 	bl	800085c <__aeabi_ddiv>
 8007c6e:	f7f8 ff7b 	bl	8000b68 <__aeabi_d2iz>
 8007c72:	9002      	str	r0, [sp, #8]
 8007c74:	f7f8 fc5e 	bl	8000534 <__aeabi_i2d>
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	f7f8 fcc4 	bl	8000608 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fb06 	bl	8000298 <__aeabi_dsub>
 8007c8c:	9e02      	ldr	r6, [sp, #8]
 8007c8e:	9f01      	ldr	r7, [sp, #4]
 8007c90:	3630      	adds	r6, #48	; 0x30
 8007c92:	f805 6b01 	strb.w	r6, [r5], #1
 8007c96:	9e00      	ldr	r6, [sp, #0]
 8007c98:	1bae      	subs	r6, r5, r6
 8007c9a:	42b7      	cmp	r7, r6
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	d137      	bne.n	8007d12 <_dtoa_r+0x722>
 8007ca2:	f7f8 fafb 	bl	800029c <__adddf3>
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	464b      	mov	r3, r9
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	f7f8 ff3b 	bl	8000b28 <__aeabi_dcmpgt>
 8007cb2:	b9c8      	cbnz	r0, 8007ce8 <_dtoa_r+0x6f8>
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cc0:	b110      	cbz	r0, 8007cc8 <_dtoa_r+0x6d8>
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	07d9      	lsls	r1, r3, #31
 8007cc6:	d40f      	bmi.n	8007ce8 <_dtoa_r+0x6f8>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	4659      	mov	r1, fp
 8007ccc:	f000 fad6 	bl	800827c <_Bfree>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	702b      	strb	r3, [r5, #0]
 8007cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd6:	f10a 0001 	add.w	r0, sl, #1
 8007cda:	6018      	str	r0, [r3, #0]
 8007cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f43f acd8 	beq.w	8007694 <_dtoa_r+0xa4>
 8007ce4:	601d      	str	r5, [r3, #0]
 8007ce6:	e4d5      	b.n	8007694 <_dtoa_r+0xa4>
 8007ce8:	f8cd a01c 	str.w	sl, [sp, #28]
 8007cec:	462b      	mov	r3, r5
 8007cee:	461d      	mov	r5, r3
 8007cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cf4:	2a39      	cmp	r2, #57	; 0x39
 8007cf6:	d108      	bne.n	8007d0a <_dtoa_r+0x71a>
 8007cf8:	9a00      	ldr	r2, [sp, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d1f7      	bne.n	8007cee <_dtoa_r+0x6fe>
 8007cfe:	9a07      	ldr	r2, [sp, #28]
 8007d00:	9900      	ldr	r1, [sp, #0]
 8007d02:	3201      	adds	r2, #1
 8007d04:	9207      	str	r2, [sp, #28]
 8007d06:	2230      	movs	r2, #48	; 0x30
 8007d08:	700a      	strb	r2, [r1, #0]
 8007d0a:	781a      	ldrb	r2, [r3, #0]
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	e78c      	b.n	8007c2c <_dtoa_r+0x63c>
 8007d12:	4b7f      	ldr	r3, [pc, #508]	; (8007f10 <_dtoa_r+0x920>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	f7f8 fc77 	bl	8000608 <__aeabi_dmul>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	f7f8 fed9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d09b      	beq.n	8007c62 <_dtoa_r+0x672>
 8007d2a:	e7cd      	b.n	8007cc8 <_dtoa_r+0x6d8>
 8007d2c:	9a08      	ldr	r2, [sp, #32]
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	f000 80c4 	beq.w	8007ebc <_dtoa_r+0x8cc>
 8007d34:	9a05      	ldr	r2, [sp, #20]
 8007d36:	2a01      	cmp	r2, #1
 8007d38:	f300 80a8 	bgt.w	8007e8c <_dtoa_r+0x89c>
 8007d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	f000 80a0 	beq.w	8007e84 <_dtoa_r+0x894>
 8007d44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d48:	9e06      	ldr	r6, [sp, #24]
 8007d4a:	4645      	mov	r5, r8
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	2101      	movs	r1, #1
 8007d50:	441a      	add	r2, r3
 8007d52:	4620      	mov	r0, r4
 8007d54:	4498      	add	r8, r3
 8007d56:	9204      	str	r2, [sp, #16]
 8007d58:	f000 fb4c 	bl	80083f4 <__i2b>
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	dd0b      	ble.n	8007d7a <_dtoa_r+0x78a>
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dd08      	ble.n	8007d7a <_dtoa_r+0x78a>
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	9a04      	ldr	r2, [sp, #16]
 8007d6c:	bfa8      	it	ge
 8007d6e:	462b      	movge	r3, r5
 8007d70:	eba8 0803 	sub.w	r8, r8, r3
 8007d74:	1aed      	subs	r5, r5, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	9b06      	ldr	r3, [sp, #24]
 8007d7c:	b1fb      	cbz	r3, 8007dbe <_dtoa_r+0x7ce>
 8007d7e:	9b08      	ldr	r3, [sp, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 809f 	beq.w	8007ec4 <_dtoa_r+0x8d4>
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	dd11      	ble.n	8007dae <_dtoa_r+0x7be>
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fbec 	bl	800856c <__pow5mult>
 8007d94:	465a      	mov	r2, fp
 8007d96:	4601      	mov	r1, r0
 8007d98:	4607      	mov	r7, r0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fb40 	bl	8008420 <__multiply>
 8007da0:	4659      	mov	r1, fp
 8007da2:	9007      	str	r0, [sp, #28]
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fa69 	bl	800827c <_Bfree>
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	469b      	mov	fp, r3
 8007dae:	9b06      	ldr	r3, [sp, #24]
 8007db0:	1b9a      	subs	r2, r3, r6
 8007db2:	d004      	beq.n	8007dbe <_dtoa_r+0x7ce>
 8007db4:	4659      	mov	r1, fp
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fbd8 	bl	800856c <__pow5mult>
 8007dbc:	4683      	mov	fp, r0
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 fb17 	bl	80083f4 <__i2b>
 8007dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	4606      	mov	r6, r0
 8007dcc:	dd7c      	ble.n	8007ec8 <_dtoa_r+0x8d8>
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fbca 	bl	800856c <__pow5mult>
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	4606      	mov	r6, r0
 8007dde:	dd76      	ble.n	8007ece <_dtoa_r+0x8de>
 8007de0:	2300      	movs	r3, #0
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	6933      	ldr	r3, [r6, #16]
 8007de6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007dea:	6918      	ldr	r0, [r3, #16]
 8007dec:	f000 fab2 	bl	8008354 <__hi0bits>
 8007df0:	f1c0 0020 	rsb	r0, r0, #32
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	4418      	add	r0, r3
 8007df8:	f010 001f 	ands.w	r0, r0, #31
 8007dfc:	f000 8086 	beq.w	8007f0c <_dtoa_r+0x91c>
 8007e00:	f1c0 0320 	rsb	r3, r0, #32
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	dd7f      	ble.n	8007f08 <_dtoa_r+0x918>
 8007e08:	f1c0 001c 	rsb	r0, r0, #28
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	4403      	add	r3, r0
 8007e10:	4480      	add	r8, r0
 8007e12:	4405      	add	r5, r0
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	f1b8 0f00 	cmp.w	r8, #0
 8007e1a:	dd05      	ble.n	8007e28 <_dtoa_r+0x838>
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	4642      	mov	r2, r8
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fbfd 	bl	8008620 <__lshift>
 8007e26:	4683      	mov	fp, r0
 8007e28:	9b04      	ldr	r3, [sp, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	dd05      	ble.n	8007e3a <_dtoa_r+0x84a>
 8007e2e:	4631      	mov	r1, r6
 8007e30:	461a      	mov	r2, r3
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fbf4 	bl	8008620 <__lshift>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d069      	beq.n	8007f14 <_dtoa_r+0x924>
 8007e40:	4631      	mov	r1, r6
 8007e42:	4658      	mov	r0, fp
 8007e44:	f000 fc58 	bl	80086f8 <__mcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	da63      	bge.n	8007f14 <_dtoa_r+0x924>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4659      	mov	r1, fp
 8007e50:	220a      	movs	r2, #10
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fa34 	bl	80082c0 <__multadd>
 8007e58:	9b08      	ldr	r3, [sp, #32]
 8007e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e5e:	4683      	mov	fp, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 818f 	beq.w	8008184 <_dtoa_r+0xb94>
 8007e66:	4639      	mov	r1, r7
 8007e68:	2300      	movs	r3, #0
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 fa27 	bl	80082c0 <__multadd>
 8007e72:	f1b9 0f00 	cmp.w	r9, #0
 8007e76:	4607      	mov	r7, r0
 8007e78:	f300 808e 	bgt.w	8007f98 <_dtoa_r+0x9a8>
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	dc50      	bgt.n	8007f24 <_dtoa_r+0x934>
 8007e82:	e089      	b.n	8007f98 <_dtoa_r+0x9a8>
 8007e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e8a:	e75d      	b.n	8007d48 <_dtoa_r+0x758>
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	1e5e      	subs	r6, r3, #1
 8007e90:	9b06      	ldr	r3, [sp, #24]
 8007e92:	42b3      	cmp	r3, r6
 8007e94:	bfbf      	itttt	lt
 8007e96:	9b06      	ldrlt	r3, [sp, #24]
 8007e98:	9606      	strlt	r6, [sp, #24]
 8007e9a:	1af2      	sublt	r2, r6, r3
 8007e9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007e9e:	bfb6      	itet	lt
 8007ea0:	189b      	addlt	r3, r3, r2
 8007ea2:	1b9e      	subge	r6, r3, r6
 8007ea4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007ea6:	9b01      	ldr	r3, [sp, #4]
 8007ea8:	bfb8      	it	lt
 8007eaa:	2600      	movlt	r6, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfb5      	itete	lt
 8007eb0:	eba8 0503 	sublt.w	r5, r8, r3
 8007eb4:	9b01      	ldrge	r3, [sp, #4]
 8007eb6:	2300      	movlt	r3, #0
 8007eb8:	4645      	movge	r5, r8
 8007eba:	e747      	b.n	8007d4c <_dtoa_r+0x75c>
 8007ebc:	9e06      	ldr	r6, [sp, #24]
 8007ebe:	9f08      	ldr	r7, [sp, #32]
 8007ec0:	4645      	mov	r5, r8
 8007ec2:	e74c      	b.n	8007d5e <_dtoa_r+0x76e>
 8007ec4:	9a06      	ldr	r2, [sp, #24]
 8007ec6:	e775      	b.n	8007db4 <_dtoa_r+0x7c4>
 8007ec8:	9b05      	ldr	r3, [sp, #20]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	dc18      	bgt.n	8007f00 <_dtoa_r+0x910>
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	b9b3      	cbnz	r3, 8007f00 <_dtoa_r+0x910>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed8:	b9a3      	cbnz	r3, 8007f04 <_dtoa_r+0x914>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ee0:	0d1b      	lsrs	r3, r3, #20
 8007ee2:	051b      	lsls	r3, r3, #20
 8007ee4:	b12b      	cbz	r3, 8007ef2 <_dtoa_r+0x902>
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	9304      	str	r3, [sp, #16]
 8007eec:	f108 0801 	add.w	r8, r8, #1
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f47f af74 	bne.w	8007de4 <_dtoa_r+0x7f4>
 8007efc:	2001      	movs	r0, #1
 8007efe:	e779      	b.n	8007df4 <_dtoa_r+0x804>
 8007f00:	2300      	movs	r3, #0
 8007f02:	e7f6      	b.n	8007ef2 <_dtoa_r+0x902>
 8007f04:	9b02      	ldr	r3, [sp, #8]
 8007f06:	e7f4      	b.n	8007ef2 <_dtoa_r+0x902>
 8007f08:	d085      	beq.n	8007e16 <_dtoa_r+0x826>
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	301c      	adds	r0, #28
 8007f0e:	e77d      	b.n	8007e0c <_dtoa_r+0x81c>
 8007f10:	40240000 	.word	0x40240000
 8007f14:	9b01      	ldr	r3, [sp, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	dc38      	bgt.n	8007f8c <_dtoa_r+0x99c>
 8007f1a:	9b05      	ldr	r3, [sp, #20]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	dd35      	ble.n	8007f8c <_dtoa_r+0x99c>
 8007f20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007f24:	f1b9 0f00 	cmp.w	r9, #0
 8007f28:	d10d      	bne.n	8007f46 <_dtoa_r+0x956>
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	2205      	movs	r2, #5
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 f9c5 	bl	80082c0 <__multadd>
 8007f36:	4601      	mov	r1, r0
 8007f38:	4606      	mov	r6, r0
 8007f3a:	4658      	mov	r0, fp
 8007f3c:	f000 fbdc 	bl	80086f8 <__mcmp>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	f73f adbd 	bgt.w	8007ac0 <_dtoa_r+0x4d0>
 8007f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f48:	9d00      	ldr	r5, [sp, #0]
 8007f4a:	ea6f 0a03 	mvn.w	sl, r3
 8007f4e:	f04f 0800 	mov.w	r8, #0
 8007f52:	4631      	mov	r1, r6
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 f991 	bl	800827c <_Bfree>
 8007f5a:	2f00      	cmp	r7, #0
 8007f5c:	f43f aeb4 	beq.w	8007cc8 <_dtoa_r+0x6d8>
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	d005      	beq.n	8007f72 <_dtoa_r+0x982>
 8007f66:	45b8      	cmp	r8, r7
 8007f68:	d003      	beq.n	8007f72 <_dtoa_r+0x982>
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 f985 	bl	800827c <_Bfree>
 8007f72:	4639      	mov	r1, r7
 8007f74:	4620      	mov	r0, r4
 8007f76:	f000 f981 	bl	800827c <_Bfree>
 8007f7a:	e6a5      	b.n	8007cc8 <_dtoa_r+0x6d8>
 8007f7c:	2600      	movs	r6, #0
 8007f7e:	4637      	mov	r7, r6
 8007f80:	e7e1      	b.n	8007f46 <_dtoa_r+0x956>
 8007f82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007f84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007f88:	4637      	mov	r7, r6
 8007f8a:	e599      	b.n	8007ac0 <_dtoa_r+0x4d0>
 8007f8c:	9b08      	ldr	r3, [sp, #32]
 8007f8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 80fd 	beq.w	8008192 <_dtoa_r+0xba2>
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	dd05      	ble.n	8007fa8 <_dtoa_r+0x9b8>
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	462a      	mov	r2, r5
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fb3d 	bl	8008620 <__lshift>
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d05c      	beq.n	8008068 <_dtoa_r+0xa78>
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 f923 	bl	80081fc <_Balloc>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	b928      	cbnz	r0, 8007fc6 <_dtoa_r+0x9d6>
 8007fba:	4b80      	ldr	r3, [pc, #512]	; (80081bc <_dtoa_r+0xbcc>)
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fc2:	f7ff bb2e 	b.w	8007622 <_dtoa_r+0x32>
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	3202      	adds	r2, #2
 8007fca:	0092      	lsls	r2, r2, #2
 8007fcc:	f107 010c 	add.w	r1, r7, #12
 8007fd0:	300c      	adds	r0, #12
 8007fd2:	f000 f905 	bl	80081e0 <memcpy>
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fb20 	bl	8008620 <__lshift>
 8007fe0:	9b00      	ldr	r3, [sp, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	9b00      	ldr	r3, [sp, #0]
 8007fe8:	444b      	add	r3, r9
 8007fea:	9307      	str	r3, [sp, #28]
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	46b8      	mov	r8, r7
 8007ff4:	9306      	str	r3, [sp, #24]
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4658      	mov	r0, fp
 8008000:	9302      	str	r3, [sp, #8]
 8008002:	f7ff fa69 	bl	80074d8 <quorem>
 8008006:	4603      	mov	r3, r0
 8008008:	3330      	adds	r3, #48	; 0x30
 800800a:	9004      	str	r0, [sp, #16]
 800800c:	4641      	mov	r1, r8
 800800e:	4658      	mov	r0, fp
 8008010:	9308      	str	r3, [sp, #32]
 8008012:	f000 fb71 	bl	80086f8 <__mcmp>
 8008016:	463a      	mov	r2, r7
 8008018:	4681      	mov	r9, r0
 800801a:	4631      	mov	r1, r6
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fb87 	bl	8008730 <__mdiff>
 8008022:	68c2      	ldr	r2, [r0, #12]
 8008024:	9b08      	ldr	r3, [sp, #32]
 8008026:	4605      	mov	r5, r0
 8008028:	bb02      	cbnz	r2, 800806c <_dtoa_r+0xa7c>
 800802a:	4601      	mov	r1, r0
 800802c:	4658      	mov	r0, fp
 800802e:	f000 fb63 	bl	80086f8 <__mcmp>
 8008032:	9b08      	ldr	r3, [sp, #32]
 8008034:	4602      	mov	r2, r0
 8008036:	4629      	mov	r1, r5
 8008038:	4620      	mov	r0, r4
 800803a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800803e:	f000 f91d 	bl	800827c <_Bfree>
 8008042:	9b05      	ldr	r3, [sp, #20]
 8008044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008046:	9d01      	ldr	r5, [sp, #4]
 8008048:	ea43 0102 	orr.w	r1, r3, r2
 800804c:	9b06      	ldr	r3, [sp, #24]
 800804e:	430b      	orrs	r3, r1
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	d10d      	bne.n	8008070 <_dtoa_r+0xa80>
 8008054:	2b39      	cmp	r3, #57	; 0x39
 8008056:	d029      	beq.n	80080ac <_dtoa_r+0xabc>
 8008058:	f1b9 0f00 	cmp.w	r9, #0
 800805c:	dd01      	ble.n	8008062 <_dtoa_r+0xa72>
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	3331      	adds	r3, #49	; 0x31
 8008062:	9a02      	ldr	r2, [sp, #8]
 8008064:	7013      	strb	r3, [r2, #0]
 8008066:	e774      	b.n	8007f52 <_dtoa_r+0x962>
 8008068:	4638      	mov	r0, r7
 800806a:	e7b9      	b.n	8007fe0 <_dtoa_r+0x9f0>
 800806c:	2201      	movs	r2, #1
 800806e:	e7e2      	b.n	8008036 <_dtoa_r+0xa46>
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	db06      	blt.n	8008084 <_dtoa_r+0xa94>
 8008076:	9905      	ldr	r1, [sp, #20]
 8008078:	ea41 0909 	orr.w	r9, r1, r9
 800807c:	9906      	ldr	r1, [sp, #24]
 800807e:	ea59 0101 	orrs.w	r1, r9, r1
 8008082:	d120      	bne.n	80080c6 <_dtoa_r+0xad6>
 8008084:	2a00      	cmp	r2, #0
 8008086:	ddec      	ble.n	8008062 <_dtoa_r+0xa72>
 8008088:	4659      	mov	r1, fp
 800808a:	2201      	movs	r2, #1
 800808c:	4620      	mov	r0, r4
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	f000 fac6 	bl	8008620 <__lshift>
 8008094:	4631      	mov	r1, r6
 8008096:	4683      	mov	fp, r0
 8008098:	f000 fb2e 	bl	80086f8 <__mcmp>
 800809c:	2800      	cmp	r0, #0
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	dc02      	bgt.n	80080a8 <_dtoa_r+0xab8>
 80080a2:	d1de      	bne.n	8008062 <_dtoa_r+0xa72>
 80080a4:	07da      	lsls	r2, r3, #31
 80080a6:	d5dc      	bpl.n	8008062 <_dtoa_r+0xa72>
 80080a8:	2b39      	cmp	r3, #57	; 0x39
 80080aa:	d1d8      	bne.n	800805e <_dtoa_r+0xa6e>
 80080ac:	9a02      	ldr	r2, [sp, #8]
 80080ae:	2339      	movs	r3, #57	; 0x39
 80080b0:	7013      	strb	r3, [r2, #0]
 80080b2:	462b      	mov	r3, r5
 80080b4:	461d      	mov	r5, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080bc:	2a39      	cmp	r2, #57	; 0x39
 80080be:	d050      	beq.n	8008162 <_dtoa_r+0xb72>
 80080c0:	3201      	adds	r2, #1
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e745      	b.n	8007f52 <_dtoa_r+0x962>
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	dd03      	ble.n	80080d2 <_dtoa_r+0xae2>
 80080ca:	2b39      	cmp	r3, #57	; 0x39
 80080cc:	d0ee      	beq.n	80080ac <_dtoa_r+0xabc>
 80080ce:	3301      	adds	r3, #1
 80080d0:	e7c7      	b.n	8008062 <_dtoa_r+0xa72>
 80080d2:	9a01      	ldr	r2, [sp, #4]
 80080d4:	9907      	ldr	r1, [sp, #28]
 80080d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80080da:	428a      	cmp	r2, r1
 80080dc:	d02a      	beq.n	8008134 <_dtoa_r+0xb44>
 80080de:	4659      	mov	r1, fp
 80080e0:	2300      	movs	r3, #0
 80080e2:	220a      	movs	r2, #10
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 f8eb 	bl	80082c0 <__multadd>
 80080ea:	45b8      	cmp	r8, r7
 80080ec:	4683      	mov	fp, r0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	f04f 020a 	mov.w	r2, #10
 80080f6:	4641      	mov	r1, r8
 80080f8:	4620      	mov	r0, r4
 80080fa:	d107      	bne.n	800810c <_dtoa_r+0xb1c>
 80080fc:	f000 f8e0 	bl	80082c0 <__multadd>
 8008100:	4680      	mov	r8, r0
 8008102:	4607      	mov	r7, r0
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	3301      	adds	r3, #1
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	e775      	b.n	8007ff8 <_dtoa_r+0xa08>
 800810c:	f000 f8d8 	bl	80082c0 <__multadd>
 8008110:	4639      	mov	r1, r7
 8008112:	4680      	mov	r8, r0
 8008114:	2300      	movs	r3, #0
 8008116:	220a      	movs	r2, #10
 8008118:	4620      	mov	r0, r4
 800811a:	f000 f8d1 	bl	80082c0 <__multadd>
 800811e:	4607      	mov	r7, r0
 8008120:	e7f0      	b.n	8008104 <_dtoa_r+0xb14>
 8008122:	f1b9 0f00 	cmp.w	r9, #0
 8008126:	9a00      	ldr	r2, [sp, #0]
 8008128:	bfcc      	ite	gt
 800812a:	464d      	movgt	r5, r9
 800812c:	2501      	movle	r5, #1
 800812e:	4415      	add	r5, r2
 8008130:	f04f 0800 	mov.w	r8, #0
 8008134:	4659      	mov	r1, fp
 8008136:	2201      	movs	r2, #1
 8008138:	4620      	mov	r0, r4
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	f000 fa70 	bl	8008620 <__lshift>
 8008140:	4631      	mov	r1, r6
 8008142:	4683      	mov	fp, r0
 8008144:	f000 fad8 	bl	80086f8 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	dcb2      	bgt.n	80080b2 <_dtoa_r+0xac2>
 800814c:	d102      	bne.n	8008154 <_dtoa_r+0xb64>
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	07db      	lsls	r3, r3, #31
 8008152:	d4ae      	bmi.n	80080b2 <_dtoa_r+0xac2>
 8008154:	462b      	mov	r3, r5
 8008156:	461d      	mov	r5, r3
 8008158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800815c:	2a30      	cmp	r2, #48	; 0x30
 800815e:	d0fa      	beq.n	8008156 <_dtoa_r+0xb66>
 8008160:	e6f7      	b.n	8007f52 <_dtoa_r+0x962>
 8008162:	9a00      	ldr	r2, [sp, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d1a5      	bne.n	80080b4 <_dtoa_r+0xac4>
 8008168:	f10a 0a01 	add.w	sl, sl, #1
 800816c:	2331      	movs	r3, #49	; 0x31
 800816e:	e779      	b.n	8008064 <_dtoa_r+0xa74>
 8008170:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <_dtoa_r+0xbd0>)
 8008172:	f7ff baaf 	b.w	80076d4 <_dtoa_r+0xe4>
 8008176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008178:	2b00      	cmp	r3, #0
 800817a:	f47f aa86 	bne.w	800768a <_dtoa_r+0x9a>
 800817e:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <_dtoa_r+0xbd4>)
 8008180:	f7ff baa8 	b.w	80076d4 <_dtoa_r+0xe4>
 8008184:	f1b9 0f00 	cmp.w	r9, #0
 8008188:	dc03      	bgt.n	8008192 <_dtoa_r+0xba2>
 800818a:	9b05      	ldr	r3, [sp, #20]
 800818c:	2b02      	cmp	r3, #2
 800818e:	f73f aec9 	bgt.w	8007f24 <_dtoa_r+0x934>
 8008192:	9d00      	ldr	r5, [sp, #0]
 8008194:	4631      	mov	r1, r6
 8008196:	4658      	mov	r0, fp
 8008198:	f7ff f99e 	bl	80074d8 <quorem>
 800819c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80081a0:	f805 3b01 	strb.w	r3, [r5], #1
 80081a4:	9a00      	ldr	r2, [sp, #0]
 80081a6:	1aaa      	subs	r2, r5, r2
 80081a8:	4591      	cmp	r9, r2
 80081aa:	ddba      	ble.n	8008122 <_dtoa_r+0xb32>
 80081ac:	4659      	mov	r1, fp
 80081ae:	2300      	movs	r3, #0
 80081b0:	220a      	movs	r2, #10
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f884 	bl	80082c0 <__multadd>
 80081b8:	4683      	mov	fp, r0
 80081ba:	e7eb      	b.n	8008194 <_dtoa_r+0xba4>
 80081bc:	08009a2f 	.word	0x08009a2f
 80081c0:	08009988 	.word	0x08009988
 80081c4:	080099ac 	.word	0x080099ac

080081c8 <_localeconv_r>:
 80081c8:	4800      	ldr	r0, [pc, #0]	; (80081cc <_localeconv_r+0x4>)
 80081ca:	4770      	bx	lr
 80081cc:	20000170 	.word	0x20000170

080081d0 <malloc>:
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <malloc+0xc>)
 80081d2:	4601      	mov	r1, r0
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	f000 bbef 	b.w	80089b8 <_malloc_r>
 80081da:	bf00      	nop
 80081dc:	2000001c 	.word	0x2000001c

080081e0 <memcpy>:
 80081e0:	440a      	add	r2, r1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e8:	d100      	bne.n	80081ec <memcpy+0xc>
 80081ea:	4770      	bx	lr
 80081ec:	b510      	push	{r4, lr}
 80081ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f6:	4291      	cmp	r1, r2
 80081f8:	d1f9      	bne.n	80081ee <memcpy+0xe>
 80081fa:	bd10      	pop	{r4, pc}

080081fc <_Balloc>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	b976      	cbnz	r6, 8008224 <_Balloc+0x28>
 8008206:	2010      	movs	r0, #16
 8008208:	f7ff ffe2 	bl	80081d0 <malloc>
 800820c:	4602      	mov	r2, r0
 800820e:	6260      	str	r0, [r4, #36]	; 0x24
 8008210:	b920      	cbnz	r0, 800821c <_Balloc+0x20>
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <_Balloc+0x78>)
 8008214:	4818      	ldr	r0, [pc, #96]	; (8008278 <_Balloc+0x7c>)
 8008216:	2166      	movs	r1, #102	; 0x66
 8008218:	f000 fd94 	bl	8008d44 <__assert_func>
 800821c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008220:	6006      	str	r6, [r0, #0]
 8008222:	60c6      	str	r6, [r0, #12]
 8008224:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008226:	68f3      	ldr	r3, [r6, #12]
 8008228:	b183      	cbz	r3, 800824c <_Balloc+0x50>
 800822a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008232:	b9b8      	cbnz	r0, 8008264 <_Balloc+0x68>
 8008234:	2101      	movs	r1, #1
 8008236:	fa01 f605 	lsl.w	r6, r1, r5
 800823a:	1d72      	adds	r2, r6, #5
 800823c:	0092      	lsls	r2, r2, #2
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fb5a 	bl	80088f8 <_calloc_r>
 8008244:	b160      	cbz	r0, 8008260 <_Balloc+0x64>
 8008246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800824a:	e00e      	b.n	800826a <_Balloc+0x6e>
 800824c:	2221      	movs	r2, #33	; 0x21
 800824e:	2104      	movs	r1, #4
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fb51 	bl	80088f8 <_calloc_r>
 8008256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008258:	60f0      	str	r0, [r6, #12]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e4      	bne.n	800822a <_Balloc+0x2e>
 8008260:	2000      	movs	r0, #0
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	6802      	ldr	r2, [r0, #0]
 8008266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800826a:	2300      	movs	r3, #0
 800826c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008270:	e7f7      	b.n	8008262 <_Balloc+0x66>
 8008272:	bf00      	nop
 8008274:	080099b9 	.word	0x080099b9
 8008278:	08009a40 	.word	0x08009a40

0800827c <_Bfree>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	b976      	cbnz	r6, 80082a4 <_Bfree+0x28>
 8008286:	2010      	movs	r0, #16
 8008288:	f7ff ffa2 	bl	80081d0 <malloc>
 800828c:	4602      	mov	r2, r0
 800828e:	6268      	str	r0, [r5, #36]	; 0x24
 8008290:	b920      	cbnz	r0, 800829c <_Bfree+0x20>
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <_Bfree+0x3c>)
 8008294:	4809      	ldr	r0, [pc, #36]	; (80082bc <_Bfree+0x40>)
 8008296:	218a      	movs	r1, #138	; 0x8a
 8008298:	f000 fd54 	bl	8008d44 <__assert_func>
 800829c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082a0:	6006      	str	r6, [r0, #0]
 80082a2:	60c6      	str	r6, [r0, #12]
 80082a4:	b13c      	cbz	r4, 80082b6 <_Bfree+0x3a>
 80082a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082a8:	6862      	ldr	r2, [r4, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082b0:	6021      	str	r1, [r4, #0]
 80082b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	080099b9 	.word	0x080099b9
 80082bc:	08009a40 	.word	0x08009a40

080082c0 <__multadd>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	690e      	ldr	r6, [r1, #16]
 80082c6:	4607      	mov	r7, r0
 80082c8:	4698      	mov	r8, r3
 80082ca:	460c      	mov	r4, r1
 80082cc:	f101 0014 	add.w	r0, r1, #20
 80082d0:	2300      	movs	r3, #0
 80082d2:	6805      	ldr	r5, [r0, #0]
 80082d4:	b2a9      	uxth	r1, r5
 80082d6:	fb02 8101 	mla	r1, r2, r1, r8
 80082da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80082de:	0c2d      	lsrs	r5, r5, #16
 80082e0:	fb02 c505 	mla	r5, r2, r5, ip
 80082e4:	b289      	uxth	r1, r1
 80082e6:	3301      	adds	r3, #1
 80082e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80082ec:	429e      	cmp	r6, r3
 80082ee:	f840 1b04 	str.w	r1, [r0], #4
 80082f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80082f6:	dcec      	bgt.n	80082d2 <__multadd+0x12>
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	d022      	beq.n	8008344 <__multadd+0x84>
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	42b3      	cmp	r3, r6
 8008302:	dc19      	bgt.n	8008338 <__multadd+0x78>
 8008304:	6861      	ldr	r1, [r4, #4]
 8008306:	4638      	mov	r0, r7
 8008308:	3101      	adds	r1, #1
 800830a:	f7ff ff77 	bl	80081fc <_Balloc>
 800830e:	4605      	mov	r5, r0
 8008310:	b928      	cbnz	r0, 800831e <__multadd+0x5e>
 8008312:	4602      	mov	r2, r0
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <__multadd+0x8c>)
 8008316:	480e      	ldr	r0, [pc, #56]	; (8008350 <__multadd+0x90>)
 8008318:	21b5      	movs	r1, #181	; 0xb5
 800831a:	f000 fd13 	bl	8008d44 <__assert_func>
 800831e:	6922      	ldr	r2, [r4, #16]
 8008320:	3202      	adds	r2, #2
 8008322:	f104 010c 	add.w	r1, r4, #12
 8008326:	0092      	lsls	r2, r2, #2
 8008328:	300c      	adds	r0, #12
 800832a:	f7ff ff59 	bl	80081e0 <memcpy>
 800832e:	4621      	mov	r1, r4
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff ffa3 	bl	800827c <_Bfree>
 8008336:	462c      	mov	r4, r5
 8008338:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800833c:	3601      	adds	r6, #1
 800833e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008342:	6126      	str	r6, [r4, #16]
 8008344:	4620      	mov	r0, r4
 8008346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800834a:	bf00      	nop
 800834c:	08009a2f 	.word	0x08009a2f
 8008350:	08009a40 	.word	0x08009a40

08008354 <__hi0bits>:
 8008354:	0c03      	lsrs	r3, r0, #16
 8008356:	041b      	lsls	r3, r3, #16
 8008358:	b9d3      	cbnz	r3, 8008390 <__hi0bits+0x3c>
 800835a:	0400      	lsls	r0, r0, #16
 800835c:	2310      	movs	r3, #16
 800835e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008362:	bf04      	itt	eq
 8008364:	0200      	lsleq	r0, r0, #8
 8008366:	3308      	addeq	r3, #8
 8008368:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800836c:	bf04      	itt	eq
 800836e:	0100      	lsleq	r0, r0, #4
 8008370:	3304      	addeq	r3, #4
 8008372:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008376:	bf04      	itt	eq
 8008378:	0080      	lsleq	r0, r0, #2
 800837a:	3302      	addeq	r3, #2
 800837c:	2800      	cmp	r0, #0
 800837e:	db05      	blt.n	800838c <__hi0bits+0x38>
 8008380:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008384:	f103 0301 	add.w	r3, r3, #1
 8008388:	bf08      	it	eq
 800838a:	2320      	moveq	r3, #32
 800838c:	4618      	mov	r0, r3
 800838e:	4770      	bx	lr
 8008390:	2300      	movs	r3, #0
 8008392:	e7e4      	b.n	800835e <__hi0bits+0xa>

08008394 <__lo0bits>:
 8008394:	6803      	ldr	r3, [r0, #0]
 8008396:	f013 0207 	ands.w	r2, r3, #7
 800839a:	4601      	mov	r1, r0
 800839c:	d00b      	beq.n	80083b6 <__lo0bits+0x22>
 800839e:	07da      	lsls	r2, r3, #31
 80083a0:	d424      	bmi.n	80083ec <__lo0bits+0x58>
 80083a2:	0798      	lsls	r0, r3, #30
 80083a4:	bf49      	itett	mi
 80083a6:	085b      	lsrmi	r3, r3, #1
 80083a8:	089b      	lsrpl	r3, r3, #2
 80083aa:	2001      	movmi	r0, #1
 80083ac:	600b      	strmi	r3, [r1, #0]
 80083ae:	bf5c      	itt	pl
 80083b0:	600b      	strpl	r3, [r1, #0]
 80083b2:	2002      	movpl	r0, #2
 80083b4:	4770      	bx	lr
 80083b6:	b298      	uxth	r0, r3
 80083b8:	b9b0      	cbnz	r0, 80083e8 <__lo0bits+0x54>
 80083ba:	0c1b      	lsrs	r3, r3, #16
 80083bc:	2010      	movs	r0, #16
 80083be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083c2:	bf04      	itt	eq
 80083c4:	0a1b      	lsreq	r3, r3, #8
 80083c6:	3008      	addeq	r0, #8
 80083c8:	071a      	lsls	r2, r3, #28
 80083ca:	bf04      	itt	eq
 80083cc:	091b      	lsreq	r3, r3, #4
 80083ce:	3004      	addeq	r0, #4
 80083d0:	079a      	lsls	r2, r3, #30
 80083d2:	bf04      	itt	eq
 80083d4:	089b      	lsreq	r3, r3, #2
 80083d6:	3002      	addeq	r0, #2
 80083d8:	07da      	lsls	r2, r3, #31
 80083da:	d403      	bmi.n	80083e4 <__lo0bits+0x50>
 80083dc:	085b      	lsrs	r3, r3, #1
 80083de:	f100 0001 	add.w	r0, r0, #1
 80083e2:	d005      	beq.n	80083f0 <__lo0bits+0x5c>
 80083e4:	600b      	str	r3, [r1, #0]
 80083e6:	4770      	bx	lr
 80083e8:	4610      	mov	r0, r2
 80083ea:	e7e8      	b.n	80083be <__lo0bits+0x2a>
 80083ec:	2000      	movs	r0, #0
 80083ee:	4770      	bx	lr
 80083f0:	2020      	movs	r0, #32
 80083f2:	4770      	bx	lr

080083f4 <__i2b>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	460c      	mov	r4, r1
 80083f8:	2101      	movs	r1, #1
 80083fa:	f7ff feff 	bl	80081fc <_Balloc>
 80083fe:	4602      	mov	r2, r0
 8008400:	b928      	cbnz	r0, 800840e <__i2b+0x1a>
 8008402:	4b05      	ldr	r3, [pc, #20]	; (8008418 <__i2b+0x24>)
 8008404:	4805      	ldr	r0, [pc, #20]	; (800841c <__i2b+0x28>)
 8008406:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800840a:	f000 fc9b 	bl	8008d44 <__assert_func>
 800840e:	2301      	movs	r3, #1
 8008410:	6144      	str	r4, [r0, #20]
 8008412:	6103      	str	r3, [r0, #16]
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	08009a2f 	.word	0x08009a2f
 800841c:	08009a40 	.word	0x08009a40

08008420 <__multiply>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	4614      	mov	r4, r2
 8008426:	690a      	ldr	r2, [r1, #16]
 8008428:	6923      	ldr	r3, [r4, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	bfb8      	it	lt
 800842e:	460b      	movlt	r3, r1
 8008430:	460d      	mov	r5, r1
 8008432:	bfbc      	itt	lt
 8008434:	4625      	movlt	r5, r4
 8008436:	461c      	movlt	r4, r3
 8008438:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800843c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008440:	68ab      	ldr	r3, [r5, #8]
 8008442:	6869      	ldr	r1, [r5, #4]
 8008444:	eb0a 0709 	add.w	r7, sl, r9
 8008448:	42bb      	cmp	r3, r7
 800844a:	b085      	sub	sp, #20
 800844c:	bfb8      	it	lt
 800844e:	3101      	addlt	r1, #1
 8008450:	f7ff fed4 	bl	80081fc <_Balloc>
 8008454:	b930      	cbnz	r0, 8008464 <__multiply+0x44>
 8008456:	4602      	mov	r2, r0
 8008458:	4b42      	ldr	r3, [pc, #264]	; (8008564 <__multiply+0x144>)
 800845a:	4843      	ldr	r0, [pc, #268]	; (8008568 <__multiply+0x148>)
 800845c:	f240 115d 	movw	r1, #349	; 0x15d
 8008460:	f000 fc70 	bl	8008d44 <__assert_func>
 8008464:	f100 0614 	add.w	r6, r0, #20
 8008468:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800846c:	4633      	mov	r3, r6
 800846e:	2200      	movs	r2, #0
 8008470:	4543      	cmp	r3, r8
 8008472:	d31e      	bcc.n	80084b2 <__multiply+0x92>
 8008474:	f105 0c14 	add.w	ip, r5, #20
 8008478:	f104 0314 	add.w	r3, r4, #20
 800847c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008480:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008484:	9202      	str	r2, [sp, #8]
 8008486:	ebac 0205 	sub.w	r2, ip, r5
 800848a:	3a15      	subs	r2, #21
 800848c:	f022 0203 	bic.w	r2, r2, #3
 8008490:	3204      	adds	r2, #4
 8008492:	f105 0115 	add.w	r1, r5, #21
 8008496:	458c      	cmp	ip, r1
 8008498:	bf38      	it	cc
 800849a:	2204      	movcc	r2, #4
 800849c:	9201      	str	r2, [sp, #4]
 800849e:	9a02      	ldr	r2, [sp, #8]
 80084a0:	9303      	str	r3, [sp, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d808      	bhi.n	80084b8 <__multiply+0x98>
 80084a6:	2f00      	cmp	r7, #0
 80084a8:	dc55      	bgt.n	8008556 <__multiply+0x136>
 80084aa:	6107      	str	r7, [r0, #16]
 80084ac:	b005      	add	sp, #20
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	f843 2b04 	str.w	r2, [r3], #4
 80084b6:	e7db      	b.n	8008470 <__multiply+0x50>
 80084b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80084bc:	f1ba 0f00 	cmp.w	sl, #0
 80084c0:	d020      	beq.n	8008504 <__multiply+0xe4>
 80084c2:	f105 0e14 	add.w	lr, r5, #20
 80084c6:	46b1      	mov	r9, r6
 80084c8:	2200      	movs	r2, #0
 80084ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80084ce:	f8d9 b000 	ldr.w	fp, [r9]
 80084d2:	b2a1      	uxth	r1, r4
 80084d4:	fa1f fb8b 	uxth.w	fp, fp
 80084d8:	fb0a b101 	mla	r1, sl, r1, fp
 80084dc:	4411      	add	r1, r2
 80084de:	f8d9 2000 	ldr.w	r2, [r9]
 80084e2:	0c24      	lsrs	r4, r4, #16
 80084e4:	0c12      	lsrs	r2, r2, #16
 80084e6:	fb0a 2404 	mla	r4, sl, r4, r2
 80084ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80084ee:	b289      	uxth	r1, r1
 80084f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80084f4:	45f4      	cmp	ip, lr
 80084f6:	f849 1b04 	str.w	r1, [r9], #4
 80084fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80084fe:	d8e4      	bhi.n	80084ca <__multiply+0xaa>
 8008500:	9901      	ldr	r1, [sp, #4]
 8008502:	5072      	str	r2, [r6, r1]
 8008504:	9a03      	ldr	r2, [sp, #12]
 8008506:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800850a:	3304      	adds	r3, #4
 800850c:	f1b9 0f00 	cmp.w	r9, #0
 8008510:	d01f      	beq.n	8008552 <__multiply+0x132>
 8008512:	6834      	ldr	r4, [r6, #0]
 8008514:	f105 0114 	add.w	r1, r5, #20
 8008518:	46b6      	mov	lr, r6
 800851a:	f04f 0a00 	mov.w	sl, #0
 800851e:	880a      	ldrh	r2, [r1, #0]
 8008520:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008524:	fb09 b202 	mla	r2, r9, r2, fp
 8008528:	4492      	add	sl, r2
 800852a:	b2a4      	uxth	r4, r4
 800852c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008530:	f84e 4b04 	str.w	r4, [lr], #4
 8008534:	f851 4b04 	ldr.w	r4, [r1], #4
 8008538:	f8be 2000 	ldrh.w	r2, [lr]
 800853c:	0c24      	lsrs	r4, r4, #16
 800853e:	fb09 2404 	mla	r4, r9, r4, r2
 8008542:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008546:	458c      	cmp	ip, r1
 8008548:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800854c:	d8e7      	bhi.n	800851e <__multiply+0xfe>
 800854e:	9a01      	ldr	r2, [sp, #4]
 8008550:	50b4      	str	r4, [r6, r2]
 8008552:	3604      	adds	r6, #4
 8008554:	e7a3      	b.n	800849e <__multiply+0x7e>
 8008556:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1a5      	bne.n	80084aa <__multiply+0x8a>
 800855e:	3f01      	subs	r7, #1
 8008560:	e7a1      	b.n	80084a6 <__multiply+0x86>
 8008562:	bf00      	nop
 8008564:	08009a2f 	.word	0x08009a2f
 8008568:	08009a40 	.word	0x08009a40

0800856c <__pow5mult>:
 800856c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008570:	4615      	mov	r5, r2
 8008572:	f012 0203 	ands.w	r2, r2, #3
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	d007      	beq.n	800858c <__pow5mult+0x20>
 800857c:	4c25      	ldr	r4, [pc, #148]	; (8008614 <__pow5mult+0xa8>)
 800857e:	3a01      	subs	r2, #1
 8008580:	2300      	movs	r3, #0
 8008582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008586:	f7ff fe9b 	bl	80082c0 <__multadd>
 800858a:	4607      	mov	r7, r0
 800858c:	10ad      	asrs	r5, r5, #2
 800858e:	d03d      	beq.n	800860c <__pow5mult+0xa0>
 8008590:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008592:	b97c      	cbnz	r4, 80085b4 <__pow5mult+0x48>
 8008594:	2010      	movs	r0, #16
 8008596:	f7ff fe1b 	bl	80081d0 <malloc>
 800859a:	4602      	mov	r2, r0
 800859c:	6270      	str	r0, [r6, #36]	; 0x24
 800859e:	b928      	cbnz	r0, 80085ac <__pow5mult+0x40>
 80085a0:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <__pow5mult+0xac>)
 80085a2:	481e      	ldr	r0, [pc, #120]	; (800861c <__pow5mult+0xb0>)
 80085a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085a8:	f000 fbcc 	bl	8008d44 <__assert_func>
 80085ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085b0:	6004      	str	r4, [r0, #0]
 80085b2:	60c4      	str	r4, [r0, #12]
 80085b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085bc:	b94c      	cbnz	r4, 80085d2 <__pow5mult+0x66>
 80085be:	f240 2171 	movw	r1, #625	; 0x271
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7ff ff16 	bl	80083f4 <__i2b>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ce:	4604      	mov	r4, r0
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	f04f 0900 	mov.w	r9, #0
 80085d6:	07eb      	lsls	r3, r5, #31
 80085d8:	d50a      	bpl.n	80085f0 <__pow5mult+0x84>
 80085da:	4639      	mov	r1, r7
 80085dc:	4622      	mov	r2, r4
 80085de:	4630      	mov	r0, r6
 80085e0:	f7ff ff1e 	bl	8008420 <__multiply>
 80085e4:	4639      	mov	r1, r7
 80085e6:	4680      	mov	r8, r0
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff fe47 	bl	800827c <_Bfree>
 80085ee:	4647      	mov	r7, r8
 80085f0:	106d      	asrs	r5, r5, #1
 80085f2:	d00b      	beq.n	800860c <__pow5mult+0xa0>
 80085f4:	6820      	ldr	r0, [r4, #0]
 80085f6:	b938      	cbnz	r0, 8008608 <__pow5mult+0x9c>
 80085f8:	4622      	mov	r2, r4
 80085fa:	4621      	mov	r1, r4
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ff0f 	bl	8008420 <__multiply>
 8008602:	6020      	str	r0, [r4, #0]
 8008604:	f8c0 9000 	str.w	r9, [r0]
 8008608:	4604      	mov	r4, r0
 800860a:	e7e4      	b.n	80085d6 <__pow5mult+0x6a>
 800860c:	4638      	mov	r0, r7
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	bf00      	nop
 8008614:	08009b90 	.word	0x08009b90
 8008618:	080099b9 	.word	0x080099b9
 800861c:	08009a40 	.word	0x08009a40

08008620 <__lshift>:
 8008620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	6849      	ldr	r1, [r1, #4]
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	4607      	mov	r7, r0
 8008632:	4691      	mov	r9, r2
 8008634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008638:	f108 0601 	add.w	r6, r8, #1
 800863c:	42b3      	cmp	r3, r6
 800863e:	db0b      	blt.n	8008658 <__lshift+0x38>
 8008640:	4638      	mov	r0, r7
 8008642:	f7ff fddb 	bl	80081fc <_Balloc>
 8008646:	4605      	mov	r5, r0
 8008648:	b948      	cbnz	r0, 800865e <__lshift+0x3e>
 800864a:	4602      	mov	r2, r0
 800864c:	4b28      	ldr	r3, [pc, #160]	; (80086f0 <__lshift+0xd0>)
 800864e:	4829      	ldr	r0, [pc, #164]	; (80086f4 <__lshift+0xd4>)
 8008650:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008654:	f000 fb76 	bl	8008d44 <__assert_func>
 8008658:	3101      	adds	r1, #1
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	e7ee      	b.n	800863c <__lshift+0x1c>
 800865e:	2300      	movs	r3, #0
 8008660:	f100 0114 	add.w	r1, r0, #20
 8008664:	f100 0210 	add.w	r2, r0, #16
 8008668:	4618      	mov	r0, r3
 800866a:	4553      	cmp	r3, sl
 800866c:	db33      	blt.n	80086d6 <__lshift+0xb6>
 800866e:	6920      	ldr	r0, [r4, #16]
 8008670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008674:	f104 0314 	add.w	r3, r4, #20
 8008678:	f019 091f 	ands.w	r9, r9, #31
 800867c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008680:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008684:	d02b      	beq.n	80086de <__lshift+0xbe>
 8008686:	f1c9 0e20 	rsb	lr, r9, #32
 800868a:	468a      	mov	sl, r1
 800868c:	2200      	movs	r2, #0
 800868e:	6818      	ldr	r0, [r3, #0]
 8008690:	fa00 f009 	lsl.w	r0, r0, r9
 8008694:	4302      	orrs	r2, r0
 8008696:	f84a 2b04 	str.w	r2, [sl], #4
 800869a:	f853 2b04 	ldr.w	r2, [r3], #4
 800869e:	459c      	cmp	ip, r3
 80086a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80086a4:	d8f3      	bhi.n	800868e <__lshift+0x6e>
 80086a6:	ebac 0304 	sub.w	r3, ip, r4
 80086aa:	3b15      	subs	r3, #21
 80086ac:	f023 0303 	bic.w	r3, r3, #3
 80086b0:	3304      	adds	r3, #4
 80086b2:	f104 0015 	add.w	r0, r4, #21
 80086b6:	4584      	cmp	ip, r0
 80086b8:	bf38      	it	cc
 80086ba:	2304      	movcc	r3, #4
 80086bc:	50ca      	str	r2, [r1, r3]
 80086be:	b10a      	cbz	r2, 80086c4 <__lshift+0xa4>
 80086c0:	f108 0602 	add.w	r6, r8, #2
 80086c4:	3e01      	subs	r6, #1
 80086c6:	4638      	mov	r0, r7
 80086c8:	612e      	str	r6, [r5, #16]
 80086ca:	4621      	mov	r1, r4
 80086cc:	f7ff fdd6 	bl	800827c <_Bfree>
 80086d0:	4628      	mov	r0, r5
 80086d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80086da:	3301      	adds	r3, #1
 80086dc:	e7c5      	b.n	800866a <__lshift+0x4a>
 80086de:	3904      	subs	r1, #4
 80086e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80086e8:	459c      	cmp	ip, r3
 80086ea:	d8f9      	bhi.n	80086e0 <__lshift+0xc0>
 80086ec:	e7ea      	b.n	80086c4 <__lshift+0xa4>
 80086ee:	bf00      	nop
 80086f0:	08009a2f 	.word	0x08009a2f
 80086f4:	08009a40 	.word	0x08009a40

080086f8 <__mcmp>:
 80086f8:	b530      	push	{r4, r5, lr}
 80086fa:	6902      	ldr	r2, [r0, #16]
 80086fc:	690c      	ldr	r4, [r1, #16]
 80086fe:	1b12      	subs	r2, r2, r4
 8008700:	d10e      	bne.n	8008720 <__mcmp+0x28>
 8008702:	f100 0314 	add.w	r3, r0, #20
 8008706:	3114      	adds	r1, #20
 8008708:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800870c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008710:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008714:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008718:	42a5      	cmp	r5, r4
 800871a:	d003      	beq.n	8008724 <__mcmp+0x2c>
 800871c:	d305      	bcc.n	800872a <__mcmp+0x32>
 800871e:	2201      	movs	r2, #1
 8008720:	4610      	mov	r0, r2
 8008722:	bd30      	pop	{r4, r5, pc}
 8008724:	4283      	cmp	r3, r0
 8008726:	d3f3      	bcc.n	8008710 <__mcmp+0x18>
 8008728:	e7fa      	b.n	8008720 <__mcmp+0x28>
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	e7f7      	b.n	8008720 <__mcmp+0x28>

08008730 <__mdiff>:
 8008730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	460c      	mov	r4, r1
 8008736:	4606      	mov	r6, r0
 8008738:	4611      	mov	r1, r2
 800873a:	4620      	mov	r0, r4
 800873c:	4617      	mov	r7, r2
 800873e:	f7ff ffdb 	bl	80086f8 <__mcmp>
 8008742:	1e05      	subs	r5, r0, #0
 8008744:	d110      	bne.n	8008768 <__mdiff+0x38>
 8008746:	4629      	mov	r1, r5
 8008748:	4630      	mov	r0, r6
 800874a:	f7ff fd57 	bl	80081fc <_Balloc>
 800874e:	b930      	cbnz	r0, 800875e <__mdiff+0x2e>
 8008750:	4b39      	ldr	r3, [pc, #228]	; (8008838 <__mdiff+0x108>)
 8008752:	4602      	mov	r2, r0
 8008754:	f240 2132 	movw	r1, #562	; 0x232
 8008758:	4838      	ldr	r0, [pc, #224]	; (800883c <__mdiff+0x10c>)
 800875a:	f000 faf3 	bl	8008d44 <__assert_func>
 800875e:	2301      	movs	r3, #1
 8008760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	bfa4      	itt	ge
 800876a:	463b      	movge	r3, r7
 800876c:	4627      	movge	r7, r4
 800876e:	4630      	mov	r0, r6
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	bfa6      	itte	ge
 8008774:	461c      	movge	r4, r3
 8008776:	2500      	movge	r5, #0
 8008778:	2501      	movlt	r5, #1
 800877a:	f7ff fd3f 	bl	80081fc <_Balloc>
 800877e:	b920      	cbnz	r0, 800878a <__mdiff+0x5a>
 8008780:	4b2d      	ldr	r3, [pc, #180]	; (8008838 <__mdiff+0x108>)
 8008782:	4602      	mov	r2, r0
 8008784:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008788:	e7e6      	b.n	8008758 <__mdiff+0x28>
 800878a:	693e      	ldr	r6, [r7, #16]
 800878c:	60c5      	str	r5, [r0, #12]
 800878e:	6925      	ldr	r5, [r4, #16]
 8008790:	f107 0114 	add.w	r1, r7, #20
 8008794:	f104 0914 	add.w	r9, r4, #20
 8008798:	f100 0e14 	add.w	lr, r0, #20
 800879c:	f107 0210 	add.w	r2, r7, #16
 80087a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80087a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80087a8:	46f2      	mov	sl, lr
 80087aa:	2700      	movs	r7, #0
 80087ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80087b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087b4:	fa1f f883 	uxth.w	r8, r3
 80087b8:	fa17 f78b 	uxtah	r7, r7, fp
 80087bc:	0c1b      	lsrs	r3, r3, #16
 80087be:	eba7 0808 	sub.w	r8, r7, r8
 80087c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087ca:	fa1f f888 	uxth.w	r8, r8
 80087ce:	141f      	asrs	r7, r3, #16
 80087d0:	454d      	cmp	r5, r9
 80087d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087d6:	f84a 3b04 	str.w	r3, [sl], #4
 80087da:	d8e7      	bhi.n	80087ac <__mdiff+0x7c>
 80087dc:	1b2b      	subs	r3, r5, r4
 80087de:	3b15      	subs	r3, #21
 80087e0:	f023 0303 	bic.w	r3, r3, #3
 80087e4:	3304      	adds	r3, #4
 80087e6:	3415      	adds	r4, #21
 80087e8:	42a5      	cmp	r5, r4
 80087ea:	bf38      	it	cc
 80087ec:	2304      	movcc	r3, #4
 80087ee:	4419      	add	r1, r3
 80087f0:	4473      	add	r3, lr
 80087f2:	469e      	mov	lr, r3
 80087f4:	460d      	mov	r5, r1
 80087f6:	4565      	cmp	r5, ip
 80087f8:	d30e      	bcc.n	8008818 <__mdiff+0xe8>
 80087fa:	f10c 0203 	add.w	r2, ip, #3
 80087fe:	1a52      	subs	r2, r2, r1
 8008800:	f022 0203 	bic.w	r2, r2, #3
 8008804:	3903      	subs	r1, #3
 8008806:	458c      	cmp	ip, r1
 8008808:	bf38      	it	cc
 800880a:	2200      	movcc	r2, #0
 800880c:	441a      	add	r2, r3
 800880e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008812:	b17b      	cbz	r3, 8008834 <__mdiff+0x104>
 8008814:	6106      	str	r6, [r0, #16]
 8008816:	e7a5      	b.n	8008764 <__mdiff+0x34>
 8008818:	f855 8b04 	ldr.w	r8, [r5], #4
 800881c:	fa17 f488 	uxtah	r4, r7, r8
 8008820:	1422      	asrs	r2, r4, #16
 8008822:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008826:	b2a4      	uxth	r4, r4
 8008828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800882c:	f84e 4b04 	str.w	r4, [lr], #4
 8008830:	1417      	asrs	r7, r2, #16
 8008832:	e7e0      	b.n	80087f6 <__mdiff+0xc6>
 8008834:	3e01      	subs	r6, #1
 8008836:	e7ea      	b.n	800880e <__mdiff+0xde>
 8008838:	08009a2f 	.word	0x08009a2f
 800883c:	08009a40 	.word	0x08009a40

08008840 <__d2b>:
 8008840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008844:	4689      	mov	r9, r1
 8008846:	2101      	movs	r1, #1
 8008848:	ec57 6b10 	vmov	r6, r7, d0
 800884c:	4690      	mov	r8, r2
 800884e:	f7ff fcd5 	bl	80081fc <_Balloc>
 8008852:	4604      	mov	r4, r0
 8008854:	b930      	cbnz	r0, 8008864 <__d2b+0x24>
 8008856:	4602      	mov	r2, r0
 8008858:	4b25      	ldr	r3, [pc, #148]	; (80088f0 <__d2b+0xb0>)
 800885a:	4826      	ldr	r0, [pc, #152]	; (80088f4 <__d2b+0xb4>)
 800885c:	f240 310a 	movw	r1, #778	; 0x30a
 8008860:	f000 fa70 	bl	8008d44 <__assert_func>
 8008864:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800886c:	bb35      	cbnz	r5, 80088bc <__d2b+0x7c>
 800886e:	2e00      	cmp	r6, #0
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	d028      	beq.n	80088c6 <__d2b+0x86>
 8008874:	4668      	mov	r0, sp
 8008876:	9600      	str	r6, [sp, #0]
 8008878:	f7ff fd8c 	bl	8008394 <__lo0bits>
 800887c:	9900      	ldr	r1, [sp, #0]
 800887e:	b300      	cbz	r0, 80088c2 <__d2b+0x82>
 8008880:	9a01      	ldr	r2, [sp, #4]
 8008882:	f1c0 0320 	rsb	r3, r0, #32
 8008886:	fa02 f303 	lsl.w	r3, r2, r3
 800888a:	430b      	orrs	r3, r1
 800888c:	40c2      	lsrs	r2, r0
 800888e:	6163      	str	r3, [r4, #20]
 8008890:	9201      	str	r2, [sp, #4]
 8008892:	9b01      	ldr	r3, [sp, #4]
 8008894:	61a3      	str	r3, [r4, #24]
 8008896:	2b00      	cmp	r3, #0
 8008898:	bf14      	ite	ne
 800889a:	2202      	movne	r2, #2
 800889c:	2201      	moveq	r2, #1
 800889e:	6122      	str	r2, [r4, #16]
 80088a0:	b1d5      	cbz	r5, 80088d8 <__d2b+0x98>
 80088a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088a6:	4405      	add	r5, r0
 80088a8:	f8c9 5000 	str.w	r5, [r9]
 80088ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088b0:	f8c8 0000 	str.w	r0, [r8]
 80088b4:	4620      	mov	r0, r4
 80088b6:	b003      	add	sp, #12
 80088b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088c0:	e7d5      	b.n	800886e <__d2b+0x2e>
 80088c2:	6161      	str	r1, [r4, #20]
 80088c4:	e7e5      	b.n	8008892 <__d2b+0x52>
 80088c6:	a801      	add	r0, sp, #4
 80088c8:	f7ff fd64 	bl	8008394 <__lo0bits>
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	6163      	str	r3, [r4, #20]
 80088d0:	2201      	movs	r2, #1
 80088d2:	6122      	str	r2, [r4, #16]
 80088d4:	3020      	adds	r0, #32
 80088d6:	e7e3      	b.n	80088a0 <__d2b+0x60>
 80088d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088e0:	f8c9 0000 	str.w	r0, [r9]
 80088e4:	6918      	ldr	r0, [r3, #16]
 80088e6:	f7ff fd35 	bl	8008354 <__hi0bits>
 80088ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088ee:	e7df      	b.n	80088b0 <__d2b+0x70>
 80088f0:	08009a2f 	.word	0x08009a2f
 80088f4:	08009a40 	.word	0x08009a40

080088f8 <_calloc_r>:
 80088f8:	b513      	push	{r0, r1, r4, lr}
 80088fa:	434a      	muls	r2, r1
 80088fc:	4611      	mov	r1, r2
 80088fe:	9201      	str	r2, [sp, #4]
 8008900:	f000 f85a 	bl	80089b8 <_malloc_r>
 8008904:	4604      	mov	r4, r0
 8008906:	b118      	cbz	r0, 8008910 <_calloc_r+0x18>
 8008908:	9a01      	ldr	r2, [sp, #4]
 800890a:	2100      	movs	r1, #0
 800890c:	f7fe f952 	bl	8006bb4 <memset>
 8008910:	4620      	mov	r0, r4
 8008912:	b002      	add	sp, #8
 8008914:	bd10      	pop	{r4, pc}
	...

08008918 <_free_r>:
 8008918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800891a:	2900      	cmp	r1, #0
 800891c:	d048      	beq.n	80089b0 <_free_r+0x98>
 800891e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008922:	9001      	str	r0, [sp, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f1a1 0404 	sub.w	r4, r1, #4
 800892a:	bfb8      	it	lt
 800892c:	18e4      	addlt	r4, r4, r3
 800892e:	f000 fa65 	bl	8008dfc <__malloc_lock>
 8008932:	4a20      	ldr	r2, [pc, #128]	; (80089b4 <_free_r+0x9c>)
 8008934:	9801      	ldr	r0, [sp, #4]
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	4615      	mov	r5, r2
 800893a:	b933      	cbnz	r3, 800894a <_free_r+0x32>
 800893c:	6063      	str	r3, [r4, #4]
 800893e:	6014      	str	r4, [r2, #0]
 8008940:	b003      	add	sp, #12
 8008942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008946:	f000 ba5f 	b.w	8008e08 <__malloc_unlock>
 800894a:	42a3      	cmp	r3, r4
 800894c:	d90b      	bls.n	8008966 <_free_r+0x4e>
 800894e:	6821      	ldr	r1, [r4, #0]
 8008950:	1862      	adds	r2, r4, r1
 8008952:	4293      	cmp	r3, r2
 8008954:	bf04      	itt	eq
 8008956:	681a      	ldreq	r2, [r3, #0]
 8008958:	685b      	ldreq	r3, [r3, #4]
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	bf04      	itt	eq
 800895e:	1852      	addeq	r2, r2, r1
 8008960:	6022      	streq	r2, [r4, #0]
 8008962:	602c      	str	r4, [r5, #0]
 8008964:	e7ec      	b.n	8008940 <_free_r+0x28>
 8008966:	461a      	mov	r2, r3
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	b10b      	cbz	r3, 8008970 <_free_r+0x58>
 800896c:	42a3      	cmp	r3, r4
 800896e:	d9fa      	bls.n	8008966 <_free_r+0x4e>
 8008970:	6811      	ldr	r1, [r2, #0]
 8008972:	1855      	adds	r5, r2, r1
 8008974:	42a5      	cmp	r5, r4
 8008976:	d10b      	bne.n	8008990 <_free_r+0x78>
 8008978:	6824      	ldr	r4, [r4, #0]
 800897a:	4421      	add	r1, r4
 800897c:	1854      	adds	r4, r2, r1
 800897e:	42a3      	cmp	r3, r4
 8008980:	6011      	str	r1, [r2, #0]
 8008982:	d1dd      	bne.n	8008940 <_free_r+0x28>
 8008984:	681c      	ldr	r4, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	6053      	str	r3, [r2, #4]
 800898a:	4421      	add	r1, r4
 800898c:	6011      	str	r1, [r2, #0]
 800898e:	e7d7      	b.n	8008940 <_free_r+0x28>
 8008990:	d902      	bls.n	8008998 <_free_r+0x80>
 8008992:	230c      	movs	r3, #12
 8008994:	6003      	str	r3, [r0, #0]
 8008996:	e7d3      	b.n	8008940 <_free_r+0x28>
 8008998:	6825      	ldr	r5, [r4, #0]
 800899a:	1961      	adds	r1, r4, r5
 800899c:	428b      	cmp	r3, r1
 800899e:	bf04      	itt	eq
 80089a0:	6819      	ldreq	r1, [r3, #0]
 80089a2:	685b      	ldreq	r3, [r3, #4]
 80089a4:	6063      	str	r3, [r4, #4]
 80089a6:	bf04      	itt	eq
 80089a8:	1949      	addeq	r1, r1, r5
 80089aa:	6021      	streq	r1, [r4, #0]
 80089ac:	6054      	str	r4, [r2, #4]
 80089ae:	e7c7      	b.n	8008940 <_free_r+0x28>
 80089b0:	b003      	add	sp, #12
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	20000218 	.word	0x20000218

080089b8 <_malloc_r>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	1ccd      	adds	r5, r1, #3
 80089bc:	f025 0503 	bic.w	r5, r5, #3
 80089c0:	3508      	adds	r5, #8
 80089c2:	2d0c      	cmp	r5, #12
 80089c4:	bf38      	it	cc
 80089c6:	250c      	movcc	r5, #12
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	db01      	blt.n	80089d2 <_malloc_r+0x1a>
 80089ce:	42a9      	cmp	r1, r5
 80089d0:	d903      	bls.n	80089da <_malloc_r+0x22>
 80089d2:	230c      	movs	r3, #12
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	2000      	movs	r0, #0
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089da:	f000 fa0f 	bl	8008dfc <__malloc_lock>
 80089de:	4921      	ldr	r1, [pc, #132]	; (8008a64 <_malloc_r+0xac>)
 80089e0:	680a      	ldr	r2, [r1, #0]
 80089e2:	4614      	mov	r4, r2
 80089e4:	b99c      	cbnz	r4, 8008a0e <_malloc_r+0x56>
 80089e6:	4f20      	ldr	r7, [pc, #128]	; (8008a68 <_malloc_r+0xb0>)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	b923      	cbnz	r3, 80089f6 <_malloc_r+0x3e>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4630      	mov	r0, r6
 80089f0:	f000 f998 	bl	8008d24 <_sbrk_r>
 80089f4:	6038      	str	r0, [r7, #0]
 80089f6:	4629      	mov	r1, r5
 80089f8:	4630      	mov	r0, r6
 80089fa:	f000 f993 	bl	8008d24 <_sbrk_r>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d123      	bne.n	8008a4a <_malloc_r+0x92>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6033      	str	r3, [r6, #0]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f9fe 	bl	8008e08 <__malloc_unlock>
 8008a0c:	e7e3      	b.n	80089d6 <_malloc_r+0x1e>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	1b5b      	subs	r3, r3, r5
 8008a12:	d417      	bmi.n	8008a44 <_malloc_r+0x8c>
 8008a14:	2b0b      	cmp	r3, #11
 8008a16:	d903      	bls.n	8008a20 <_malloc_r+0x68>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	441c      	add	r4, r3
 8008a1c:	6025      	str	r5, [r4, #0]
 8008a1e:	e004      	b.n	8008a2a <_malloc_r+0x72>
 8008a20:	6863      	ldr	r3, [r4, #4]
 8008a22:	42a2      	cmp	r2, r4
 8008a24:	bf0c      	ite	eq
 8008a26:	600b      	streq	r3, [r1, #0]
 8008a28:	6053      	strne	r3, [r2, #4]
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f000 f9ec 	bl	8008e08 <__malloc_unlock>
 8008a30:	f104 000b 	add.w	r0, r4, #11
 8008a34:	1d23      	adds	r3, r4, #4
 8008a36:	f020 0007 	bic.w	r0, r0, #7
 8008a3a:	1ac2      	subs	r2, r0, r3
 8008a3c:	d0cc      	beq.n	80089d8 <_malloc_r+0x20>
 8008a3e:	1a1b      	subs	r3, r3, r0
 8008a40:	50a3      	str	r3, [r4, r2]
 8008a42:	e7c9      	b.n	80089d8 <_malloc_r+0x20>
 8008a44:	4622      	mov	r2, r4
 8008a46:	6864      	ldr	r4, [r4, #4]
 8008a48:	e7cc      	b.n	80089e4 <_malloc_r+0x2c>
 8008a4a:	1cc4      	adds	r4, r0, #3
 8008a4c:	f024 0403 	bic.w	r4, r4, #3
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d0e3      	beq.n	8008a1c <_malloc_r+0x64>
 8008a54:	1a21      	subs	r1, r4, r0
 8008a56:	4630      	mov	r0, r6
 8008a58:	f000 f964 	bl	8008d24 <_sbrk_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d1dd      	bne.n	8008a1c <_malloc_r+0x64>
 8008a60:	e7cf      	b.n	8008a02 <_malloc_r+0x4a>
 8008a62:	bf00      	nop
 8008a64:	20000218 	.word	0x20000218
 8008a68:	2000021c 	.word	0x2000021c

08008a6c <__ssputs_r>:
 8008a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a70:	688e      	ldr	r6, [r1, #8]
 8008a72:	429e      	cmp	r6, r3
 8008a74:	4682      	mov	sl, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	4690      	mov	r8, r2
 8008a7a:	461f      	mov	r7, r3
 8008a7c:	d838      	bhi.n	8008af0 <__ssputs_r+0x84>
 8008a7e:	898a      	ldrh	r2, [r1, #12]
 8008a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a84:	d032      	beq.n	8008aec <__ssputs_r+0x80>
 8008a86:	6825      	ldr	r5, [r4, #0]
 8008a88:	6909      	ldr	r1, [r1, #16]
 8008a8a:	eba5 0901 	sub.w	r9, r5, r1
 8008a8e:	6965      	ldr	r5, [r4, #20]
 8008a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a98:	3301      	adds	r3, #1
 8008a9a:	444b      	add	r3, r9
 8008a9c:	106d      	asrs	r5, r5, #1
 8008a9e:	429d      	cmp	r5, r3
 8008aa0:	bf38      	it	cc
 8008aa2:	461d      	movcc	r5, r3
 8008aa4:	0553      	lsls	r3, r2, #21
 8008aa6:	d531      	bpl.n	8008b0c <__ssputs_r+0xa0>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7ff ff85 	bl	80089b8 <_malloc_r>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	b950      	cbnz	r0, 8008ac8 <__ssputs_r+0x5c>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	f8ca 3000 	str.w	r3, [sl]
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac8:	6921      	ldr	r1, [r4, #16]
 8008aca:	464a      	mov	r2, r9
 8008acc:	f7ff fb88 	bl	80081e0 <memcpy>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	6126      	str	r6, [r4, #16]
 8008ade:	6165      	str	r5, [r4, #20]
 8008ae0:	444e      	add	r6, r9
 8008ae2:	eba5 0509 	sub.w	r5, r5, r9
 8008ae6:	6026      	str	r6, [r4, #0]
 8008ae8:	60a5      	str	r5, [r4, #8]
 8008aea:	463e      	mov	r6, r7
 8008aec:	42be      	cmp	r6, r7
 8008aee:	d900      	bls.n	8008af2 <__ssputs_r+0x86>
 8008af0:	463e      	mov	r6, r7
 8008af2:	4632      	mov	r2, r6
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	4641      	mov	r1, r8
 8008af8:	f000 f966 	bl	8008dc8 <memmove>
 8008afc:	68a3      	ldr	r3, [r4, #8]
 8008afe:	6822      	ldr	r2, [r4, #0]
 8008b00:	1b9b      	subs	r3, r3, r6
 8008b02:	4432      	add	r2, r6
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7db      	b.n	8008ac4 <__ssputs_r+0x58>
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	f000 f981 	bl	8008e14 <_realloc_r>
 8008b12:	4606      	mov	r6, r0
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d1e1      	bne.n	8008adc <__ssputs_r+0x70>
 8008b18:	6921      	ldr	r1, [r4, #16]
 8008b1a:	4650      	mov	r0, sl
 8008b1c:	f7ff fefc 	bl	8008918 <_free_r>
 8008b20:	e7c7      	b.n	8008ab2 <__ssputs_r+0x46>
	...

08008b24 <_svfiprintf_r>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	4698      	mov	r8, r3
 8008b2a:	898b      	ldrh	r3, [r1, #12]
 8008b2c:	061b      	lsls	r3, r3, #24
 8008b2e:	b09d      	sub	sp, #116	; 0x74
 8008b30:	4607      	mov	r7, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	4614      	mov	r4, r2
 8008b36:	d50e      	bpl.n	8008b56 <_svfiprintf_r+0x32>
 8008b38:	690b      	ldr	r3, [r1, #16]
 8008b3a:	b963      	cbnz	r3, 8008b56 <_svfiprintf_r+0x32>
 8008b3c:	2140      	movs	r1, #64	; 0x40
 8008b3e:	f7ff ff3b 	bl	80089b8 <_malloc_r>
 8008b42:	6028      	str	r0, [r5, #0]
 8008b44:	6128      	str	r0, [r5, #16]
 8008b46:	b920      	cbnz	r0, 8008b52 <_svfiprintf_r+0x2e>
 8008b48:	230c      	movs	r3, #12
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e0d1      	b.n	8008cf6 <_svfiprintf_r+0x1d2>
 8008b52:	2340      	movs	r3, #64	; 0x40
 8008b54:	616b      	str	r3, [r5, #20]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5a:	2320      	movs	r3, #32
 8008b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b64:	2330      	movs	r3, #48	; 0x30
 8008b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d10 <_svfiprintf_r+0x1ec>
 8008b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b6e:	f04f 0901 	mov.w	r9, #1
 8008b72:	4623      	mov	r3, r4
 8008b74:	469a      	mov	sl, r3
 8008b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b7a:	b10a      	cbz	r2, 8008b80 <_svfiprintf_r+0x5c>
 8008b7c:	2a25      	cmp	r2, #37	; 0x25
 8008b7e:	d1f9      	bne.n	8008b74 <_svfiprintf_r+0x50>
 8008b80:	ebba 0b04 	subs.w	fp, sl, r4
 8008b84:	d00b      	beq.n	8008b9e <_svfiprintf_r+0x7a>
 8008b86:	465b      	mov	r3, fp
 8008b88:	4622      	mov	r2, r4
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff ff6d 	bl	8008a6c <__ssputs_r>
 8008b92:	3001      	adds	r0, #1
 8008b94:	f000 80aa 	beq.w	8008cec <_svfiprintf_r+0x1c8>
 8008b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b9a:	445a      	add	r2, fp
 8008b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 80a2 	beq.w	8008cec <_svfiprintf_r+0x1c8>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bb2:	f10a 0a01 	add.w	sl, sl, #1
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	9307      	str	r3, [sp, #28]
 8008bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8008bc0:	4654      	mov	r4, sl
 8008bc2:	2205      	movs	r2, #5
 8008bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc8:	4851      	ldr	r0, [pc, #324]	; (8008d10 <_svfiprintf_r+0x1ec>)
 8008bca:	f7f7 fb11 	bl	80001f0 <memchr>
 8008bce:	9a04      	ldr	r2, [sp, #16]
 8008bd0:	b9d8      	cbnz	r0, 8008c0a <_svfiprintf_r+0xe6>
 8008bd2:	06d0      	lsls	r0, r2, #27
 8008bd4:	bf44      	itt	mi
 8008bd6:	2320      	movmi	r3, #32
 8008bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bdc:	0711      	lsls	r1, r2, #28
 8008bde:	bf44      	itt	mi
 8008be0:	232b      	movmi	r3, #43	; 0x2b
 8008be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bea:	2b2a      	cmp	r3, #42	; 0x2a
 8008bec:	d015      	beq.n	8008c1a <_svfiprintf_r+0xf6>
 8008bee:	9a07      	ldr	r2, [sp, #28]
 8008bf0:	4654      	mov	r4, sl
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	f04f 0c0a 	mov.w	ip, #10
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bfe:	3b30      	subs	r3, #48	; 0x30
 8008c00:	2b09      	cmp	r3, #9
 8008c02:	d94e      	bls.n	8008ca2 <_svfiprintf_r+0x17e>
 8008c04:	b1b0      	cbz	r0, 8008c34 <_svfiprintf_r+0x110>
 8008c06:	9207      	str	r2, [sp, #28]
 8008c08:	e014      	b.n	8008c34 <_svfiprintf_r+0x110>
 8008c0a:	eba0 0308 	sub.w	r3, r0, r8
 8008c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c12:	4313      	orrs	r3, r2
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	46a2      	mov	sl, r4
 8008c18:	e7d2      	b.n	8008bc0 <_svfiprintf_r+0x9c>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	1d19      	adds	r1, r3, #4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	9103      	str	r1, [sp, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bfbb      	ittet	lt
 8008c26:	425b      	neglt	r3, r3
 8008c28:	f042 0202 	orrlt.w	r2, r2, #2
 8008c2c:	9307      	strge	r3, [sp, #28]
 8008c2e:	9307      	strlt	r3, [sp, #28]
 8008c30:	bfb8      	it	lt
 8008c32:	9204      	strlt	r2, [sp, #16]
 8008c34:	7823      	ldrb	r3, [r4, #0]
 8008c36:	2b2e      	cmp	r3, #46	; 0x2e
 8008c38:	d10c      	bne.n	8008c54 <_svfiprintf_r+0x130>
 8008c3a:	7863      	ldrb	r3, [r4, #1]
 8008c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3e:	d135      	bne.n	8008cac <_svfiprintf_r+0x188>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	1d1a      	adds	r2, r3, #4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	9203      	str	r2, [sp, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bfb8      	it	lt
 8008c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c50:	3402      	adds	r4, #2
 8008c52:	9305      	str	r3, [sp, #20]
 8008c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d20 <_svfiprintf_r+0x1fc>
 8008c58:	7821      	ldrb	r1, [r4, #0]
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	4650      	mov	r0, sl
 8008c5e:	f7f7 fac7 	bl	80001f0 <memchr>
 8008c62:	b140      	cbz	r0, 8008c76 <_svfiprintf_r+0x152>
 8008c64:	2340      	movs	r3, #64	; 0x40
 8008c66:	eba0 000a 	sub.w	r0, r0, sl
 8008c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	4303      	orrs	r3, r0
 8008c72:	3401      	adds	r4, #1
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7a:	4826      	ldr	r0, [pc, #152]	; (8008d14 <_svfiprintf_r+0x1f0>)
 8008c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c80:	2206      	movs	r2, #6
 8008c82:	f7f7 fab5 	bl	80001f0 <memchr>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d038      	beq.n	8008cfc <_svfiprintf_r+0x1d8>
 8008c8a:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <_svfiprintf_r+0x1f4>)
 8008c8c:	bb1b      	cbnz	r3, 8008cd6 <_svfiprintf_r+0x1b2>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	3307      	adds	r3, #7
 8008c92:	f023 0307 	bic.w	r3, r3, #7
 8008c96:	3308      	adds	r3, #8
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c9c:	4433      	add	r3, r6
 8008c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca0:	e767      	b.n	8008b72 <_svfiprintf_r+0x4e>
 8008ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	2001      	movs	r0, #1
 8008caa:	e7a5      	b.n	8008bf8 <_svfiprintf_r+0xd4>
 8008cac:	2300      	movs	r3, #0
 8008cae:	3401      	adds	r4, #1
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	f04f 0c0a 	mov.w	ip, #10
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cbe:	3a30      	subs	r2, #48	; 0x30
 8008cc0:	2a09      	cmp	r2, #9
 8008cc2:	d903      	bls.n	8008ccc <_svfiprintf_r+0x1a8>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0c5      	beq.n	8008c54 <_svfiprintf_r+0x130>
 8008cc8:	9105      	str	r1, [sp, #20]
 8008cca:	e7c3      	b.n	8008c54 <_svfiprintf_r+0x130>
 8008ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e7f0      	b.n	8008cb8 <_svfiprintf_r+0x194>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <_svfiprintf_r+0x1f8>)
 8008cde:	a904      	add	r1, sp, #16
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7fe f80f 	bl	8006d04 <_printf_float>
 8008ce6:	1c42      	adds	r2, r0, #1
 8008ce8:	4606      	mov	r6, r0
 8008cea:	d1d6      	bne.n	8008c9a <_svfiprintf_r+0x176>
 8008cec:	89ab      	ldrh	r3, [r5, #12]
 8008cee:	065b      	lsls	r3, r3, #25
 8008cf0:	f53f af2c 	bmi.w	8008b4c <_svfiprintf_r+0x28>
 8008cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cf6:	b01d      	add	sp, #116	; 0x74
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	ab03      	add	r3, sp, #12
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	462a      	mov	r2, r5
 8008d02:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <_svfiprintf_r+0x1f8>)
 8008d04:	a904      	add	r1, sp, #16
 8008d06:	4638      	mov	r0, r7
 8008d08:	f7fe faa0 	bl	800724c <_printf_i>
 8008d0c:	e7eb      	b.n	8008ce6 <_svfiprintf_r+0x1c2>
 8008d0e:	bf00      	nop
 8008d10:	08009b9c 	.word	0x08009b9c
 8008d14:	08009ba6 	.word	0x08009ba6
 8008d18:	08006d05 	.word	0x08006d05
 8008d1c:	08008a6d 	.word	0x08008a6d
 8008d20:	08009ba2 	.word	0x08009ba2

08008d24 <_sbrk_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	; (8008d40 <_sbrk_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7f8 fe66 	bl	8001a00 <_sbrk>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_sbrk_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_sbrk_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000560 	.word	0x20000560

08008d44 <__assert_func>:
 8008d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d46:	4614      	mov	r4, r2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <__assert_func+0x2c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4605      	mov	r5, r0
 8008d50:	68d8      	ldr	r0, [r3, #12]
 8008d52:	b14c      	cbz	r4, 8008d68 <__assert_func+0x24>
 8008d54:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <__assert_func+0x30>)
 8008d56:	9100      	str	r1, [sp, #0]
 8008d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d5c:	4906      	ldr	r1, [pc, #24]	; (8008d78 <__assert_func+0x34>)
 8008d5e:	462b      	mov	r3, r5
 8008d60:	f000 f80e 	bl	8008d80 <fiprintf>
 8008d64:	f000 faa4 	bl	80092b0 <abort>
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <__assert_func+0x38>)
 8008d6a:	461c      	mov	r4, r3
 8008d6c:	e7f3      	b.n	8008d56 <__assert_func+0x12>
 8008d6e:	bf00      	nop
 8008d70:	2000001c 	.word	0x2000001c
 8008d74:	08009bad 	.word	0x08009bad
 8008d78:	08009bba 	.word	0x08009bba
 8008d7c:	08009be8 	.word	0x08009be8

08008d80 <fiprintf>:
 8008d80:	b40e      	push	{r1, r2, r3}
 8008d82:	b503      	push	{r0, r1, lr}
 8008d84:	4601      	mov	r1, r0
 8008d86:	ab03      	add	r3, sp, #12
 8008d88:	4805      	ldr	r0, [pc, #20]	; (8008da0 <fiprintf+0x20>)
 8008d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8e:	6800      	ldr	r0, [r0, #0]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	f000 f88f 	bl	8008eb4 <_vfiprintf_r>
 8008d96:	b002      	add	sp, #8
 8008d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d9c:	b003      	add	sp, #12
 8008d9e:	4770      	bx	lr
 8008da0:	2000001c 	.word	0x2000001c

08008da4 <__ascii_mbtowc>:
 8008da4:	b082      	sub	sp, #8
 8008da6:	b901      	cbnz	r1, 8008daa <__ascii_mbtowc+0x6>
 8008da8:	a901      	add	r1, sp, #4
 8008daa:	b142      	cbz	r2, 8008dbe <__ascii_mbtowc+0x1a>
 8008dac:	b14b      	cbz	r3, 8008dc2 <__ascii_mbtowc+0x1e>
 8008dae:	7813      	ldrb	r3, [r2, #0]
 8008db0:	600b      	str	r3, [r1, #0]
 8008db2:	7812      	ldrb	r2, [r2, #0]
 8008db4:	1e10      	subs	r0, r2, #0
 8008db6:	bf18      	it	ne
 8008db8:	2001      	movne	r0, #1
 8008dba:	b002      	add	sp, #8
 8008dbc:	4770      	bx	lr
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	e7fb      	b.n	8008dba <__ascii_mbtowc+0x16>
 8008dc2:	f06f 0001 	mvn.w	r0, #1
 8008dc6:	e7f8      	b.n	8008dba <__ascii_mbtowc+0x16>

08008dc8 <memmove>:
 8008dc8:	4288      	cmp	r0, r1
 8008dca:	b510      	push	{r4, lr}
 8008dcc:	eb01 0402 	add.w	r4, r1, r2
 8008dd0:	d902      	bls.n	8008dd8 <memmove+0x10>
 8008dd2:	4284      	cmp	r4, r0
 8008dd4:	4623      	mov	r3, r4
 8008dd6:	d807      	bhi.n	8008de8 <memmove+0x20>
 8008dd8:	1e43      	subs	r3, r0, #1
 8008dda:	42a1      	cmp	r1, r4
 8008ddc:	d008      	beq.n	8008df0 <memmove+0x28>
 8008dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008de6:	e7f8      	b.n	8008dda <memmove+0x12>
 8008de8:	4402      	add	r2, r0
 8008dea:	4601      	mov	r1, r0
 8008dec:	428a      	cmp	r2, r1
 8008dee:	d100      	bne.n	8008df2 <memmove+0x2a>
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dfa:	e7f7      	b.n	8008dec <memmove+0x24>

08008dfc <__malloc_lock>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <__malloc_lock+0x8>)
 8008dfe:	f000 bc17 	b.w	8009630 <__retarget_lock_acquire_recursive>
 8008e02:	bf00      	nop
 8008e04:	20000568 	.word	0x20000568

08008e08 <__malloc_unlock>:
 8008e08:	4801      	ldr	r0, [pc, #4]	; (8008e10 <__malloc_unlock+0x8>)
 8008e0a:	f000 bc12 	b.w	8009632 <__retarget_lock_release_recursive>
 8008e0e:	bf00      	nop
 8008e10:	20000568 	.word	0x20000568

08008e14 <_realloc_r>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	4607      	mov	r7, r0
 8008e18:	4614      	mov	r4, r2
 8008e1a:	460e      	mov	r6, r1
 8008e1c:	b921      	cbnz	r1, 8008e28 <_realloc_r+0x14>
 8008e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e22:	4611      	mov	r1, r2
 8008e24:	f7ff bdc8 	b.w	80089b8 <_malloc_r>
 8008e28:	b922      	cbnz	r2, 8008e34 <_realloc_r+0x20>
 8008e2a:	f7ff fd75 	bl	8008918 <_free_r>
 8008e2e:	4625      	mov	r5, r4
 8008e30:	4628      	mov	r0, r5
 8008e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e34:	f000 fc62 	bl	80096fc <_malloc_usable_size_r>
 8008e38:	42a0      	cmp	r0, r4
 8008e3a:	d20f      	bcs.n	8008e5c <_realloc_r+0x48>
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4638      	mov	r0, r7
 8008e40:	f7ff fdba 	bl	80089b8 <_malloc_r>
 8008e44:	4605      	mov	r5, r0
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d0f2      	beq.n	8008e30 <_realloc_r+0x1c>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	f7ff f9c7 	bl	80081e0 <memcpy>
 8008e52:	4631      	mov	r1, r6
 8008e54:	4638      	mov	r0, r7
 8008e56:	f7ff fd5f 	bl	8008918 <_free_r>
 8008e5a:	e7e9      	b.n	8008e30 <_realloc_r+0x1c>
 8008e5c:	4635      	mov	r5, r6
 8008e5e:	e7e7      	b.n	8008e30 <_realloc_r+0x1c>

08008e60 <__sfputc_r>:
 8008e60:	6893      	ldr	r3, [r2, #8]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	b410      	push	{r4}
 8008e68:	6093      	str	r3, [r2, #8]
 8008e6a:	da08      	bge.n	8008e7e <__sfputc_r+0x1e>
 8008e6c:	6994      	ldr	r4, [r2, #24]
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	db01      	blt.n	8008e76 <__sfputc_r+0x16>
 8008e72:	290a      	cmp	r1, #10
 8008e74:	d103      	bne.n	8008e7e <__sfputc_r+0x1e>
 8008e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e7a:	f000 b94b 	b.w	8009114 <__swbuf_r>
 8008e7e:	6813      	ldr	r3, [r2, #0]
 8008e80:	1c58      	adds	r0, r3, #1
 8008e82:	6010      	str	r0, [r2, #0]
 8008e84:	7019      	strb	r1, [r3, #0]
 8008e86:	4608      	mov	r0, r1
 8008e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <__sfputs_r>:
 8008e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e90:	4606      	mov	r6, r0
 8008e92:	460f      	mov	r7, r1
 8008e94:	4614      	mov	r4, r2
 8008e96:	18d5      	adds	r5, r2, r3
 8008e98:	42ac      	cmp	r4, r5
 8008e9a:	d101      	bne.n	8008ea0 <__sfputs_r+0x12>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e007      	b.n	8008eb0 <__sfputs_r+0x22>
 8008ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea4:	463a      	mov	r2, r7
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ffda 	bl	8008e60 <__sfputc_r>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d1f3      	bne.n	8008e98 <__sfputs_r+0xa>
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008eb4 <_vfiprintf_r>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	460d      	mov	r5, r1
 8008eba:	b09d      	sub	sp, #116	; 0x74
 8008ebc:	4614      	mov	r4, r2
 8008ebe:	4698      	mov	r8, r3
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	b118      	cbz	r0, 8008ecc <_vfiprintf_r+0x18>
 8008ec4:	6983      	ldr	r3, [r0, #24]
 8008ec6:	b90b      	cbnz	r3, 8008ecc <_vfiprintf_r+0x18>
 8008ec8:	f000 fb14 	bl	80094f4 <__sinit>
 8008ecc:	4b89      	ldr	r3, [pc, #548]	; (80090f4 <_vfiprintf_r+0x240>)
 8008ece:	429d      	cmp	r5, r3
 8008ed0:	d11b      	bne.n	8008f0a <_vfiprintf_r+0x56>
 8008ed2:	6875      	ldr	r5, [r6, #4]
 8008ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed6:	07d9      	lsls	r1, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_vfiprintf_r+0x32>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_vfiprintf_r+0x32>
 8008ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ee2:	f000 fba5 	bl	8009630 <__retarget_lock_acquire_recursive>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	071b      	lsls	r3, r3, #28
 8008eea:	d501      	bpl.n	8008ef0 <_vfiprintf_r+0x3c>
 8008eec:	692b      	ldr	r3, [r5, #16]
 8008eee:	b9eb      	cbnz	r3, 8008f2c <_vfiprintf_r+0x78>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 f96e 	bl	80091d4 <__swsetup_r>
 8008ef8:	b1c0      	cbz	r0, 8008f2c <_vfiprintf_r+0x78>
 8008efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008efc:	07dc      	lsls	r4, r3, #31
 8008efe:	d50e      	bpl.n	8008f1e <_vfiprintf_r+0x6a>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	b01d      	add	sp, #116	; 0x74
 8008f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0a:	4b7b      	ldr	r3, [pc, #492]	; (80090f8 <_vfiprintf_r+0x244>)
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	d101      	bne.n	8008f14 <_vfiprintf_r+0x60>
 8008f10:	68b5      	ldr	r5, [r6, #8]
 8008f12:	e7df      	b.n	8008ed4 <_vfiprintf_r+0x20>
 8008f14:	4b79      	ldr	r3, [pc, #484]	; (80090fc <_vfiprintf_r+0x248>)
 8008f16:	429d      	cmp	r5, r3
 8008f18:	bf08      	it	eq
 8008f1a:	68f5      	ldreq	r5, [r6, #12]
 8008f1c:	e7da      	b.n	8008ed4 <_vfiprintf_r+0x20>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	0598      	lsls	r0, r3, #22
 8008f22:	d4ed      	bmi.n	8008f00 <_vfiprintf_r+0x4c>
 8008f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f26:	f000 fb84 	bl	8009632 <__retarget_lock_release_recursive>
 8008f2a:	e7e9      	b.n	8008f00 <_vfiprintf_r+0x4c>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f30:	2320      	movs	r3, #32
 8008f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f3a:	2330      	movs	r3, #48	; 0x30
 8008f3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009100 <_vfiprintf_r+0x24c>
 8008f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f44:	f04f 0901 	mov.w	r9, #1
 8008f48:	4623      	mov	r3, r4
 8008f4a:	469a      	mov	sl, r3
 8008f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f50:	b10a      	cbz	r2, 8008f56 <_vfiprintf_r+0xa2>
 8008f52:	2a25      	cmp	r2, #37	; 0x25
 8008f54:	d1f9      	bne.n	8008f4a <_vfiprintf_r+0x96>
 8008f56:	ebba 0b04 	subs.w	fp, sl, r4
 8008f5a:	d00b      	beq.n	8008f74 <_vfiprintf_r+0xc0>
 8008f5c:	465b      	mov	r3, fp
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7ff ff93 	bl	8008e8e <__sfputs_r>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f000 80aa 	beq.w	80090c2 <_vfiprintf_r+0x20e>
 8008f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f70:	445a      	add	r2, fp
 8008f72:	9209      	str	r2, [sp, #36]	; 0x24
 8008f74:	f89a 3000 	ldrb.w	r3, [sl]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 80a2 	beq.w	80090c2 <_vfiprintf_r+0x20e>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f04f 32ff 	mov.w	r2, #4294967295
 8008f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f88:	f10a 0a01 	add.w	sl, sl, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	9307      	str	r3, [sp, #28]
 8008f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f94:	931a      	str	r3, [sp, #104]	; 0x68
 8008f96:	4654      	mov	r4, sl
 8008f98:	2205      	movs	r2, #5
 8008f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9e:	4858      	ldr	r0, [pc, #352]	; (8009100 <_vfiprintf_r+0x24c>)
 8008fa0:	f7f7 f926 	bl	80001f0 <memchr>
 8008fa4:	9a04      	ldr	r2, [sp, #16]
 8008fa6:	b9d8      	cbnz	r0, 8008fe0 <_vfiprintf_r+0x12c>
 8008fa8:	06d1      	lsls	r1, r2, #27
 8008faa:	bf44      	itt	mi
 8008fac:	2320      	movmi	r3, #32
 8008fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb2:	0713      	lsls	r3, r2, #28
 8008fb4:	bf44      	itt	mi
 8008fb6:	232b      	movmi	r3, #43	; 0x2b
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc2:	d015      	beq.n	8008ff0 <_vfiprintf_r+0x13c>
 8008fc4:	9a07      	ldr	r2, [sp, #28]
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f04f 0c0a 	mov.w	ip, #10
 8008fce:	4621      	mov	r1, r4
 8008fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fd4:	3b30      	subs	r3, #48	; 0x30
 8008fd6:	2b09      	cmp	r3, #9
 8008fd8:	d94e      	bls.n	8009078 <_vfiprintf_r+0x1c4>
 8008fda:	b1b0      	cbz	r0, 800900a <_vfiprintf_r+0x156>
 8008fdc:	9207      	str	r2, [sp, #28]
 8008fde:	e014      	b.n	800900a <_vfiprintf_r+0x156>
 8008fe0:	eba0 0308 	sub.w	r3, r0, r8
 8008fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	46a2      	mov	sl, r4
 8008fee:	e7d2      	b.n	8008f96 <_vfiprintf_r+0xe2>
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	1d19      	adds	r1, r3, #4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	9103      	str	r1, [sp, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bfbb      	ittet	lt
 8008ffc:	425b      	neglt	r3, r3
 8008ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8009002:	9307      	strge	r3, [sp, #28]
 8009004:	9307      	strlt	r3, [sp, #28]
 8009006:	bfb8      	it	lt
 8009008:	9204      	strlt	r2, [sp, #16]
 800900a:	7823      	ldrb	r3, [r4, #0]
 800900c:	2b2e      	cmp	r3, #46	; 0x2e
 800900e:	d10c      	bne.n	800902a <_vfiprintf_r+0x176>
 8009010:	7863      	ldrb	r3, [r4, #1]
 8009012:	2b2a      	cmp	r3, #42	; 0x2a
 8009014:	d135      	bne.n	8009082 <_vfiprintf_r+0x1ce>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	1d1a      	adds	r2, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	9203      	str	r2, [sp, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfb8      	it	lt
 8009022:	f04f 33ff 	movlt.w	r3, #4294967295
 8009026:	3402      	adds	r4, #2
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009110 <_vfiprintf_r+0x25c>
 800902e:	7821      	ldrb	r1, [r4, #0]
 8009030:	2203      	movs	r2, #3
 8009032:	4650      	mov	r0, sl
 8009034:	f7f7 f8dc 	bl	80001f0 <memchr>
 8009038:	b140      	cbz	r0, 800904c <_vfiprintf_r+0x198>
 800903a:	2340      	movs	r3, #64	; 0x40
 800903c:	eba0 000a 	sub.w	r0, r0, sl
 8009040:	fa03 f000 	lsl.w	r0, r3, r0
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	4303      	orrs	r3, r0
 8009048:	3401      	adds	r4, #1
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009050:	482c      	ldr	r0, [pc, #176]	; (8009104 <_vfiprintf_r+0x250>)
 8009052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009056:	2206      	movs	r2, #6
 8009058:	f7f7 f8ca 	bl	80001f0 <memchr>
 800905c:	2800      	cmp	r0, #0
 800905e:	d03f      	beq.n	80090e0 <_vfiprintf_r+0x22c>
 8009060:	4b29      	ldr	r3, [pc, #164]	; (8009108 <_vfiprintf_r+0x254>)
 8009062:	bb1b      	cbnz	r3, 80090ac <_vfiprintf_r+0x1f8>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	3307      	adds	r3, #7
 8009068:	f023 0307 	bic.w	r3, r3, #7
 800906c:	3308      	adds	r3, #8
 800906e:	9303      	str	r3, [sp, #12]
 8009070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009072:	443b      	add	r3, r7
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	e767      	b.n	8008f48 <_vfiprintf_r+0x94>
 8009078:	fb0c 3202 	mla	r2, ip, r2, r3
 800907c:	460c      	mov	r4, r1
 800907e:	2001      	movs	r0, #1
 8009080:	e7a5      	b.n	8008fce <_vfiprintf_r+0x11a>
 8009082:	2300      	movs	r3, #0
 8009084:	3401      	adds	r4, #1
 8009086:	9305      	str	r3, [sp, #20]
 8009088:	4619      	mov	r1, r3
 800908a:	f04f 0c0a 	mov.w	ip, #10
 800908e:	4620      	mov	r0, r4
 8009090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009094:	3a30      	subs	r2, #48	; 0x30
 8009096:	2a09      	cmp	r2, #9
 8009098:	d903      	bls.n	80090a2 <_vfiprintf_r+0x1ee>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0c5      	beq.n	800902a <_vfiprintf_r+0x176>
 800909e:	9105      	str	r1, [sp, #20]
 80090a0:	e7c3      	b.n	800902a <_vfiprintf_r+0x176>
 80090a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a6:	4604      	mov	r4, r0
 80090a8:	2301      	movs	r3, #1
 80090aa:	e7f0      	b.n	800908e <_vfiprintf_r+0x1da>
 80090ac:	ab03      	add	r3, sp, #12
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	462a      	mov	r2, r5
 80090b2:	4b16      	ldr	r3, [pc, #88]	; (800910c <_vfiprintf_r+0x258>)
 80090b4:	a904      	add	r1, sp, #16
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7fd fe24 	bl	8006d04 <_printf_float>
 80090bc:	4607      	mov	r7, r0
 80090be:	1c78      	adds	r0, r7, #1
 80090c0:	d1d6      	bne.n	8009070 <_vfiprintf_r+0x1bc>
 80090c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090c4:	07d9      	lsls	r1, r3, #31
 80090c6:	d405      	bmi.n	80090d4 <_vfiprintf_r+0x220>
 80090c8:	89ab      	ldrh	r3, [r5, #12]
 80090ca:	059a      	lsls	r2, r3, #22
 80090cc:	d402      	bmi.n	80090d4 <_vfiprintf_r+0x220>
 80090ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d0:	f000 faaf 	bl	8009632 <__retarget_lock_release_recursive>
 80090d4:	89ab      	ldrh	r3, [r5, #12]
 80090d6:	065b      	lsls	r3, r3, #25
 80090d8:	f53f af12 	bmi.w	8008f00 <_vfiprintf_r+0x4c>
 80090dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090de:	e711      	b.n	8008f04 <_vfiprintf_r+0x50>
 80090e0:	ab03      	add	r3, sp, #12
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	462a      	mov	r2, r5
 80090e6:	4b09      	ldr	r3, [pc, #36]	; (800910c <_vfiprintf_r+0x258>)
 80090e8:	a904      	add	r1, sp, #16
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7fe f8ae 	bl	800724c <_printf_i>
 80090f0:	e7e4      	b.n	80090bc <_vfiprintf_r+0x208>
 80090f2:	bf00      	nop
 80090f4:	08009d14 	.word	0x08009d14
 80090f8:	08009d34 	.word	0x08009d34
 80090fc:	08009cf4 	.word	0x08009cf4
 8009100:	08009b9c 	.word	0x08009b9c
 8009104:	08009ba6 	.word	0x08009ba6
 8009108:	08006d05 	.word	0x08006d05
 800910c:	08008e8f 	.word	0x08008e8f
 8009110:	08009ba2 	.word	0x08009ba2

08009114 <__swbuf_r>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	460e      	mov	r6, r1
 8009118:	4614      	mov	r4, r2
 800911a:	4605      	mov	r5, r0
 800911c:	b118      	cbz	r0, 8009126 <__swbuf_r+0x12>
 800911e:	6983      	ldr	r3, [r0, #24]
 8009120:	b90b      	cbnz	r3, 8009126 <__swbuf_r+0x12>
 8009122:	f000 f9e7 	bl	80094f4 <__sinit>
 8009126:	4b21      	ldr	r3, [pc, #132]	; (80091ac <__swbuf_r+0x98>)
 8009128:	429c      	cmp	r4, r3
 800912a:	d12b      	bne.n	8009184 <__swbuf_r+0x70>
 800912c:	686c      	ldr	r4, [r5, #4]
 800912e:	69a3      	ldr	r3, [r4, #24]
 8009130:	60a3      	str	r3, [r4, #8]
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	071a      	lsls	r2, r3, #28
 8009136:	d52f      	bpl.n	8009198 <__swbuf_r+0x84>
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	b36b      	cbz	r3, 8009198 <__swbuf_r+0x84>
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	1ac0      	subs	r0, r0, r3
 8009142:	6963      	ldr	r3, [r4, #20]
 8009144:	b2f6      	uxtb	r6, r6
 8009146:	4283      	cmp	r3, r0
 8009148:	4637      	mov	r7, r6
 800914a:	dc04      	bgt.n	8009156 <__swbuf_r+0x42>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f93c 	bl	80093cc <_fflush_r>
 8009154:	bb30      	cbnz	r0, 80091a4 <__swbuf_r+0x90>
 8009156:	68a3      	ldr	r3, [r4, #8]
 8009158:	3b01      	subs	r3, #1
 800915a:	60a3      	str	r3, [r4, #8]
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	6022      	str	r2, [r4, #0]
 8009162:	701e      	strb	r6, [r3, #0]
 8009164:	6963      	ldr	r3, [r4, #20]
 8009166:	3001      	adds	r0, #1
 8009168:	4283      	cmp	r3, r0
 800916a:	d004      	beq.n	8009176 <__swbuf_r+0x62>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	07db      	lsls	r3, r3, #31
 8009170:	d506      	bpl.n	8009180 <__swbuf_r+0x6c>
 8009172:	2e0a      	cmp	r6, #10
 8009174:	d104      	bne.n	8009180 <__swbuf_r+0x6c>
 8009176:	4621      	mov	r1, r4
 8009178:	4628      	mov	r0, r5
 800917a:	f000 f927 	bl	80093cc <_fflush_r>
 800917e:	b988      	cbnz	r0, 80091a4 <__swbuf_r+0x90>
 8009180:	4638      	mov	r0, r7
 8009182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009184:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <__swbuf_r+0x9c>)
 8009186:	429c      	cmp	r4, r3
 8009188:	d101      	bne.n	800918e <__swbuf_r+0x7a>
 800918a:	68ac      	ldr	r4, [r5, #8]
 800918c:	e7cf      	b.n	800912e <__swbuf_r+0x1a>
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <__swbuf_r+0xa0>)
 8009190:	429c      	cmp	r4, r3
 8009192:	bf08      	it	eq
 8009194:	68ec      	ldreq	r4, [r5, #12]
 8009196:	e7ca      	b.n	800912e <__swbuf_r+0x1a>
 8009198:	4621      	mov	r1, r4
 800919a:	4628      	mov	r0, r5
 800919c:	f000 f81a 	bl	80091d4 <__swsetup_r>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d0cb      	beq.n	800913c <__swbuf_r+0x28>
 80091a4:	f04f 37ff 	mov.w	r7, #4294967295
 80091a8:	e7ea      	b.n	8009180 <__swbuf_r+0x6c>
 80091aa:	bf00      	nop
 80091ac:	08009d14 	.word	0x08009d14
 80091b0:	08009d34 	.word	0x08009d34
 80091b4:	08009cf4 	.word	0x08009cf4

080091b8 <__ascii_wctomb>:
 80091b8:	b149      	cbz	r1, 80091ce <__ascii_wctomb+0x16>
 80091ba:	2aff      	cmp	r2, #255	; 0xff
 80091bc:	bf85      	ittet	hi
 80091be:	238a      	movhi	r3, #138	; 0x8a
 80091c0:	6003      	strhi	r3, [r0, #0]
 80091c2:	700a      	strbls	r2, [r1, #0]
 80091c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80091c8:	bf98      	it	ls
 80091ca:	2001      	movls	r0, #1
 80091cc:	4770      	bx	lr
 80091ce:	4608      	mov	r0, r1
 80091d0:	4770      	bx	lr
	...

080091d4 <__swsetup_r>:
 80091d4:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <__swsetup_r+0xcc>)
 80091d6:	b570      	push	{r4, r5, r6, lr}
 80091d8:	681d      	ldr	r5, [r3, #0]
 80091da:	4606      	mov	r6, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	b125      	cbz	r5, 80091ea <__swsetup_r+0x16>
 80091e0:	69ab      	ldr	r3, [r5, #24]
 80091e2:	b913      	cbnz	r3, 80091ea <__swsetup_r+0x16>
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 f985 	bl	80094f4 <__sinit>
 80091ea:	4b2e      	ldr	r3, [pc, #184]	; (80092a4 <__swsetup_r+0xd0>)
 80091ec:	429c      	cmp	r4, r3
 80091ee:	d10f      	bne.n	8009210 <__swsetup_r+0x3c>
 80091f0:	686c      	ldr	r4, [r5, #4]
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091f8:	0719      	lsls	r1, r3, #28
 80091fa:	d42c      	bmi.n	8009256 <__swsetup_r+0x82>
 80091fc:	06dd      	lsls	r5, r3, #27
 80091fe:	d411      	bmi.n	8009224 <__swsetup_r+0x50>
 8009200:	2309      	movs	r3, #9
 8009202:	6033      	str	r3, [r6, #0]
 8009204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	e03e      	b.n	800928e <__swsetup_r+0xba>
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <__swsetup_r+0xd4>)
 8009212:	429c      	cmp	r4, r3
 8009214:	d101      	bne.n	800921a <__swsetup_r+0x46>
 8009216:	68ac      	ldr	r4, [r5, #8]
 8009218:	e7eb      	b.n	80091f2 <__swsetup_r+0x1e>
 800921a:	4b24      	ldr	r3, [pc, #144]	; (80092ac <__swsetup_r+0xd8>)
 800921c:	429c      	cmp	r4, r3
 800921e:	bf08      	it	eq
 8009220:	68ec      	ldreq	r4, [r5, #12]
 8009222:	e7e6      	b.n	80091f2 <__swsetup_r+0x1e>
 8009224:	0758      	lsls	r0, r3, #29
 8009226:	d512      	bpl.n	800924e <__swsetup_r+0x7a>
 8009228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800922a:	b141      	cbz	r1, 800923e <__swsetup_r+0x6a>
 800922c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009230:	4299      	cmp	r1, r3
 8009232:	d002      	beq.n	800923a <__swsetup_r+0x66>
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff fb6f 	bl	8008918 <_free_r>
 800923a:	2300      	movs	r3, #0
 800923c:	6363      	str	r3, [r4, #52]	; 0x34
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f043 0308 	orr.w	r3, r3, #8
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	b94b      	cbnz	r3, 800926e <__swsetup_r+0x9a>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009264:	d003      	beq.n	800926e <__swsetup_r+0x9a>
 8009266:	4621      	mov	r1, r4
 8009268:	4630      	mov	r0, r6
 800926a:	f000 fa07 	bl	800967c <__smakebuf_r>
 800926e:	89a0      	ldrh	r0, [r4, #12]
 8009270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009274:	f010 0301 	ands.w	r3, r0, #1
 8009278:	d00a      	beq.n	8009290 <__swsetup_r+0xbc>
 800927a:	2300      	movs	r3, #0
 800927c:	60a3      	str	r3, [r4, #8]
 800927e:	6963      	ldr	r3, [r4, #20]
 8009280:	425b      	negs	r3, r3
 8009282:	61a3      	str	r3, [r4, #24]
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	b943      	cbnz	r3, 800929a <__swsetup_r+0xc6>
 8009288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800928c:	d1ba      	bne.n	8009204 <__swsetup_r+0x30>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	0781      	lsls	r1, r0, #30
 8009292:	bf58      	it	pl
 8009294:	6963      	ldrpl	r3, [r4, #20]
 8009296:	60a3      	str	r3, [r4, #8]
 8009298:	e7f4      	b.n	8009284 <__swsetup_r+0xb0>
 800929a:	2000      	movs	r0, #0
 800929c:	e7f7      	b.n	800928e <__swsetup_r+0xba>
 800929e:	bf00      	nop
 80092a0:	2000001c 	.word	0x2000001c
 80092a4:	08009d14 	.word	0x08009d14
 80092a8:	08009d34 	.word	0x08009d34
 80092ac:	08009cf4 	.word	0x08009cf4

080092b0 <abort>:
 80092b0:	b508      	push	{r3, lr}
 80092b2:	2006      	movs	r0, #6
 80092b4:	f000 fa52 	bl	800975c <raise>
 80092b8:	2001      	movs	r0, #1
 80092ba:	f7f8 fb29 	bl	8001910 <_exit>
	...

080092c0 <__sflush_r>:
 80092c0:	898a      	ldrh	r2, [r1, #12]
 80092c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	4605      	mov	r5, r0
 80092c8:	0710      	lsls	r0, r2, #28
 80092ca:	460c      	mov	r4, r1
 80092cc:	d458      	bmi.n	8009380 <__sflush_r+0xc0>
 80092ce:	684b      	ldr	r3, [r1, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc05      	bgt.n	80092e0 <__sflush_r+0x20>
 80092d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dc02      	bgt.n	80092e0 <__sflush_r+0x20>
 80092da:	2000      	movs	r0, #0
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	d0f9      	beq.n	80092da <__sflush_r+0x1a>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092ec:	682f      	ldr	r7, [r5, #0]
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	d032      	beq.n	8009358 <__sflush_r+0x98>
 80092f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	075a      	lsls	r2, r3, #29
 80092f8:	d505      	bpl.n	8009306 <__sflush_r+0x46>
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	1ac0      	subs	r0, r0, r3
 80092fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009300:	b10b      	cbz	r3, 8009306 <__sflush_r+0x46>
 8009302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009304:	1ac0      	subs	r0, r0, r3
 8009306:	2300      	movs	r3, #0
 8009308:	4602      	mov	r2, r0
 800930a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800930c:	6a21      	ldr	r1, [r4, #32]
 800930e:	4628      	mov	r0, r5
 8009310:	47b0      	blx	r6
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	d106      	bne.n	8009326 <__sflush_r+0x66>
 8009318:	6829      	ldr	r1, [r5, #0]
 800931a:	291d      	cmp	r1, #29
 800931c:	d82c      	bhi.n	8009378 <__sflush_r+0xb8>
 800931e:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <__sflush_r+0x108>)
 8009320:	40ca      	lsrs	r2, r1
 8009322:	07d6      	lsls	r6, r2, #31
 8009324:	d528      	bpl.n	8009378 <__sflush_r+0xb8>
 8009326:	2200      	movs	r2, #0
 8009328:	6062      	str	r2, [r4, #4]
 800932a:	04d9      	lsls	r1, r3, #19
 800932c:	6922      	ldr	r2, [r4, #16]
 800932e:	6022      	str	r2, [r4, #0]
 8009330:	d504      	bpl.n	800933c <__sflush_r+0x7c>
 8009332:	1c42      	adds	r2, r0, #1
 8009334:	d101      	bne.n	800933a <__sflush_r+0x7a>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	b903      	cbnz	r3, 800933c <__sflush_r+0x7c>
 800933a:	6560      	str	r0, [r4, #84]	; 0x54
 800933c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800933e:	602f      	str	r7, [r5, #0]
 8009340:	2900      	cmp	r1, #0
 8009342:	d0ca      	beq.n	80092da <__sflush_r+0x1a>
 8009344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009348:	4299      	cmp	r1, r3
 800934a:	d002      	beq.n	8009352 <__sflush_r+0x92>
 800934c:	4628      	mov	r0, r5
 800934e:	f7ff fae3 	bl	8008918 <_free_r>
 8009352:	2000      	movs	r0, #0
 8009354:	6360      	str	r0, [r4, #52]	; 0x34
 8009356:	e7c1      	b.n	80092dc <__sflush_r+0x1c>
 8009358:	6a21      	ldr	r1, [r4, #32]
 800935a:	2301      	movs	r3, #1
 800935c:	4628      	mov	r0, r5
 800935e:	47b0      	blx	r6
 8009360:	1c41      	adds	r1, r0, #1
 8009362:	d1c7      	bne.n	80092f4 <__sflush_r+0x34>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0c4      	beq.n	80092f4 <__sflush_r+0x34>
 800936a:	2b1d      	cmp	r3, #29
 800936c:	d001      	beq.n	8009372 <__sflush_r+0xb2>
 800936e:	2b16      	cmp	r3, #22
 8009370:	d101      	bne.n	8009376 <__sflush_r+0xb6>
 8009372:	602f      	str	r7, [r5, #0]
 8009374:	e7b1      	b.n	80092da <__sflush_r+0x1a>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e7ad      	b.n	80092dc <__sflush_r+0x1c>
 8009380:	690f      	ldr	r7, [r1, #16]
 8009382:	2f00      	cmp	r7, #0
 8009384:	d0a9      	beq.n	80092da <__sflush_r+0x1a>
 8009386:	0793      	lsls	r3, r2, #30
 8009388:	680e      	ldr	r6, [r1, #0]
 800938a:	bf08      	it	eq
 800938c:	694b      	ldreq	r3, [r1, #20]
 800938e:	600f      	str	r7, [r1, #0]
 8009390:	bf18      	it	ne
 8009392:	2300      	movne	r3, #0
 8009394:	eba6 0807 	sub.w	r8, r6, r7
 8009398:	608b      	str	r3, [r1, #8]
 800939a:	f1b8 0f00 	cmp.w	r8, #0
 800939e:	dd9c      	ble.n	80092da <__sflush_r+0x1a>
 80093a0:	6a21      	ldr	r1, [r4, #32]
 80093a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093a4:	4643      	mov	r3, r8
 80093a6:	463a      	mov	r2, r7
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b0      	blx	r6
 80093ac:	2800      	cmp	r0, #0
 80093ae:	dc06      	bgt.n	80093be <__sflush_r+0xfe>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	e78e      	b.n	80092dc <__sflush_r+0x1c>
 80093be:	4407      	add	r7, r0
 80093c0:	eba8 0800 	sub.w	r8, r8, r0
 80093c4:	e7e9      	b.n	800939a <__sflush_r+0xda>
 80093c6:	bf00      	nop
 80093c8:	20400001 	.word	0x20400001

080093cc <_fflush_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	690b      	ldr	r3, [r1, #16]
 80093d0:	4605      	mov	r5, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	b913      	cbnz	r3, 80093dc <_fflush_r+0x10>
 80093d6:	2500      	movs	r5, #0
 80093d8:	4628      	mov	r0, r5
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	b118      	cbz	r0, 80093e6 <_fflush_r+0x1a>
 80093de:	6983      	ldr	r3, [r0, #24]
 80093e0:	b90b      	cbnz	r3, 80093e6 <_fflush_r+0x1a>
 80093e2:	f000 f887 	bl	80094f4 <__sinit>
 80093e6:	4b14      	ldr	r3, [pc, #80]	; (8009438 <_fflush_r+0x6c>)
 80093e8:	429c      	cmp	r4, r3
 80093ea:	d11b      	bne.n	8009424 <_fflush_r+0x58>
 80093ec:	686c      	ldr	r4, [r5, #4]
 80093ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ef      	beq.n	80093d6 <_fflush_r+0xa>
 80093f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093f8:	07d0      	lsls	r0, r2, #31
 80093fa:	d404      	bmi.n	8009406 <_fflush_r+0x3a>
 80093fc:	0599      	lsls	r1, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_fflush_r+0x3a>
 8009400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009402:	f000 f915 	bl	8009630 <__retarget_lock_acquire_recursive>
 8009406:	4628      	mov	r0, r5
 8009408:	4621      	mov	r1, r4
 800940a:	f7ff ff59 	bl	80092c0 <__sflush_r>
 800940e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009410:	07da      	lsls	r2, r3, #31
 8009412:	4605      	mov	r5, r0
 8009414:	d4e0      	bmi.n	80093d8 <_fflush_r+0xc>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	059b      	lsls	r3, r3, #22
 800941a:	d4dd      	bmi.n	80093d8 <_fflush_r+0xc>
 800941c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800941e:	f000 f908 	bl	8009632 <__retarget_lock_release_recursive>
 8009422:	e7d9      	b.n	80093d8 <_fflush_r+0xc>
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <_fflush_r+0x70>)
 8009426:	429c      	cmp	r4, r3
 8009428:	d101      	bne.n	800942e <_fflush_r+0x62>
 800942a:	68ac      	ldr	r4, [r5, #8]
 800942c:	e7df      	b.n	80093ee <_fflush_r+0x22>
 800942e:	4b04      	ldr	r3, [pc, #16]	; (8009440 <_fflush_r+0x74>)
 8009430:	429c      	cmp	r4, r3
 8009432:	bf08      	it	eq
 8009434:	68ec      	ldreq	r4, [r5, #12]
 8009436:	e7da      	b.n	80093ee <_fflush_r+0x22>
 8009438:	08009d14 	.word	0x08009d14
 800943c:	08009d34 	.word	0x08009d34
 8009440:	08009cf4 	.word	0x08009cf4

08009444 <std>:
 8009444:	2300      	movs	r3, #0
 8009446:	b510      	push	{r4, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	e9c0 3300 	strd	r3, r3, [r0]
 800944e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009452:	6083      	str	r3, [r0, #8]
 8009454:	8181      	strh	r1, [r0, #12]
 8009456:	6643      	str	r3, [r0, #100]	; 0x64
 8009458:	81c2      	strh	r2, [r0, #14]
 800945a:	6183      	str	r3, [r0, #24]
 800945c:	4619      	mov	r1, r3
 800945e:	2208      	movs	r2, #8
 8009460:	305c      	adds	r0, #92	; 0x5c
 8009462:	f7fd fba7 	bl	8006bb4 <memset>
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <std+0x38>)
 8009468:	6263      	str	r3, [r4, #36]	; 0x24
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <std+0x3c>)
 800946c:	62a3      	str	r3, [r4, #40]	; 0x28
 800946e:	4b05      	ldr	r3, [pc, #20]	; (8009484 <std+0x40>)
 8009470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <std+0x44>)
 8009474:	6224      	str	r4, [r4, #32]
 8009476:	6323      	str	r3, [r4, #48]	; 0x30
 8009478:	bd10      	pop	{r4, pc}
 800947a:	bf00      	nop
 800947c:	08009795 	.word	0x08009795
 8009480:	080097b7 	.word	0x080097b7
 8009484:	080097ef 	.word	0x080097ef
 8009488:	08009813 	.word	0x08009813

0800948c <_cleanup_r>:
 800948c:	4901      	ldr	r1, [pc, #4]	; (8009494 <_cleanup_r+0x8>)
 800948e:	f000 b8af 	b.w	80095f0 <_fwalk_reent>
 8009492:	bf00      	nop
 8009494:	080093cd 	.word	0x080093cd

08009498 <__sfmoreglue>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	1e4a      	subs	r2, r1, #1
 800949c:	2568      	movs	r5, #104	; 0x68
 800949e:	4355      	muls	r5, r2
 80094a0:	460e      	mov	r6, r1
 80094a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094a6:	f7ff fa87 	bl	80089b8 <_malloc_r>
 80094aa:	4604      	mov	r4, r0
 80094ac:	b140      	cbz	r0, 80094c0 <__sfmoreglue+0x28>
 80094ae:	2100      	movs	r1, #0
 80094b0:	e9c0 1600 	strd	r1, r6, [r0]
 80094b4:	300c      	adds	r0, #12
 80094b6:	60a0      	str	r0, [r4, #8]
 80094b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094bc:	f7fd fb7a 	bl	8006bb4 <memset>
 80094c0:	4620      	mov	r0, r4
 80094c2:	bd70      	pop	{r4, r5, r6, pc}

080094c4 <__sfp_lock_acquire>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__sfp_lock_acquire+0x8>)
 80094c6:	f000 b8b3 	b.w	8009630 <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	2000056c 	.word	0x2000056c

080094d0 <__sfp_lock_release>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__sfp_lock_release+0x8>)
 80094d2:	f000 b8ae 	b.w	8009632 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	2000056c 	.word	0x2000056c

080094dc <__sinit_lock_acquire>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__sinit_lock_acquire+0x8>)
 80094de:	f000 b8a7 	b.w	8009630 <__retarget_lock_acquire_recursive>
 80094e2:	bf00      	nop
 80094e4:	20000567 	.word	0x20000567

080094e8 <__sinit_lock_release>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sinit_lock_release+0x8>)
 80094ea:	f000 b8a2 	b.w	8009632 <__retarget_lock_release_recursive>
 80094ee:	bf00      	nop
 80094f0:	20000567 	.word	0x20000567

080094f4 <__sinit>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4604      	mov	r4, r0
 80094f8:	f7ff fff0 	bl	80094dc <__sinit_lock_acquire>
 80094fc:	69a3      	ldr	r3, [r4, #24]
 80094fe:	b11b      	cbz	r3, 8009508 <__sinit+0x14>
 8009500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009504:	f7ff bff0 	b.w	80094e8 <__sinit_lock_release>
 8009508:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800950c:	6523      	str	r3, [r4, #80]	; 0x50
 800950e:	4b13      	ldr	r3, [pc, #76]	; (800955c <__sinit+0x68>)
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <__sinit+0x6c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	62a2      	str	r2, [r4, #40]	; 0x28
 8009516:	42a3      	cmp	r3, r4
 8009518:	bf04      	itt	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	61a3      	streq	r3, [r4, #24]
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f820 	bl	8009564 <__sfp>
 8009524:	6060      	str	r0, [r4, #4]
 8009526:	4620      	mov	r0, r4
 8009528:	f000 f81c 	bl	8009564 <__sfp>
 800952c:	60a0      	str	r0, [r4, #8]
 800952e:	4620      	mov	r0, r4
 8009530:	f000 f818 	bl	8009564 <__sfp>
 8009534:	2200      	movs	r2, #0
 8009536:	60e0      	str	r0, [r4, #12]
 8009538:	2104      	movs	r1, #4
 800953a:	6860      	ldr	r0, [r4, #4]
 800953c:	f7ff ff82 	bl	8009444 <std>
 8009540:	68a0      	ldr	r0, [r4, #8]
 8009542:	2201      	movs	r2, #1
 8009544:	2109      	movs	r1, #9
 8009546:	f7ff ff7d 	bl	8009444 <std>
 800954a:	68e0      	ldr	r0, [r4, #12]
 800954c:	2202      	movs	r2, #2
 800954e:	2112      	movs	r1, #18
 8009550:	f7ff ff78 	bl	8009444 <std>
 8009554:	2301      	movs	r3, #1
 8009556:	61a3      	str	r3, [r4, #24]
 8009558:	e7d2      	b.n	8009500 <__sinit+0xc>
 800955a:	bf00      	nop
 800955c:	08009974 	.word	0x08009974
 8009560:	0800948d 	.word	0x0800948d

08009564 <__sfp>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	4607      	mov	r7, r0
 8009568:	f7ff ffac 	bl	80094c4 <__sfp_lock_acquire>
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <__sfp+0x84>)
 800956e:	681e      	ldr	r6, [r3, #0]
 8009570:	69b3      	ldr	r3, [r6, #24]
 8009572:	b913      	cbnz	r3, 800957a <__sfp+0x16>
 8009574:	4630      	mov	r0, r6
 8009576:	f7ff ffbd 	bl	80094f4 <__sinit>
 800957a:	3648      	adds	r6, #72	; 0x48
 800957c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009580:	3b01      	subs	r3, #1
 8009582:	d503      	bpl.n	800958c <__sfp+0x28>
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	b30b      	cbz	r3, 80095cc <__sfp+0x68>
 8009588:	6836      	ldr	r6, [r6, #0]
 800958a:	e7f7      	b.n	800957c <__sfp+0x18>
 800958c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009590:	b9d5      	cbnz	r5, 80095c8 <__sfp+0x64>
 8009592:	4b16      	ldr	r3, [pc, #88]	; (80095ec <__sfp+0x88>)
 8009594:	60e3      	str	r3, [r4, #12]
 8009596:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800959a:	6665      	str	r5, [r4, #100]	; 0x64
 800959c:	f000 f847 	bl	800962e <__retarget_lock_init_recursive>
 80095a0:	f7ff ff96 	bl	80094d0 <__sfp_lock_release>
 80095a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095ac:	6025      	str	r5, [r4, #0]
 80095ae:	61a5      	str	r5, [r4, #24]
 80095b0:	2208      	movs	r2, #8
 80095b2:	4629      	mov	r1, r5
 80095b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095b8:	f7fd fafc 	bl	8006bb4 <memset>
 80095bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095c4:	4620      	mov	r0, r4
 80095c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c8:	3468      	adds	r4, #104	; 0x68
 80095ca:	e7d9      	b.n	8009580 <__sfp+0x1c>
 80095cc:	2104      	movs	r1, #4
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff ff62 	bl	8009498 <__sfmoreglue>
 80095d4:	4604      	mov	r4, r0
 80095d6:	6030      	str	r0, [r6, #0]
 80095d8:	2800      	cmp	r0, #0
 80095da:	d1d5      	bne.n	8009588 <__sfp+0x24>
 80095dc:	f7ff ff78 	bl	80094d0 <__sfp_lock_release>
 80095e0:	230c      	movs	r3, #12
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	e7ee      	b.n	80095c4 <__sfp+0x60>
 80095e6:	bf00      	nop
 80095e8:	08009974 	.word	0x08009974
 80095ec:	ffff0001 	.word	0xffff0001

080095f0 <_fwalk_reent>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4606      	mov	r6, r0
 80095f6:	4688      	mov	r8, r1
 80095f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095fc:	2700      	movs	r7, #0
 80095fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009602:	f1b9 0901 	subs.w	r9, r9, #1
 8009606:	d505      	bpl.n	8009614 <_fwalk_reent+0x24>
 8009608:	6824      	ldr	r4, [r4, #0]
 800960a:	2c00      	cmp	r4, #0
 800960c:	d1f7      	bne.n	80095fe <_fwalk_reent+0xe>
 800960e:	4638      	mov	r0, r7
 8009610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009614:	89ab      	ldrh	r3, [r5, #12]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d907      	bls.n	800962a <_fwalk_reent+0x3a>
 800961a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800961e:	3301      	adds	r3, #1
 8009620:	d003      	beq.n	800962a <_fwalk_reent+0x3a>
 8009622:	4629      	mov	r1, r5
 8009624:	4630      	mov	r0, r6
 8009626:	47c0      	blx	r8
 8009628:	4307      	orrs	r7, r0
 800962a:	3568      	adds	r5, #104	; 0x68
 800962c:	e7e9      	b.n	8009602 <_fwalk_reent+0x12>

0800962e <__retarget_lock_init_recursive>:
 800962e:	4770      	bx	lr

08009630 <__retarget_lock_acquire_recursive>:
 8009630:	4770      	bx	lr

08009632 <__retarget_lock_release_recursive>:
 8009632:	4770      	bx	lr

08009634 <__swhatbuf_r>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	460e      	mov	r6, r1
 8009638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963c:	2900      	cmp	r1, #0
 800963e:	b096      	sub	sp, #88	; 0x58
 8009640:	4614      	mov	r4, r2
 8009642:	461d      	mov	r5, r3
 8009644:	da07      	bge.n	8009656 <__swhatbuf_r+0x22>
 8009646:	2300      	movs	r3, #0
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	89b3      	ldrh	r3, [r6, #12]
 800964c:	061a      	lsls	r2, r3, #24
 800964e:	d410      	bmi.n	8009672 <__swhatbuf_r+0x3e>
 8009650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009654:	e00e      	b.n	8009674 <__swhatbuf_r+0x40>
 8009656:	466a      	mov	r2, sp
 8009658:	f000 f902 	bl	8009860 <_fstat_r>
 800965c:	2800      	cmp	r0, #0
 800965e:	dbf2      	blt.n	8009646 <__swhatbuf_r+0x12>
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009666:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800966a:	425a      	negs	r2, r3
 800966c:	415a      	adcs	r2, r3
 800966e:	602a      	str	r2, [r5, #0]
 8009670:	e7ee      	b.n	8009650 <__swhatbuf_r+0x1c>
 8009672:	2340      	movs	r3, #64	; 0x40
 8009674:	2000      	movs	r0, #0
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	b016      	add	sp, #88	; 0x58
 800967a:	bd70      	pop	{r4, r5, r6, pc}

0800967c <__smakebuf_r>:
 800967c:	898b      	ldrh	r3, [r1, #12]
 800967e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009680:	079d      	lsls	r5, r3, #30
 8009682:	4606      	mov	r6, r0
 8009684:	460c      	mov	r4, r1
 8009686:	d507      	bpl.n	8009698 <__smakebuf_r+0x1c>
 8009688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	6123      	str	r3, [r4, #16]
 8009690:	2301      	movs	r3, #1
 8009692:	6163      	str	r3, [r4, #20]
 8009694:	b002      	add	sp, #8
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	ab01      	add	r3, sp, #4
 800969a:	466a      	mov	r2, sp
 800969c:	f7ff ffca 	bl	8009634 <__swhatbuf_r>
 80096a0:	9900      	ldr	r1, [sp, #0]
 80096a2:	4605      	mov	r5, r0
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff f987 	bl	80089b8 <_malloc_r>
 80096aa:	b948      	cbnz	r0, 80096c0 <__smakebuf_r+0x44>
 80096ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b0:	059a      	lsls	r2, r3, #22
 80096b2:	d4ef      	bmi.n	8009694 <__smakebuf_r+0x18>
 80096b4:	f023 0303 	bic.w	r3, r3, #3
 80096b8:	f043 0302 	orr.w	r3, r3, #2
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	e7e3      	b.n	8009688 <__smakebuf_r+0xc>
 80096c0:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <__smakebuf_r+0x7c>)
 80096c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	6020      	str	r0, [r4, #0]
 80096c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	9b00      	ldr	r3, [sp, #0]
 80096d0:	6163      	str	r3, [r4, #20]
 80096d2:	9b01      	ldr	r3, [sp, #4]
 80096d4:	6120      	str	r0, [r4, #16]
 80096d6:	b15b      	cbz	r3, 80096f0 <__smakebuf_r+0x74>
 80096d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096dc:	4630      	mov	r0, r6
 80096de:	f000 f8d1 	bl	8009884 <_isatty_r>
 80096e2:	b128      	cbz	r0, 80096f0 <__smakebuf_r+0x74>
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	f023 0303 	bic.w	r3, r3, #3
 80096ea:	f043 0301 	orr.w	r3, r3, #1
 80096ee:	81a3      	strh	r3, [r4, #12]
 80096f0:	89a0      	ldrh	r0, [r4, #12]
 80096f2:	4305      	orrs	r5, r0
 80096f4:	81a5      	strh	r5, [r4, #12]
 80096f6:	e7cd      	b.n	8009694 <__smakebuf_r+0x18>
 80096f8:	0800948d 	.word	0x0800948d

080096fc <_malloc_usable_size_r>:
 80096fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009700:	1f18      	subs	r0, r3, #4
 8009702:	2b00      	cmp	r3, #0
 8009704:	bfbc      	itt	lt
 8009706:	580b      	ldrlt	r3, [r1, r0]
 8009708:	18c0      	addlt	r0, r0, r3
 800970a:	4770      	bx	lr

0800970c <_raise_r>:
 800970c:	291f      	cmp	r1, #31
 800970e:	b538      	push	{r3, r4, r5, lr}
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	d904      	bls.n	8009720 <_raise_r+0x14>
 8009716:	2316      	movs	r3, #22
 8009718:	6003      	str	r3, [r0, #0]
 800971a:	f04f 30ff 	mov.w	r0, #4294967295
 800971e:	bd38      	pop	{r3, r4, r5, pc}
 8009720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009722:	b112      	cbz	r2, 800972a <_raise_r+0x1e>
 8009724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009728:	b94b      	cbnz	r3, 800973e <_raise_r+0x32>
 800972a:	4620      	mov	r0, r4
 800972c:	f000 f830 	bl	8009790 <_getpid_r>
 8009730:	462a      	mov	r2, r5
 8009732:	4601      	mov	r1, r0
 8009734:	4620      	mov	r0, r4
 8009736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800973a:	f000 b817 	b.w	800976c <_kill_r>
 800973e:	2b01      	cmp	r3, #1
 8009740:	d00a      	beq.n	8009758 <_raise_r+0x4c>
 8009742:	1c59      	adds	r1, r3, #1
 8009744:	d103      	bne.n	800974e <_raise_r+0x42>
 8009746:	2316      	movs	r3, #22
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	2001      	movs	r0, #1
 800974c:	e7e7      	b.n	800971e <_raise_r+0x12>
 800974e:	2400      	movs	r4, #0
 8009750:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009754:	4628      	mov	r0, r5
 8009756:	4798      	blx	r3
 8009758:	2000      	movs	r0, #0
 800975a:	e7e0      	b.n	800971e <_raise_r+0x12>

0800975c <raise>:
 800975c:	4b02      	ldr	r3, [pc, #8]	; (8009768 <raise+0xc>)
 800975e:	4601      	mov	r1, r0
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	f7ff bfd3 	b.w	800970c <_raise_r>
 8009766:	bf00      	nop
 8009768:	2000001c 	.word	0x2000001c

0800976c <_kill_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d07      	ldr	r5, [pc, #28]	; (800978c <_kill_r+0x20>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	f7f8 f8b9 	bl	80018f0 <_kill>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d102      	bne.n	8009788 <_kill_r+0x1c>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	b103      	cbz	r3, 8009788 <_kill_r+0x1c>
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	bf00      	nop
 800978c:	20000560 	.word	0x20000560

08009790 <_getpid_r>:
 8009790:	f7f8 b8a6 	b.w	80018e0 <_getpid>

08009794 <__sread>:
 8009794:	b510      	push	{r4, lr}
 8009796:	460c      	mov	r4, r1
 8009798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979c:	f000 f894 	bl	80098c8 <_read_r>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	bfab      	itete	ge
 80097a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097a6:	89a3      	ldrhlt	r3, [r4, #12]
 80097a8:	181b      	addge	r3, r3, r0
 80097aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097ae:	bfac      	ite	ge
 80097b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80097b2:	81a3      	strhlt	r3, [r4, #12]
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <__swrite>:
 80097b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ba:	461f      	mov	r7, r3
 80097bc:	898b      	ldrh	r3, [r1, #12]
 80097be:	05db      	lsls	r3, r3, #23
 80097c0:	4605      	mov	r5, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	4616      	mov	r6, r2
 80097c6:	d505      	bpl.n	80097d4 <__swrite+0x1e>
 80097c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097cc:	2302      	movs	r3, #2
 80097ce:	2200      	movs	r2, #0
 80097d0:	f000 f868 	bl	80098a4 <_lseek_r>
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	4632      	mov	r2, r6
 80097e2:	463b      	mov	r3, r7
 80097e4:	4628      	mov	r0, r5
 80097e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ea:	f000 b817 	b.w	800981c <_write_r>

080097ee <__sseek>:
 80097ee:	b510      	push	{r4, lr}
 80097f0:	460c      	mov	r4, r1
 80097f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f6:	f000 f855 	bl	80098a4 <_lseek_r>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	bf15      	itete	ne
 8009800:	6560      	strne	r0, [r4, #84]	; 0x54
 8009802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800980a:	81a3      	strheq	r3, [r4, #12]
 800980c:	bf18      	it	ne
 800980e:	81a3      	strhne	r3, [r4, #12]
 8009810:	bd10      	pop	{r4, pc}

08009812 <__sclose>:
 8009812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009816:	f000 b813 	b.w	8009840 <_close_r>
	...

0800981c <_write_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	; (800983c <_write_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f8 f897 	bl	800195e <_write>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_write_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_write_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20000560 	.word	0x20000560

08009840 <_close_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d06      	ldr	r5, [pc, #24]	; (800985c <_close_r+0x1c>)
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f8 f8a3 	bl	8001996 <_close>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_close_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_close_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20000560 	.word	0x20000560

08009860 <_fstat_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d07      	ldr	r5, [pc, #28]	; (8009880 <_fstat_r+0x20>)
 8009864:	2300      	movs	r3, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	4611      	mov	r1, r2
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	f7f8 f89e 	bl	80019ae <_fstat>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d102      	bne.n	800987c <_fstat_r+0x1c>
 8009876:	682b      	ldr	r3, [r5, #0]
 8009878:	b103      	cbz	r3, 800987c <_fstat_r+0x1c>
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	bd38      	pop	{r3, r4, r5, pc}
 800987e:	bf00      	nop
 8009880:	20000560 	.word	0x20000560

08009884 <_isatty_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d06      	ldr	r5, [pc, #24]	; (80098a0 <_isatty_r+0x1c>)
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	f7f8 f89d 	bl	80019ce <_isatty>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_isatty_r+0x1a>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_isatty_r+0x1a>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	20000560 	.word	0x20000560

080098a4 <_lseek_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d07      	ldr	r5, [pc, #28]	; (80098c4 <_lseek_r+0x20>)
 80098a8:	4604      	mov	r4, r0
 80098aa:	4608      	mov	r0, r1
 80098ac:	4611      	mov	r1, r2
 80098ae:	2200      	movs	r2, #0
 80098b0:	602a      	str	r2, [r5, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f7f8 f896 	bl	80019e4 <_lseek>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_lseek_r+0x1e>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_lseek_r+0x1e>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	20000560 	.word	0x20000560

080098c8 <_read_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4d07      	ldr	r5, [pc, #28]	; (80098e8 <_read_r+0x20>)
 80098cc:	4604      	mov	r4, r0
 80098ce:	4608      	mov	r0, r1
 80098d0:	4611      	mov	r1, r2
 80098d2:	2200      	movs	r2, #0
 80098d4:	602a      	str	r2, [r5, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f7f8 f824 	bl	8001924 <_read>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_read_r+0x1e>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_read_r+0x1e>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20000560 	.word	0x20000560

080098ec <_init>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	bf00      	nop
 80098f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f2:	bc08      	pop	{r3}
 80098f4:	469e      	mov	lr, r3
 80098f6:	4770      	bx	lr

080098f8 <_fini>:
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	bf00      	nop
 80098fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fe:	bc08      	pop	{r3}
 8009900:	469e      	mov	lr, r3
 8009902:	4770      	bx	lr
